{
  "task_id": "uppercase",
  "task_name": "Uppercase",
  "category_id": "file_context",
  "category_name": "File Context",
  "description": "Convert the content of 10 specified files to uppercase format and calculate the total word count across all processed files.",
  "author": "Lingjun Chen",
  "created_at": "2025-08-19",
  "difficulty": "L3",
  "tags": [
    "content transformation",
    "data extraction"
  ],
  "mcp": [
    "filesystem"
  ],
  "meta_data": {
    "stateType": "text",
    "stateContent": "file_context/\n    ├── file_01.txt\n    ├── file_02.txt\n    ├── file_03.txt\n    ├── file_04.txt\n    ├── file_05.txt\n    ├── file_06.txt\n    ├── file_07.txt\n    ├── file_08.txt\n    ├── file_09.txt\n    ├── file_10.txt\n    ├── file_11.txt\n    ├── file_12.txt\n    ├── file_13.txt\n    ├── file_14.txt\n    ├── file_15.txt\n    ├── file_16.txt\n    ├── file_17.txt\n    ├── file_18.txt\n    ├── file_19.txt\n    ├── file_20.txt\n    └── large_file.txt",
    "stateUrl": "https://storage.mcpmark.ai/filesystem/file_context.zip",
    "stateOriginalUrl": null
  },
  "instruction": "Please use FileSystem tools to finish the following task:\n\n### Task Description\n\nYou need to process 10 text files (file_01.txt to file_10.txt) and convert their content to uppercase format.\n\n### Task Objectives\n\n1. **Create an uppercase directory** in the test environment root\n2. **Convert each file** from file_01.txt to file_10.txt to uppercase\n3. **Save converted files** in the uppercase/ directory with the same names\n4. **Count words** in each original file (file_01.txt to file_10.txt)\n5. **Create answer.txt** with word counts in the specified format.\n\n### Specified Format of answer.txt\n\nCreate a file named `answer.txt` in uppercase/\n\n**Requirements:**\n\n- Each line should follow the format: `<filename>:<word_count>`\n- Include all 10 files: file_01.txt, file_02.txt, ..., file_10.txt\n- Use the exact filename format (file_01.txt, file_02.txt, etc.)\n- One entry per line\n",
  "verify": "#!/usr/bin/env python3\n\"\"\"\nVerification script for File Context Task: Convert Files to Uppercase\n\"\"\"\n\nimport sys\nfrom pathlib import Path\nimport os\nimport re\n\ndef get_test_directory() -> Path:\n    \"\"\"Get the test directory from FILESYSTEM_TEST_DIR env var.\"\"\"\n    test_root = os.environ.get(\"FILESYSTEM_TEST_DIR\")\n    if not test_root:\n        raise ValueError(\"FILESYSTEM_TEST_DIR environment variable is required\")\n    return Path(test_root)\n\ndef verify_uppercase_directory_exists(test_dir: Path) -> bool:\n    \"\"\"Verify that the uppercase directory exists.\"\"\"\n    uppercase_dir = test_dir / \"uppercase\"\n    \n    if not uppercase_dir.exists():\n        print(\"❌ Directory 'uppercase' not found\")\n        return False\n    \n    if not uppercase_dir.is_dir():\n        print(\"❌ 'uppercase' exists but is not a directory\")\n        return False\n    \n    print(\"✅ Uppercase directory found\")\n    return True\n\ndef verify_uppercase_files_exist(test_dir: Path) -> bool:\n    \"\"\"Verify that all 10 uppercase files exist.\"\"\"\n    uppercase_dir = test_dir / \"uppercase\"\n    \n    for i in range(1, 11):\n        filename = f\"file_{i:02d}.txt\"\n        file_path = uppercase_dir / filename\n        \n        if not file_path.exists():\n            print(f\"❌ File '{filename}' not found in uppercase directory\")\n            return False\n    \n    print(\"✅ All 10 uppercase files found\")\n    return True\n\ndef verify_uppercase_content(test_dir: Path) -> bool:\n    \"\"\"Verify that uppercase files contain the correct uppercase content.\"\"\"\n    uppercase_dir = test_dir / \"uppercase\"\n    \n    for i in range(1, 11):\n        filename = f\"file_{i:02d}.txt\"\n        original_file = test_dir / filename\n        uppercase_file = uppercase_dir / filename\n        \n        if not original_file.exists():\n            print(f\"❌ Original file '{filename}' not found\")\n            return False\n        \n        try:\n            original_content = original_file.read_text()\n            uppercase_content = uppercase_file.read_text()\n            \n            # Check if uppercase content is the uppercase version of original\n            expected_uppercase = original_content.upper()\n            \n            if uppercase_content != expected_uppercase:\n                print(f\"❌ File '{filename}' content is not properly converted to uppercase\")\n                return False\n                \n        except Exception as e:\n            print(f\"❌ Error reading file '{filename}': {e}\")\n            return False\n    \n    print(\"✅ All uppercase files contain correct uppercase content\")\n    return True\n\ndef verify_answer_file_exists(test_dir: Path) -> bool:\n    \"\"\"Verify that the answer.txt file exists in the uppercase directory.\"\"\"\n    uppercase_dir = test_dir / \"uppercase\"\n    answer_file = uppercase_dir / \"answer.txt\"\n    \n    if not answer_file.exists():\n        print(\"❌ File 'answer.txt' not found in uppercase directory\")\n        return False\n    \n    print(\"✅ Answer file found in uppercase directory\")\n    return True\n\ndef verify_answer_format(test_dir: Path) -> bool:\n    \"\"\"Verify that the answer file has the correct format.\"\"\"\n    uppercase_dir = test_dir / \"uppercase\"\n    answer_file = uppercase_dir / \"answer.txt\"\n    \n    try:\n        content = answer_file.read_text().strip()\n        \n        if not content:\n            print(\"❌ Answer file is empty\")\n            return False\n        \n        lines = content.split('\\n')\n        \n        # Check if we have exactly 10 lines\n        if len(lines) != 10:\n            print(f\"❌ Answer file has {len(lines)} lines, expected 10\")\n            return False\n        \n        for i, line in enumerate(lines, 1):\n            line = line.strip()\n            if not line:\n                print(f\"❌ Line {i} is empty\")\n                return False\n            \n            # Check format: filename:word_count\n            if ':' not in line:\n                print(f\"❌ Line {i} has incorrect format: {line}\")\n                print(\"   Expected format: filename:word_count\")\n                return False\n            \n            parts = line.split(':', 1)\n            if len(parts) != 2:\n                print(f\"❌ Line {i} has incorrect format: {line}\")\n                print(\"   Expected format: filename:word_count\")\n                return False\n            \n            filename, word_count_str = parts\n            \n            # Check filename format\n            if not filename.endswith('.txt') or not filename.startswith('file_'):\n                print(f\"❌ Line {i} has invalid filename: {filename}\")\n                return False\n            \n            # Check word count format (should be integer)\n            try:\n                word_count = int(word_count_str)\n                if word_count <= 0:\n                    print(f\"❌ Line {i} has invalid word count: {word_count_str}\")\n                    return False\n            except ValueError:\n                print(f\"❌ Line {i} has non-integer word count: {word_count_str}\")\n                return False\n        \n        print(\"✅ Answer format is correct\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error reading answer file: {e}\")\n        return False\n\ndef count_words_in_file(file_path: Path) -> int:\n    \"\"\"Count words in a file.\"\"\"\n    try:\n        content = file_path.read_text()\n        # Split by whitespace and filter out empty strings\n        words = [word for word in content.split() if word.strip()]\n        return len(words)\n    except Exception as e:\n        print(f\"❌ Error reading file {file_path}: {e}\")\n        return 0\n\ndef verify_word_counts_are_correct(test_dir: Path) -> bool:\n    \"\"\"Verify that the word counts in answer.txt are correct.\"\"\"\n    uppercase_dir = test_dir / \"uppercase\"\n    answer_file = uppercase_dir / \"answer.txt\"\n    \n    try:\n        content = answer_file.read_text().strip()\n        lines = content.split('\\n')\n        \n        # Expected word counts based on answer.md\n        expected_counts = [22, 22, 22, 22, 18, 22, 22, 22, 18, 20]\n        \n        # Create a set of expected file entries for easier checking\n        expected_entries = set()\n        for i in range(1, 11):\n            filename = f\"file_{i:02d}.txt\"\n            expected_count = expected_counts[i - 1]\n            if i == 6:  # Special case for file_06.txt: can be 21 or 22\n                expected_entries.add(f\"{filename}:21\")\n                expected_entries.add(f\"{filename}:22\")\n            else:\n                expected_entries.add(f\"{filename}:{expected_count}\")\n        \n        # Check each line in the answer file\n        found_entries = set()\n        for line in lines:\n            line = line.strip()\n            if line in expected_entries:\n                found_entries.add(line)\n            else:\n                print(f\"❌ Invalid entry: {line}\")\n                return False\n        \n        # Check if we found all expected entries\n        if len(found_entries) != 10:\n            print(f\"❌ Found {len(found_entries)} entries, expected 10\")\n            missing = expected_entries - found_entries\n            if missing:\n                print(f\"   Missing entries: {missing}\")\n            return False\n        \n        print(\"✅ All word counts are correct\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error verifying word counts: {e}\")\n        return False\n\ndef verify_all_files_are_included(test_dir: Path) -> bool:\n    \"\"\"Verify that all 10 files are included in the answer.\"\"\"\n    uppercase_dir = test_dir / \"uppercase\"\n    answer_file = uppercase_dir / \"answer.txt\"\n    \n    try:\n        content = answer_file.read_text().strip()\n        lines = content.split('\\n')\n        \n        # Check that all 10 files are present\n        found_files = set()\n        for line in lines:\n            parts = line.split(':', 1)\n            filename = parts[0]\n            found_files.add(filename)\n        \n        expected_files = {f\"file_{i:02d}.txt\" for i in range(1, 11)}\n        \n        if found_files != expected_files:\n            missing = expected_files - found_files\n            extra = found_files - expected_files\n            if missing:\n                print(f\"❌ Missing files in answer: {missing}\")\n            if extra:\n                print(f\"❌ Extra files in answer: {extra}\")\n            return False\n        \n        print(\"✅ All 10 files are included in answer\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error verifying file inclusion: {e}\")\n        return False\n\ndef main():\n    \"\"\"Main verification function.\"\"\"\n    try:\n        test_dir = get_test_directory()\n        print(f\"🔍 Verifying Uppercase in: {test_dir}\")\n        print()\n        \n        # Run all verification checks\n        checks = [\n            (\"Uppercase directory exists\", verify_uppercase_directory_exists),\n            (\"Uppercase files exist\", verify_uppercase_files_exist),\n            (\"Uppercase content is correct\", verify_uppercase_content),\n            (\"Answer file exists in uppercase directory\", verify_answer_file_exists),\n            (\"Answer format is correct\", verify_answer_format),\n            (\"All files are included\", verify_all_files_are_included),\n            (\"Word counts are correct\", verify_word_counts_are_correct),\n        ]\n        \n        all_passed = True\n        for check_name, check_func in checks:\n            print(f\"📋 {check_name}...\")\n            if not check_func(test_dir):\n                all_passed = False\n            print()\n        \n        if all_passed:\n            print(\"🎉 All verification checks passed!\")\n            sys.exit(0)\n        else:\n            print(\"❌ Some verification checks failed!\")\n            sys.exit(1)\n            \n    except Exception as e:\n        print(f\"❌ Verification failed with error: {e}\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()"
}