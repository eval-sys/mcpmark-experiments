{
  "task_id": "study_session_tracker",
  "task_name": "Study Session Tracker",
  "category_id": "computer_science_student_dashboard",
  "category_name": "Computer Science Student Dashboard",
  "description": "Create a new study-session entry in the Habit tracker section with four unchecked to-do items.",
  "author": "Zijian Wu",
  "created_at": "2025-07-27",
  "difficulty": "L3",
  "tags": [
    "content organization",
    "visual formatting",
    "status tracking"
  ],
  "mcp": [
    "notion"
  ],
  "metadata": {
    "ori_template_url": "https://painted-tennis-ebc.notion.site/Computer-Science-Student-Dashboard-23e81626b6d78083b787d3c832b02ef4",
    "gt_page_url": "https://www.notion.so/Computer-Science-Student-Dashboard-Study-Session-Tracker-2442b7e8cebd81b39435e26900a6f793"
  },
  "instruction": "Your goal is to create a new study-session entry in the **Computer Science Student Dashboard** page.\n\n1. Locate the ☑️ Habit tracker section of the page.\n2. **Insert a new date section** immediately **after the existing `2022-09-02` to-do items but *before* the divider block** that follows them. Make sure the new date has proper formatting with a date mention and bold styling like the existing dates, and all to-do items should be unchecked initially. The new section should be inserted right after the 2022-09-02 to-do items but before the divider.\n3. Directly **beneath** this new date mention, add **exactly four unchecked to-do blocks** with the following plain text (including the leading emoji on each line):\n   • 🧠 Review algorithms for technical interview\n   • 📚 Study database systems chapter 7\n   • ⚡ Practice system design problems\n   • 🎯 Complete data structures assignment",
  "verify": "import sys\nfrom notion_client import Client\nfrom tasks.utils import notion_utils\nfrom typing import Dict\n\n\ndef _normalize_string(s: str) -> str:\n    \"\"\"Replace non-breaking space with regular space for safe comparison.\"\"\"\n    return s.replace(\"\\xa0\", \" \")\n\n\ndef verify(notion: Client, main_id: str | None = None) -> bool:\n    \"\"\"Verify that the new study-session entry for 2025-01-29 was added correctly.\n\n    The script checks that:\n    1. A bold date-mention with start=2025-01-29 exists.\n    2. The mention sits after the 2022-09-02 section but before the divider that originally\n       followed that section.\n    3. Exactly four specified to-do items follow the new date mention and they are all unchecked.\n    \"\"\"\n\n    # ---------------------------------------------------------------------\n    # Locate the main page -------------------------------------------------\n    # ---------------------------------------------------------------------\n    page_id: str | None = None\n\n    if main_id:\n        found_id, object_type = notion_utils.find_page_or_database_by_id(\n            notion, main_id\n        )\n        if found_id and object_type == \"page\":\n            page_id = found_id\n\n    if not page_id:\n        page_id = notion_utils.find_page(notion, \"Computer Science Student Dashboard\")\n\n    if not page_id:\n        print(\n            \"Error: Page 'Computer Science Student Dashboard' not found.\",\n            file=sys.stderr,\n        )\n        return False\n\n    # ---------------------------------------------------------------------\n    # Fetch all blocks under the page (flattened order) --------------------\n    # ---------------------------------------------------------------------\n    all_blocks = notion_utils.get_all_blocks_recursively(notion, page_id)\n\n    # ---------------------------------------------------------------------\n    # Locate reference blocks ---------------------------------------------\n    # ---------------------------------------------------------------------\n    TARGET_DATE = \"2025-01-29\"\n    PREVIOUS_DATE = \"2022-09-02\"\n\n    index_previous_date: int | None = None\n    index_new_date: int | None = None\n    index_divider_after_previous: int | None = None\n\n    for idx, block in enumerate(all_blocks):\n        # Divider detection (we care only about the first divider that appears after\n        # the 2022-09-02 block)\n        if block.get(\"type\") == \"divider\":\n            if index_previous_date is not None and index_divider_after_previous is None:\n                index_divider_after_previous = idx\n\n        # We only need to inspect paragraph blocks that contain a date mention\n        if block.get(\"type\") != \"paragraph\":\n            continue\n\n        rich_text_list = block[\"paragraph\"].get(\"rich_text\", [])\n        for rt in rich_text_list:\n            if (\n                rt.get(\"type\") != \"mention\"\n                or rt.get(\"mention\", {}).get(\"type\") != \"date\"\n            ):\n                continue\n\n            date_start = rt[\"mention\"][\"date\"].get(\"start\")\n\n            if date_start == PREVIOUS_DATE and index_previous_date is None:\n                index_previous_date = idx\n\n            if date_start == TARGET_DATE and index_new_date is None:\n                index_new_date = idx\n                # (1) Verify bold annotation\n                if not rt.get(\"annotations\", {}).get(\"bold\", False):\n                    print(\n                        \"Error: The 2025-01-29 date mention is not bold.\",\n                        file=sys.stderr,\n                    )\n                    return False\n\n    # Ensure all reference indices were found\n    if index_previous_date is None:\n        print(\"Error: Could not locate the 2022-09-02 date section.\", file=sys.stderr)\n        return False\n    if index_divider_after_previous is None:\n        print(\n            \"Error: Could not locate the divider that follows the 2022-09-02 section.\",\n            file=sys.stderr,\n        )\n        return False\n    if index_new_date is None:\n        print(\n            \"Error: Could not locate the new 2025-01-29 date mention.\", file=sys.stderr\n        )\n        return False\n\n    # (2) Verify ordering\n    if not (index_previous_date < index_new_date < index_divider_after_previous):\n        print(\n            \"Error: The 2025-01-29 section is positioned incorrectly.\", file=sys.stderr\n        )\n        return False\n\n    # ---------------------------------------------------------------------\n    # Verify to-do items under the new date section ------------------------\n    # ---------------------------------------------------------------------\n    expected_texts = [\n        \"🧠 Review algorithms for technical interview\",\n        \"📚 Study database systems chapter 7\",\n        \"⚡ Practice system design problems\",\n        \"🎯 Complete data structures assignment\",\n    ]\n    expected_todos: Dict[str, bool] = {\n        _normalize_string(t): False for t in expected_texts\n    }\n\n    # Look through the blocks that lie between the new date mention and the divider\n    for block in all_blocks[index_new_date + 1 : index_divider_after_previous]:\n        if block.get(\"type\") != \"to_do\":\n            # Any non to-do block inside this range indicates mis-placement.\n            # We simply ignore it – correctness is determined by presence of required to-dos.\n            continue\n\n        plain_text = notion_utils.get_block_plain_text(block).strip()\n        plain_text_norm = _normalize_string(plain_text)\n        if plain_text_norm in expected_todos:\n            # (3a) Verify the to-do is unchecked\n            if block[\"to_do\"].get(\"checked\", False):\n                print(f\"Error: To-do '{plain_text}' is checked.\", file=sys.stderr)\n                return False\n            expected_todos[plain_text_norm] = True\n\n    missing_items = [text for text, found in expected_todos.items() if not found]\n    if missing_items:\n        print(f\"Error: Missing to-do items: {missing_items}\", file=sys.stderr)\n        return False\n\n    # ---------------------------------------------------------------------\n    # Success --------------------------------------------------------------\n    # ---------------------------------------------------------------------\n    print(\"Success: Study session for 2025-01-29 added correctly.\")\n    return True\n\n\n# -------------------------------------------------------------------------\n# Command-line entry-point -------------------------------------------------\n# -------------------------------------------------------------------------\n\n\ndef main() -> None:\n    notion = notion_utils.get_notion_client()\n    main_id = sys.argv[1] if len(sys.argv) > 1 else None\n\n    if verify(notion, main_id):\n        sys.exit(0)\n    else:\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()\n",
  "model_results": {
    "k2": 0,
    "gpt-5": 0,
    "grok-4": 0,
    "gpt-4-1": 0,
    "gemini-2-5-flash": 0,
    "gemini-2-5-pro": 0,
    "gpt-5-mini": 0,
    "deepseek-chat": 0,
    "gpt-4-1-mini": 0,
    "claude-4-sonnet": 0,
    "gpt-5-nano": 0,
    "o3": 0
  }
}