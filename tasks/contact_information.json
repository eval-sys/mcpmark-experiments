{
  "task_id": "contact_information",
  "task_name": "Contact Information",
  "category_id": "desktop_template",
  "category_name": "Desktop Template",
  "description": "Extract contact details from various file formats on desktop and perform reasoning analysis on the collected relationship data.",
  "author": "Lingjun Chen",
  "created_at": "2025-08-14",
  "difficulty": "L3",
  "tags": [
    "data extraction",
    "cross-referencing"
  ],
  "mcp": [
    "filesystem"
  ],
  "metadata": {},
  "instruction": "# Contact Information Compilation Task\n\n## 📋 Task Description\n\nYour task is to compile all contact information from all the files into a single CSV table. You need to extract all people's contact information and organize it systematically.\n\n## 🎯 Task Objectives\n\n1. **Scan all files** in the directory\n2. **Extract contact information** for all individuals and organizations found\n3. **Create a CSV file** named `contact_info.csv` in the main directory\n4. **Structure the CSV** with the following columns:\n   - First column: Name (required)\n   - Second column: Email (required)\n   - Third column: Phone (required)\n   - Additional columns: Any other contact information types found\n5. **Consolidate information** by merging the same types of information into single columns\n6. **Leave cells blank** if specific information is not available for a person/organization\n\n## 📁 Expected Output\n\n- **File name**: `contact_info.csv`\n- **Format**: CSV with headers and data rows\n\n## 💡 Reasoning Task\n\nAfter creating the contact_info.csv file, analyze the data to answer:\n**What is Charlie Davis's job/profession?**\n\nHint: focus on the contact information in contact_info.csv.\n\nWrite your answer in a file named `answer.txt` in the main directory.\n\n## ⚠️ Important Notes\n\n- Do not modify any existing files\n- Only create the two new files: `contact_info.csv` and `answer.txt`\n",
  "verify": "#!/usr/bin/env python3\n\"\"\"\nVerification script for Contact Information Compilation Task\n\"\"\"\n\nimport sys\nfrom pathlib import Path\nimport csv\nimport os\nimport re\n\ndef get_test_directory() -> Path:\n    \"\"\"Get the test directory from FILESYSTEM_TEST_DIR env var.\"\"\"\n    test_root = os.environ.get(\"FILESYSTEM_TEST_DIR\")\n    if not test_root:\n        raise ValueError(\"FILESYSTEM_TEST_DIR environment variable is required\")\n    return Path(test_root)\n\ndef verify_contact_info_csv_exists(test_dir: Path) -> bool:\n    \"\"\"Verify that the contact_info.csv file exists in the main directory.\"\"\"\n    contact_file = test_dir / \"contact_info.csv\"\n    \n    if not contact_file.exists():\n        print(\"❌ File 'contact_info.csv' not found in main directory\")\n        return False\n    \n    print(\"✅ contact_info.csv file found\")\n    return True\n\ndef verify_answer_txt_exists(test_dir: Path) -> bool:\n    \"\"\"Verify that the answer.txt file exists in the main directory.\"\"\"\n    answer_file = test_dir / \"answer.txt\"\n    \n    if not answer_file.exists():\n        print(\"❌ File 'answer.txt' not found in main directory\")\n        return False\n    \n    print(\"✅ answer.txt file found\")\n    return True\n\ndef verify_csv_structure(test_dir: Path) -> bool:\n    \"\"\"Verify that the CSV file has the correct structure.\"\"\"\n    contact_file = test_dir / \"contact_info.csv\"\n    \n    try:\n        with open(contact_file, 'r', encoding='utf-8') as f:\n            reader = csv.reader(f)\n            rows = list(reader)\n            \n        if len(rows) < 2:  # Need at least header + 1 data row\n            print(\"❌ CSV file has insufficient rows\")\n            return False\n        \n        headers = rows[0]\n        if not headers:\n            print(\"❌ CSV file has no headers\")\n            return False\n        \n        # Check that Name is the first column\n        if headers[0].lower() != 'name':\n            print(\"❌ First column is not 'Name'\")\n            return False\n        \n        # Check that Email and Phone are present (order may vary)\n        header_lower = [h.lower() for h in headers]\n        if 'email' not in header_lower:\n            print(\"❌ 'Email' column not found\")\n            return False\n        \n        if 'phone' not in header_lower:\n            print(\"❌ 'Phone' column not found\")\n            return False\n        \n        print(\"✅ CSV structure is correct\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error reading CSV file: {e}\")\n        return False\n\ndef verify_csv_content_accuracy(test_dir: Path) -> bool:\n    \"\"\"Verify that the CSV content contains all required data, regardless of row order or extra entries.\"\"\"\n    contact_file = test_dir / \"contact_info.csv\"\n    \n    try:\n        with open(contact_file, 'r', encoding='utf-8') as f:\n            reader = csv.DictReader(f)\n            rows = list(reader)\n        \n        # Expected data from answer.csv (hardcoded as required)\n        expected_data = [\n            {\"Name\": \"John Smith\", \"Email\": \"john@email.com\", \"Phone\": \"555-0101\", \"Status\": \"\", \"Industry\": \"\"},\n            {\"Name\": \"Jane Doe\", \"Email\": \"jane@email.com\", \"Phone\": \"555-0102\", \"Status\": \"\", \"Industry\": \"\"},\n            {\"Name\": \"Bob Johnson\", \"Email\": \"bob@email.com\", \"Phone\": \"555-0103\", \"Status\": \"\", \"Industry\": \"\"},\n            {\"Name\": \"Alice Brown\", \"Email\": \"alice@email.com\", \"Phone\": \"555-0201\", \"Status\": \"Inactive\", \"Industry\": \"\"},\n            {\"Name\": \"Charlie Davis\", \"Email\": \"charlie@email.com\", \"Phone\": \"555-0202\", \"Status\": \"Active\", \"Industry\": \"\"},\n            {\"Name\": \"David Wilson\", \"Email\": \"david@email.com\", \"Phone\": \"555-0203\", \"Status\": \"Inactive\", \"Industry\": \"\"},\n            {\"Name\": \"Acme Corp\", \"Email\": \"acme@corp.com\", \"Phone\": \"\", \"Status\": \"\", \"Industry\": \"Technology\"},\n            {\"Name\": \"Global Inc\", \"Email\": \"global@inc.com\", \"Phone\": \"\", \"Status\": \"\", \"Industry\": \"Finance\"},\n            {\"Name\": \"Local Business\", \"Email\": \"local@biz.com\", \"Phone\": \"\", \"Status\": \"\", \"Industry\": \"Retail\"},\n            {\"Name\": \"Spouse\", \"Email\": \"\", \"Phone\": \"+1-555-0124\", \"Status\": \"\", \"Industry\": \"\"},\n            {\"Name\": \"Parent\", \"Email\": \"\", \"Phone\": \"+1-555-0125\", \"Status\": \"\", \"Industry\": \"\"},\n            {\"Name\": \"Sibling\", \"Email\": \"\", \"Phone\": \"+1-555-0126\", \"Status\": \"\", \"Industry\": \"\"},\n            {\"Name\": \"Primary Doctor\", \"Email\": \"\", \"Phone\": \"+1-555-0201\", \"Status\": \"\", \"Industry\": \"\"},\n            {\"Name\": \"Dentist\", \"Email\": \"\", \"Phone\": \"+1-555-0202\", \"Status\": \"\", \"Industry\": \"\"},\n            {\"Name\": \"Pharmacy\", \"Email\": \"\", \"Phone\": \"+1-555-0203\", \"Status\": \"\", \"Industry\": \"\"}\n        ]\n        \n        # Convert expected data to a dictionary for easier lookup\n        # We'll use Name as the key since it should be unique\n        expected_dict = {}\n        for entry in expected_data:\n            expected_dict[entry[\"Name\"]] = entry\n        \n        # Check each row for accuracy, regardless of order\n        # Allow extra entries and mixed content\n        found_entries = set()\n        extra_entries = []\n        \n        for i, row in enumerate(rows):\n            row_name = row.get('Name', '')\n            if not row_name:\n                # Skip rows without names (they're not valid entries)\n                continue\n            \n            if row_name in expected_dict:\n                # This is one of our expected entries\n                if row_name in found_entries:\n                    print(f\"❌ Duplicate name found: '{row_name}'\")\n                    return False\n                \n                found_entries.add(row_name)\n                expected = expected_dict[row_name]\n                \n                # Check all columns for this entry\n                for key, expected_value in expected.items():\n                    if key in row:\n                        actual_value = row[key] if row[key] else \"\"\n                        if actual_value != expected_value:\n                            print(f\"❌ Entry '{row_name}', column '{key}': expected '{expected_value}', got '{actual_value}'\")\n                            return False\n                    else:\n                        print(f\"❌ Entry '{row_name}' missing column '{key}'\")\n                        return False\n            else:\n                # This is an extra entry - record it for informational purposes\n                extra_entries.append(row_name)\n        \n        # Verify all expected entries were found\n        if len(found_entries) != len(expected_data):\n            missing = set(expected_dict.keys()) - found_entries\n            print(f\"❌ Missing entries: {missing}\")\n            return False\n        \n        # Report extra entries if any\n        if extra_entries:\n            print(f\"ℹ️  Found {len(extra_entries)} extra entries: {extra_entries}\")\n        \n        print(f\"✅ CSV content accuracy verified: found all {len(expected_data)} required entries (plus {len(extra_entries)} extra entries)\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error verifying CSV content: {e}\")\n        return False\n\ndef verify_csv_data_completeness(test_dir: Path) -> bool:\n    \"\"\"Verify that all required data is present and no entries are missing.\"\"\"\n    contact_file = test_dir / \"contact_info.csv\"\n    \n    try:\n        with open(contact_file, 'r', encoding='utf-8') as f:\n            reader = csv.DictReader(f)\n            rows = list(reader)\n        \n        # Check that all expected names are present\n        expected_names = [\n            \"John Smith\", \"Jane Doe\", \"Bob Johnson\", \"Alice Brown\", \n            \"Charlie Davis\", \"David Wilson\", \"Acme Corp\", \"Global Inc\", \n            \"Local Business\", \"Spouse\", \"Parent\", \"Sibling\", \n            \"Primary Doctor\", \"Dentist\", \"Pharmacy\"\n        ]\n        \n        actual_names = [row.get('Name', '') for row in rows if row.get('Name')]\n        \n        missing_names = set(expected_names) - set(actual_names)\n        if missing_names:\n            print(f\"❌ Missing names: {missing_names}\")\n            return False\n        \n        extra_names = set(actual_names) - set(expected_names)\n        if extra_names:\n            print(f\"⚠️  Extra names found: {extra_names}\")\n            # This is a warning, not an error\n        \n        print(\"✅ CSV data completeness verified\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error checking data completeness: {e}\")\n        return False\n\ndef verify_answer_content(test_dir: Path) -> bool:\n    \"\"\"Verify that the answer.txt contains the correct answer about Charlie Davis.\"\"\"\n    answer_file = test_dir / \"answer.txt\"\n    \n    try:\n        content = answer_file.read_text().strip().lower()\n        \n        # The answer should contain \"dentist\" (as per answer.txt)\n        if \"dentist\" in content:\n            print(\"✅ Answer about Charlie Davis's job is correct\")\n            return True\n        else:\n            print(f\"❌ Answer does not contain 'dentist'. Found: '{content}'\")\n            return False\n        \n    except Exception as e:\n        print(f\"❌ Error reading answer.txt: {e}\")\n        return False\n\ndef verify_file_locations(test_dir: Path) -> bool:\n    \"\"\"Verify that files are in the correct locations.\"\"\"\n    contact_file = test_dir / \"contact_info.csv\"\n    answer_file = test_dir / \"answer.txt\"\n    \n    # Check that files are in the main directory, not in subdirectories\n    if contact_file.parent != test_dir:\n        print(f\"❌ contact_info.csv is not in main directory: {contact_file}\")\n        return False\n    \n    if answer_file.parent != test_dir:\n        print(f\"❌ answer.txt is not in main directory: {answer_file}\")\n        return False\n    \n    print(\"✅ Files are in correct locations\")\n    return True\n\ndef main():\n    \"\"\"Main verification function.\"\"\"\n    test_dir = get_test_directory()\n    print(\"🔍 Verifying Contact Information Compilation Task...\")\n    \n    # Define verification steps\n    verification_steps = [\n        (\"Contact Info CSV Exists\", verify_contact_info_csv_exists),\n        (\"Answer TXT Exists\", verify_answer_txt_exists),\n        (\"Files in Correct Locations\", verify_file_locations),\n        (\"CSV Structure\", verify_csv_structure),\n        (\"CSV Content Accuracy (Flexible)\", verify_csv_content_accuracy),\n        (\"CSV Data Completeness\", verify_csv_data_completeness),\n        (\"Answer Content\", verify_answer_content),\n    ]\n    \n    # Run all verification steps\n    all_passed = True\n    for step_name, verify_func in verification_steps:\n        print(f\"\\n--- {step_name} ---\")\n        if not verify_func(test_dir):\n            all_passed = False\n    \n    # Final result\n    print(\"\\n\" + \"=\"*50)\n    if all_passed:\n        print(\"✅ Contact Information Compilation Task completed successfully!\")\n        print(\"🎉 Task verification: PASS\")\n        sys.exit(0)\n    else:\n        print(\"❌ Task verification: FAIL\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()",
  "model_results": {
    "gemini-2-5-pro": 0,
    "deepseek-chat": 0,
    "qwen-3-coder": 0,
    "o3": 0,
    "gpt-5": 0,
    "k2": 0,
    "claude-4-sonnet": 0
  }
}