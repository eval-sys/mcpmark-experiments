{
  "task_id": "requirements_writing",
  "task_name": "Requirements Writing",
  "category_id": "votenet",
  "category_name": "VoteNet",
  "description": "Generate a complete requirements.txt file containing all necessary Python dependencies for running the VoteNet codebase successfully.",
  "author": "Lingjun Chen",
  "created_at": "2025-08-13",
  "difficulty": "L3",
  "tags": [
    "code exploration",
    "cross-referencing"
  ],
  "mcp": [
    "filesystem"
  ],
  "meta_data": {
    "stateType": "text",
    "stateContent": "votenet/\n    ├── doc/\n    │       ├── teaser.jpg\n    │       └── tips.md\n    ├── models/\n    │       ├── ap_helper.py\n    │       ├── backbone_module.py\n    │       ├── boxnet.py\n    │       ├── dump_helper.py\n    │       ├── loss_helper.py\n    │       ├── loss_helper_boxnet.py\n    │       ├── proposal_module.py\n    │       ├── votenet.py\n    │       └── voting_module.py\n    ├── pointnet2/\n    │       ├── _ext_src/\n    │       │       ├── include/\n    │       │       │       ├── ball_query.h\n    │       │       │       ├── cuda_utils.h\n    │       │       │       ├── group_points.h\n    │       │       │       ├── interpolate.h\n    │       │       │       ├── sampling.h\n    │       │       │       └── utils.h\n    │       │       └── src/\n    │       │               ├── ball_query.cpp\n    │       │               ├── ball_query_gpu.cu\n    │       │               ├── bindings.cpp\n    │       │               ├── group_points.cpp\n    │       │               ├── group_points_gpu.cu\n    │       │               ├── interpolate.cpp\n    │       │               ├── interpolate_gpu.cu\n    │       │               ├── sampling.cpp\n    │       │               └── sampling_gpu.cu\n    │       ├── pointnet2_modules.py\n    │       ├── pointnet2_test.py\n    │       ├── pointnet2_utils.py\n    │       ├── pytorch_utils.py\n    │       └── setup.py\n    ├── scannet/\n    │       ├── meta_data/\n    │       │       ├── scannet_means.npz\n    │       │       ├── scannet_train.txt\n    │       │       ├── scannetv2-labels.combined.tsv\n    │       │       ├── scannetv2_test.txt\n    │       │       ├── scannetv2_train.txt\n    │       │       └── scannetv2_val.txt\n    │       ├── scans/\n    │       ├── batch_load_scannet_data.py\n    │       ├── data_viz.py\n    │       ├── load_scannet_data.py\n    │       ├── model_util_scannet.py\n    │       ├── README.md\n    │       ├── scannet_detection_dataset.py\n    │       └── scannet_utils.py\n    ├── sunrgbd/\n    │       ├── matlab/\n    │       │       ├── extract_rgbd_data_v1.m\n    │       │       ├── extract_rgbd_data_v2.m\n    │       │       └── extract_split.m\n    │       ├── OFFICIAL_SUNRGBD/\n    │       ├── sunrgbd_trainval/\n    │       ├── model_util_sunrgbd.py\n    │       ├── README.md\n    │       ├── sunrgbd_data.py\n    │       ├── sunrgbd_detection_dataset.py\n    │       └── sunrgbd_utils.py\n    ├── utils/\n    │       ├── box_util.py\n    │       ├── eval_det.py\n    │       ├── metric_util.py\n    │       ├── nms.py\n    │       ├── nn_distance.py\n    │       ├── pc_util.py\n    │       ├── tf_logger.py\n    │       └── tf_visualizer.py\n    ├── CODE_OF_CONDUCT.md\n    ├── CONTRIBUTING.md\n    ├── demo.py\n    ├── eval.py\n    ├── LICENSE\n    ├── README.md\n    └── train.py",
    "stateUrl": "https://storage.mcpmark.ai/filesystem/votenet.zip",
    "stateOriginalUrl": "https://github.com/facebookresearch/votenet"
  },
  "instruction": "Please use FileSystem tools to finish the following task:\n\n### Task Description\n\nThe VoteNet project is a 3D object detection framework for point clouds. Your task is to create a `requirements.txt` file that lists all the necessary Python dependencies for running this codebase.\n\n### Task Objectives\n\n1. **Create a requirements.txt file** in the main directory\n2. **Include all essential dependencies** needed to run the VoteNet codebase\n3. **Ensure the file format is correct** (one dependency per line)\n4. **Save the file as `requirements.txt`** in the current working directory\n5. **Not just** pip install or conda install, your answer should contain **every necessary dependencies in the hole process of VoteNet**.\n\n### Requirements\n\nThe requirements.txt file should contain Python packages that are necessary for:\n\n- 3D point cloud processing\n- Deep learning frameworks\n- Computer vision libraries\n- Data visualization\n- 3D mesh processing\n- Network/graph operations\n\n### Note\n\n- You can examine the codebase structure and README to understand what packages are needed\n- The file should be saved as `requirements.txt` in the current directory\n- Each dependency should be on a separate line\n",
  "verify": "#!/usr/bin/env python3\n\"\"\"\nVerification script for VoteNet Task: Create Requirements.txt File\n\"\"\"\n\nimport sys\nfrom pathlib import Path\nimport os\n\ndef get_test_directory() -> Path:\n    \"\"\"Get the test directory from FILESYSTEM_TEST_DIR env var.\"\"\"\n    test_root = os.environ.get(\"FILESYSTEM_TEST_DIR\")\n    if not test_root:\n        raise ValueError(\"FILESYSTEM_TEST_DIR environment variable is required\")\n    return Path(test_root)\n\ndef verify_requirements_file_exists(test_dir: Path) -> bool:\n    \"\"\"Verify that the requirements.txt file exists.\"\"\"\n    requirements_file = test_dir / \"requirements.txt\"\n    \n    if not requirements_file.exists():\n        print(\"❌ File 'requirements.txt' not found\")\n        return False\n    \n    print(\"✅ Requirements.txt file found\")\n    return True\n\ndef verify_requirements_file_readable(test_dir: Path) -> bool:\n    \"\"\"Verify that the requirements.txt file is readable.\"\"\"\n    requirements_file = test_dir / \"requirements.txt\"\n    \n    try:\n        content = requirements_file.read_text()\n        if not content.strip():\n            print(\"❌ Requirements.txt file is empty\")\n            return False\n        \n        print(\"✅ Requirements.txt file is readable\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error reading requirements.txt file: {e}\")\n        return False\n\ndef verify_required_dependencies_present(test_dir: Path) -> bool:\n    \"\"\"Verify that all required dependencies are present.\"\"\"\n    requirements_file = test_dir / \"requirements.txt\"\n    \n    try:\n        content = requirements_file.read_text()\n        \n        # Required dependencies from answer.txt\n        required_deps = [\n            \"matplotlib\",\n            \"opencv\", \n            \"plyfile\",\n            \"trimesh\",\n            \"pointnet2\",\n            \"networkx\"\n        ]\n        \n        missing_deps = []\n        found_deps = []\n        \n        for dep in required_deps:\n            if dep.lower() in content.lower():\n                found_deps.append(dep)\n            else:\n                missing_deps.append(dep)\n        \n        if missing_deps:\n            print(f\"❌ Missing required dependencies: {missing_deps}\")\n            return False\n        \n        print(f\"✅ All required dependencies found: {found_deps}\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error checking dependencies: {e}\")\n        return False\n\ndef verify_file_format(test_dir: Path) -> bool:\n    \"\"\"Verify that the requirements.txt file has proper format.\"\"\"\n    requirements_file = test_dir / \"requirements.txt\"\n    \n    try:\n        content = requirements_file.read_text()\n        lines = content.split('\\n')\n        \n        # Check if file has content and proper line structure\n        if not content.strip():\n            print(\"❌ File is completely empty\")\n            return False\n        \n        # Check if there are multiple lines (indicating multiple dependencies)\n        non_empty_lines = [line.strip() for line in lines if line.strip()]\n        if len(non_empty_lines) < 3:  # Should have at least 3 dependencies\n            print(\"❌ File seems to have too few dependencies\")\n            return False\n        \n        print(\"✅ File format is acceptable\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error checking file format: {e}\")\n        return False\n\ndef verify_no_duplicate_entries(test_dir: Path) -> bool:\n    \"\"\"Verify that there are no duplicate dependency entries.\"\"\"\n    requirements_file = test_dir / \"requirements.txt\"\n    \n    try:\n        content = requirements_file.read_text()\n        lines = [line.strip().lower() for line in content.split('\\n') if line.strip()]\n        \n        # Check for duplicates\n        if len(lines) != len(set(lines)):\n            print(\"❌ File contains duplicate entries\")\n            return False\n        \n        print(\"✅ No duplicate entries found\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error checking for duplicates: {e}\")\n        return False\n\ndef main():\n    \"\"\"Main verification function.\"\"\"\n    test_dir = get_test_directory()\n    print(\"🔍 Verifying VoteNet Task: Create Requirements.txt File...\")\n    \n    # Define verification steps\n    verification_steps = [\n        (\"Requirements File Exists\", verify_requirements_file_exists),\n        (\"File is Readable\", verify_requirements_file_readable),\n        (\"Required Dependencies Present\", verify_required_dependencies_present),\n        (\"File Format\", verify_file_format),\n        (\"No Duplicate Entries\", verify_no_duplicate_entries),\n    ]\n    \n    # Run all verification steps\n    all_passed = True\n    for step_name, verify_func in verification_steps:\n        print(f\"\\n--- {step_name} ---\")\n        if not verify_func(test_dir):\n            all_passed = False\n    \n    # Final result\n    print(\"\\n\" + \"=\"*50)\n    if all_passed:\n        print(\"✅ Requirements.txt file successfully created with all required dependencies!\")\n        print(\"🎉 Task verification: PASS\")\n        sys.exit(0)\n    else:\n        print(\"❌ Task verification: FAIL\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()"
}