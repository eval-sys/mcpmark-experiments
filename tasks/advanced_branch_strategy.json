{
  "task_id": "advanced_branch_strategy",
  "task_name": "Advanced Branch Strategy",
  "category_id": "easyr1",
  "category_name": "EasyR1",
  "description": "Implement GitFlow branching strategy with develop, release, and feature branches to replace risky direct-to-main development.",
  "author": "Xiangyan Liu",
  "created_at": "2025-08-15",
  "difficulty": "L3",
  "tags": [
    "pr workflows",
    "release coordination"
  ],
  "mcp": [
    "github"
  ],
  "metadata": {},
  "instruction": "The EasyR1 repository has a critical production issue: all development happens directly on the `main` branch, which is extremely risky for a project with 25 active issues. A recent commit `098931530606d22f867fd121b1dcb3225a43661f` introduced protocol changes that need to be properly managed through a structured branching workflow. I need you to implement a complete GitFlow strategy by working through a realistic development scenario.\n\n**The Scenario:** You're preparing for the v1.0.0 release while simultaneously handling a critical protocol serialization bug that was introduced in the recent data proto changes.\n\n**Step 1: Initialize GitFlow Structure**\nCreate a `develop` branch from `main` as the new integration branch. Then create a `release/v1.0.0` branch from `develop` to prepare for the upcoming release.\n\n**Step 2: Address the Critical Bug**\nCreate a `feature/protocol-serialization-fix` branch from `develop`. In this branch, create a new file called `PROTOCOL_FIXES.md` with the exact content:\n```\n# Protocol Serialization Fixes\n\n## Critical Fix for Data Proto Issue\n- Enhanced serialization safety check implemented\n- Addresses issue from commit 098931530606d22f867fd121b1dcb3225a43661f\n- Status: Ready for integration testing\n```\n\n**Step 3: Integrate the Fix Through Proper Workflow**\nCreate a pull request from `feature/protocol-serialization-fix` to `develop` to integrate the fix documentation. This demonstrates the feature → develop integration pattern.\n\n**Step 4: Update Release Branch and CI/CD**\nMerge the develop branch changes into `release/v1.0.0` branch to include the critical fix in the release.\n\n**Step 5: Document the New Process**\nCreate an issue titled `Implement Advanced Branch Protection Strategy` with exactly these 3 checkboxes in the body:\n- [ ] All development flows through develop branch\n- [ ] Release preparation happens in release/v1.0.0 branch  \n- [ ] Feature integration uses PR workflow\n\nAdd the label `process-implementation` to this issue to track the process implementation.",
  "verify": "import sys\nimport os\nimport requests\nfrom typing import Dict, Optional, Tuple\nfrom dotenv import load_dotenv\n\nload_dotenv(\".mcp_env\")\n\n\ndef _get_github_api(\n    endpoint: str, headers: Dict[str, str]\n) -> Tuple[bool, Optional[Dict]]:\n    \"\"\"Make a GET request to GitHub API and return (success, response).\"\"\"\n    github_org = os.environ.get(\"GITHUB_EVAL_ORG\")\n    url = f\"https://api.github.com/repos/{github_org}/EasyR1/{endpoint}\"\n    try:\n        response = requests.get(url, headers=headers)\n        if response.status_code == 200:\n            return True, response.json()\n        elif response.status_code == 404:\n            return False, None\n        else:\n            print(f\"API error for {endpoint}: {response.status_code}\", file=sys.stderr)\n            return False, None\n    except Exception as e:\n        print(f\"Exception for {endpoint}: {e}\", file=sys.stderr)\n        return False, None\n\n\ndef _check_gitflow_branches(headers: Dict[str, str]) -> bool:\n    \"\"\"Check if GitFlow branches are properly created from correct base branches.\"\"\"\n    success, branches_data = _get_github_api(\"branches\", headers)\n    if not success or not branches_data:\n        print(\"Error: Could not fetch branches\", file=sys.stderr)\n        return False\n\n    existing_branches = [branch.get(\"name\", \"\") for branch in branches_data]\n    required_branches = [\n        \"develop\",\n        \"release/v1.0.0\",\n        \"feature/protocol-serialization-fix\",\n    ]\n\n    for branch in required_branches:\n        if branch not in existing_branches:\n            print(f\"Error: Required branch '{branch}' not found\", file=sys.stderr)\n            return False\n\n    return True\n\n\ndef _check_protocol_fixes_file(headers: Dict[str, str]) -> bool:\n    \"\"\"Check if PROTOCOL_FIXES.md file exists in feature branch with correct content.\"\"\"\n    success, file_data = _get_github_api(\n        \"contents/PROTOCOL_FIXES.md?ref=feature/protocol-serialization-fix\", headers\n    )\n    if not success or not file_data:\n        print(\"Error: PROTOCOL_FIXES.md not found in feature branch\", file=sys.stderr)\n        return False\n\n    # Decode base64 content\n    import base64\n\n    content = base64.b64decode(file_data.get(\"content\", \"\")).decode(\"utf-8\")\n\n    # Check for required content elements\n    required_elements = [\n        \"# Protocol Serialization Fixes\",\n        \"## Critical Fix for Data Proto Issue\",\n        \"Enhanced serialization safety check implemented\",\n        \"098931530606d22f867fd121b1dcb3225a43661f\",\n        \"Status: Ready for integration testing\",\n    ]\n\n    for element in required_elements:\n        if element not in content:\n            print(\n                f\"Error: PROTOCOL_FIXES.md missing required content: {element}\",\n                file=sys.stderr,\n            )\n            return False\n\n    return True\n\n\ndef _check_integration_workflow(headers: Dict[str, str]) -> Optional[Dict]:\n    \"\"\"Verify the feature → develop integration pull request exists.\"\"\"\n    # Check both open and closed PRs since the workflow may have completed\n    success, prs = _get_github_api(\"pulls?state=all\", headers)\n    if not success or not prs:\n        print(\"Error: Could not fetch pull requests\", file=sys.stderr)\n        return None\n\n    for pr in prs:\n        head_ref = pr.get(\"head\", {}).get(\"ref\", \"\")\n        base_ref = pr.get(\"base\", {}).get(\"ref\", \"\")\n\n        if head_ref == \"feature/protocol-serialization-fix\" and base_ref == \"develop\":\n            return pr\n\n    print(\n        \"Error: Integration PR from feature/protocol-serialization-fix to develop not found\",\n        file=sys.stderr,\n    )\n    return None\n\n\ndef _check_release_branch_updated(headers: Dict[str, str]) -> bool:\n    \"\"\"Check if release branch contains the develop branch changes.\"\"\"\n    # Check if PROTOCOL_FIXES.md exists in release branch\n    success, file_data = _get_github_api(\n        \"contents/PROTOCOL_FIXES.md?ref=release/v1.0.0\", headers\n    )\n    if not success or not file_data:\n        print(\n            \"Error: PROTOCOL_FIXES.md not found in release branch - develop changes not merged\",\n            file=sys.stderr,\n        )\n        return False\n\n    return True\n\n\ndef _check_process_documentation(headers: Dict[str, str]) -> Optional[Dict]:\n    \"\"\"Check if process is properly documented in an issue.\"\"\"\n    success, issues = _get_github_api(\"issues\", headers)\n    if not success or not issues:\n        print(\"Error: Could not fetch issues for documentation check\", file=sys.stderr)\n        return None\n\n    expected_title = \"Implement Advanced Branch Protection Strategy\"\n    expected_checkboxes = [\n        \"All development flows through develop branch\",\n        \"Release preparation happens in release/v1.0.0 branch\",\n        \"Feature integration uses PR workflow\",\n    ]\n\n    for issue in issues:\n        title = issue.get(\"title\", \"\")\n        if title == expected_title:\n            body = issue.get(\"body\", \"\")\n\n            # Check for exactly 3 checkboxes with specific content\n            checkbox_count = body.count(\"- [ ]\") + body.count(\"- [x]\")\n            if checkbox_count != 3:\n                print(\n                    f\"Error: Documentation issue should have 3 checkboxes, found {checkbox_count}\",\n                    file=sys.stderr,\n                )\n                return None\n\n            # Check for specific checkbox content\n            for expected_text in expected_checkboxes:\n                if expected_text not in body:\n                    print(\n                        f\"Error: Documentation issue missing required checkbox: {expected_text}\",\n                        file=sys.stderr,\n                    )\n                    return None\n\n            # Check label assignment\n            labels = issue.get(\"labels\", [])\n            label_names = [label.get(\"name\") for label in labels]\n            if \"process-implementation\" not in label_names:\n                print(\n                    \"Error: Documentation issue not labeled with 'process-implementation'\",\n                    file=sys.stderr,\n                )\n                return None\n\n            return issue\n\n    print(\"Error: Process documentation issue not found\", file=sys.stderr)\n    return None\n\n\ndef verify() -> bool:\n    \"\"\"\n    Verify the complete GitFlow implementation following the integrated workflow\n    described in description.md.\n    \"\"\"\n    # Get GitHub token\n    github_token = os.environ.get(\"MCP_GITHUB_TOKEN\")\n    if not github_token:\n        print(\"Error: MCP_GITHUB_TOKEN environment variable not set\", file=sys.stderr)\n        return False\n\n    headers = {\n        \"Authorization\": f\"token {github_token}\",\n        \"Accept\": \"application/vnd.github.v3+json\",\n    }\n\n    print(\"Verifying integrated GitFlow workflow implementation...\")\n\n    # 1. Verify GitFlow structure initialization\n    print(\"1. Checking GitFlow branch structure...\")\n    if not _check_gitflow_branches(headers):\n        return False\n\n    # 2. Verify critical bug fix implementation via new file\n    print(\"2. Checking protocol serialization fix documentation...\")\n    if not _check_protocol_fixes_file(headers):\n        return False\n\n    # 3. Verify integration workflow (feature → develop PR)\n    print(\"3. Checking feature integration workflow...\")\n    integration_pr = _check_integration_workflow(headers)\n    if not integration_pr:\n        return False\n\n    # 4. Verify release branch updated and CI configured\n    print(\"4. Checking release branch sync and CI configuration...\")\n    if not _check_release_branch_updated(headers):\n        return False\n\n    # 5. Verify process documentation\n    print(\"5. Checking process documentation...\")\n    doc_issue = _check_process_documentation(headers)\n    if not doc_issue:\n        return False\n\n    print(\"\\n✓ Integrated GitFlow workflow successfully implemented!\")\n    print(\"✓ GitFlow structure: main → develop → release/v1.0.0 branches created\")\n    print(\"✓ Critical fix: Protocol fix documented in PROTOCOL_FIXES.md file\")\n    print(\n        f\"✓ Integration: PR #{integration_pr.get('number')} demonstrates feature → develop workflow\"\n    )\n    print(\n        \"✓ Release prep: Release branch contains develop changes, CI configured for both branches\"\n    )\n    print(\n        f\"✓ Documentation: Process documented in issue #{doc_issue.get('number')} with proper checkboxes\"\n    )\n    print(\n        \"\\nThe repository now has a structured GitFlow workflow ready for implementation!\"\n    )\n    return True\n\n\nif __name__ == \"__main__\":\n    success = verify()\n    sys.exit(0 if success else 1)\n",
  "model_results": {
    "gemini-2-5-pro": 0,
    "gpt-4-1-mini": 0,
    "claude-4-sonnet": 1,
    "k2": 1,
    "gemini-2-5-flash": 0,
    "gpt-4-1": 0,
    "o3": 1
  }
}