{
  "task_id": "code_locating",
  "task_name": "Code Locating",
  "category_id": "threestudio",
  "category_name": "Threestudio",
  "description": "Navigate the ThreeStudio codebase to locate and identify the specific file that defines Zero123 guidance functionality implementation.",
  "author": "Lingjun Chen",
  "created_at": "2025-08-05",
  "difficulty": "L3",
  "tags": [
    "code exploration"
  ],
  "mcp": [
    "filesystem"
  ],
  "meta_data": {
    "stateType": "text",
    "stateContent": "threestudio/\n    ├── configs/\n    │       ├── debugging/\n    │       │       ├── controlnet-canny.yaml\n    │       │       ├── controlnet-normal.yaml\n    │       │       ├── instructpix2pix.yaml\n    │       │       └── stablediffusion.yaml\n    │       ├── experimental/\n    │       │       ├── unified-guidance/\n    │       │       │       ├── dreamfusion-sd.yaml\n    │       │       │       ├── hifa.yaml\n    │       │       │       ├── prolificdreamer-hifa.yaml\n    │       │       │       ├── prolificdreamer.yaml\n    │       │       │       └── zero123-simple.yaml\n    │       │       ├── co3d-imagecondition.yaml\n    │       │       ├── imagecondition.yaml\n    │       │       ├── imagecondition_zero123nerf.yaml\n    │       │       ├── imagecondition_zero123nerf_refine.yaml\n    │       │       ├── prolificdreamer-importance.yaml\n    │       │       ├── prolificdreamer-neus-importance.yaml\n    │       │       ├── prolificdreamer-propnet.yaml\n    │       │       └── textmesh-if-importance.yaml\n    │       ├── gradio/\n    │       │       ├── dreamfusion-if.yaml\n    │       │       ├── dreamfusion-sd.yaml\n    │       │       ├── fantasia3d.yaml\n    │       │       ├── latentnerf.yaml\n    │       │       ├── sjc.yaml\n    │       │       └── textmesh-if.yaml\n    │       ├── control4d-static.yaml\n    │       ├── dreamfusion-if.yaml\n    │       ├── dreamfusion-sd-eff.yaml\n    │       ├── dreamfusion-sd.yaml\n    │       ├── fantasia3d-texture.yaml\n    │       ├── fantasia3d.yaml\n    │       ├── hifa.yaml\n    │       ├── instructnerf2nerf.yaml\n    │       ├── latentnerf-refine.yaml\n    │       ├── latentnerf.yaml\n    │       ├── magic123-coarse-sd.yaml\n    │       ├── magic123-hifa-coarse-sd.yaml\n    │       ├── magic123-hifa-refine-sd.yaml\n    │       ├── magic123-refine-sd.yaml\n    │       ├── magic3d-coarse-if.yaml\n    │       ├── magic3d-coarse-sd.yaml\n    │       ├── magic3d-refine-sd.yaml\n    │       ├── prolificdreamer-geometry.yaml\n    │       ├── prolificdreamer-hifa.yaml\n    │       ├── prolificdreamer-patch.yaml\n    │       ├── prolificdreamer-scene-hifa.yaml\n    │       ├── prolificdreamer-scene.yaml\n    │       ├── prolificdreamer-texture.yaml\n    │       ├── prolificdreamer.yaml\n    │       ├── sdi.yaml\n    │       ├── sjc.yaml\n    │       ├── sketchshape-refine.yaml\n    │       ├── sketchshape.yaml\n    │       ├── stable-zero123.yaml\n    │       ├── textmesh-if.yaml\n    │       ├── zero123-geometry.yaml\n    │       └── zero123.yaml\n    ├── custom/\n    │       └── put_custom_extensions_here\n    ├── docker/\n    │       ├── compose.yaml\n    │       └── Dockerfile\n    ├── docs/\n    │       └── installation.md\n    ├── extern/\n    │       ├── ldm_zero123/\n    │       │       ├── models/\n    │       │       │       ├── diffusion/\n    │       │       │       │       ├── __init__.py\n    │       │       │       │       ├── classifier.py\n    │       │       │       │       ├── ddim.py\n    │       │       │       │       ├── ddpm.py\n    │       │       │       │       ├── plms.py\n    │       │       │       │       └── sampling_util.py\n    │       │       │       └── autoencoder.py\n    │       │       ├── modules/\n    │       │       │       ├── diffusionmodules/\n    │       │       │       │       ├── __init__.py\n    │       │       │       │       ├── model.py\n    │       │       │       │       ├── openaimodel.py\n    │       │       │       │       └── util.py\n    │       │       │       ├── distributions/\n    │       │       │       │       ├── __init__.py\n    │       │       │       │       └── distributions.py\n    │       │       │       ├── encoders/\n    │       │       │       │       ├── __init__.py\n    │       │       │       │       └── modules.py\n    │       │       │       ├── evaluate/\n    │       │       │       │       ├── adm_evaluator.py\n    │       │       │       │       ├── evaluate_perceptualsim.py\n    │       │       │       │       ├── frechet_video_distance.py\n    │       │       │       │       ├── ssim.py\n    │       │       │       │       └── torch_frechet_video_distance.py\n    │       │       │       ├── image_degradation/\n    │       │       │       │       ├── utils/\n    │       │       │       │       │       └── test.png\n    │       │       │       │       ├── __init__.py\n    │       │       │       │       ├── bsrgan.py\n    │       │       │       │       ├── bsrgan_light.py\n    │       │       │       │       └── utils_image.py\n    │       │       │       ├── losses/\n    │       │       │       │       ├── __init__.py\n    │       │       │       │       ├── contperceptual.py\n    │       │       │       │       └── vqperceptual.py\n    │       │       │       ├── attention.py\n    │       │       │       ├── ema.py\n    │       │       │       └── x_transformer.py\n    │       │       ├── thirdp/\n    │       │       │       └── psp/\n    │       │       │               ├── helpers.py\n    │       │       │               ├── id_loss.py\n    │       │       │               └── model_irse.py\n    │       │       ├── __init__.py\n    │       │       ├── extras.py\n    │       │       ├── guidance.py\n    │       │       ├── lr_scheduler.py\n    │       │       └── util.py\n    │       ├── __init__.py\n    │       └── zero123.py\n    ├── load/\n    │       ├── images/\n    │       │       ├── anya_front.png\n    │       │       ├── anya_front_depth.png\n    │       │       ├── anya_front_normal.png\n    │       │       ├── anya_front_rgba.png\n    │       │       ├── baby_phoenix_on_ice.png\n    │       │       ├── baby_phoenix_on_ice_depth.png\n    │       │       ├── baby_phoenix_on_ice_normal.png\n    │       │       ├── baby_phoenix_on_ice_rgba.png\n    │       │       ├── beach_house_1.png\n    │       │       ├── beach_house_1_depth.png\n    │       │       ├── beach_house_1_normal.png\n    │       │       ├── beach_house_1_rgba.png\n    │       │       ├── beach_house_2.png\n    │       │       ├── beach_house_2_depth.png\n    │       │       ├── beach_house_2_normal.png\n    │       │       ├── beach_house_2_rgba.png\n    │       │       ├── bollywood_actress.png\n    │       │       ├── bollywood_actress_depth.png\n    │       │       ├── bollywood_actress_normal.png\n    │       │       ├── bollywood_actress_rgba.png\n    │       │       ├── cactus.png\n    │       │       ├── cactus_depth.png\n    │       │       ├── cactus_normal.png\n    │       │       ├── cactus_rgba.png\n    │       │       ├── catstatue.png\n    │       │       ├── catstatue_depth.png\n    │       │       ├── catstatue_normal.png\n    │       │       ├── catstatue_rgba.png\n    │       │       ├── church_ruins.png\n    │       │       ├── church_ruins_depth.png\n    │       │       ├── church_ruins_normal.png\n    │       │       ├── church_ruins_rgba.png\n    │       │       ├── dog1_rgba.png\n    │       │       ├── dragon2_rgba.png\n    │       │       ├── firekeeper.jpg\n    │       │       ├── firekeeper_depth.png\n    │       │       ├── firekeeper_normal.png\n    │       │       ├── firekeeper_rgba.png\n    │       │       ├── futuristic_car.png\n    │       │       ├── futuristic_car_depth.png\n    │       │       ├── futuristic_car_normal.png\n    │       │       ├── futuristic_car_rgba.png\n    │       │       ├── grootplant_rgba.png\n    │       │       ├── hamburger.png\n    │       │       ├── hamburger_depth.png\n    │       │       ├── hamburger_rgba.png\n    │       │       ├── mona_lisa.png\n    │       │       ├── mona_lisa_depth.png\n    │       │       ├── mona_lisa_normal.png\n    │       │       ├── mona_lisa_rgba.png\n    │       │       ├── robot_rgba.png\n    │       │       ├── teddy.png\n    │       │       ├── teddy_depth.png\n    │       │       ├── teddy_normal.png\n    │       │       ├── teddy_rgba.png\n    │       │       └── thorhammer_rgba.png\n    │       ├── lights/\n    │       │       ├── bsdf_256_256.bin\n    │       │       ├── LICENSE.txt\n    │       │       └── mud_road_puresky_1k.hdr\n    │       ├── shapes/\n    │       │       ├── animal.obj\n    │       │       ├── blub.obj\n    │       │       ├── cabin.obj\n    │       │       ├── env_sphere.obj\n    │       │       ├── hand_prismatic.obj\n    │       │       ├── human.obj\n    │       │       ├── nascar.obj\n    │       │       ├── potion.obj\n    │       │       ├── README.md\n    │       │       └── teddy.obj\n    │       ├── tets/\n    │       │       ├── 128_tets.npz\n    │       │       ├── 32_tets.npz\n    │       │       ├── 64_tets.npz\n    │       │       └── generate_tets.py\n    │       ├── zero123/\n    │       │       ├── download.sh\n    │       │       └── sd-objaverse-finetune-c_concat-256.yaml\n    │       ├── make_prompt_library.py\n    │       └── prompt_library.json\n    ├── scripts/\n    │       └── convert_zero123_to_diffusers.py\n    ├── threestudio/\n    │       ├── data/\n    │       │       ├── __init__.py\n    │       │       ├── co3d.py\n    │       │       ├── image.py\n    │       │       ├── multiview.py\n    │       │       ├── uncond.py\n    │       │       └── uncond_eff.py\n    │       ├── models/\n    │       │       ├── background/\n    │       │       │       ├── __init__.py\n    │       │       │       ├── base.py\n    │       │       │       ├── neural_environment_map_background.py\n    │       │       │       ├── solid_color_background.py\n    │       │       │       └── textured_background.py\n    │       │       ├── exporters/\n    │       │       │       ├── __init__.py\n    │       │       │       ├── base.py\n    │       │       │       └── mesh_exporter.py\n    │       │       ├── geometry/\n    │       │       │       ├── __init__.py\n    │       │       │       ├── base.py\n    │       │       │       ├── custom_mesh.py\n    │       │       │       ├── implicit_sdf.py\n    │       │       │       ├── implicit_volume.py\n    │       │       │       ├── tetrahedra_sdf_grid.py\n    │       │       │       └── volume_grid.py\n    │       │       ├── guidance/\n    │       │       │       ├── __init__.py\n    │       │       │       ├── controlnet_guidance.py\n    │       │       │       ├── deep_floyd_guidance.py\n    │       │       │       ├── instructpix2pix_guidance.py\n    │       │       │       ├── stable_diffusion_guidance.py\n    │       │       │       ├── stable_diffusion_sdi_guidance.py\n    │       │       │       ├── stable_diffusion_unified_guidance.py\n    │       │       │       ├── stable_diffusion_vsd_guidance.py\n    │       │       │       ├── stable_zero123_guidance.py\n    │       │       │       ├── zero123_guidance.py\n    │       │       │       └── zero123_unified_guidance.py\n    │       │       ├── materials/\n    │       │       │       ├── __init__.py\n    │       │       │       ├── base.py\n    │       │       │       ├── diffuse_with_point_light_material.py\n    │       │       │       ├── hybrid_rgb_latent_material.py\n    │       │       │       ├── neural_radiance_material.py\n    │       │       │       ├── no_material.py\n    │       │       │       ├── pbr_material.py\n    │       │       │       └── sd_latent_adapter_material.py\n    │       │       ├── prompt_processors/\n    │       │       │       ├── __init__.py\n    │       │       │       ├── base.py\n    │       │       │       ├── deepfloyd_prompt_processor.py\n    │       │       │       ├── dummy_prompt_processor.py\n    │       │       │       └── stable_diffusion_prompt_processor.py\n    │       │       ├── renderers/\n    │       │       │       ├── __init__.py\n    │       │       │       ├── base.py\n    │       │       │       ├── deferred_volume_renderer.py\n    │       │       │       ├── gan_volume_renderer.py\n    │       │       │       ├── nerf_volume_renderer.py\n    │       │       │       ├── neus_volume_renderer.py\n    │       │       │       ├── nvdiff_rasterizer.py\n    │       │       │       └── patch_renderer.py\n    │       │       ├── __init__.py\n    │       │       ├── estimators.py\n    │       │       ├── isosurface.py\n    │       │       ├── mesh.py\n    │       │       └── networks.py\n    │       ├── scripts/\n    │       │       ├── make_training_vid.py\n    │       │       ├── run_zero123.sh\n    │       │       ├── run_zero123_comparison.sh\n    │       │       ├── run_zero123_phase.sh\n    │       │       ├── run_zero123_phase2.sh\n    │       │       ├── run_zero123_sbatch.py\n    │       │       ├── zero123_demo.py\n    │       │       └── zero123_sbatch.sh\n    │       ├── systems/\n    │       │       ├── __init__.py\n    │       │       ├── base.py\n    │       │       ├── control4d_multiview.py\n    │       │       ├── dreamfusion.py\n    │       │       ├── eff_dreamfusion.py\n    │       │       ├── fantasia3d.py\n    │       │       ├── imagedreamfusion.py\n    │       │       ├── instructnerf2nerf.py\n    │       │       ├── latentnerf.py\n    │       │       ├── magic123.py\n    │       │       ├── magic3d.py\n    │       │       ├── optimizers.py\n    │       │       ├── prolificdreamer.py\n    │       │       ├── sdi.py\n    │       │       ├── sjc.py\n    │       │       ├── textmesh.py\n    │       │       ├── utils.py\n    │       │       ├── zero123.py\n    │       │       └── zero123_simple.py\n    │       ├── utils/\n    │       │       ├── GAN/\n    │       │       │       ├── __init__.py\n    │       │       │       ├── attention.py\n    │       │       │       ├── discriminator.py\n    │       │       │       ├── distribution.py\n    │       │       │       ├── loss.py\n    │       │       │       ├── mobilenet.py\n    │       │       │       ├── network_util.py\n    │       │       │       ├── util.py\n    │       │       │       └── vae.py\n    │       │       ├── perceptual/\n    │       │       │       ├── __init__.py\n    │       │       │       ├── perceptual.py\n    │       │       │       └── utils.py\n    │       │       ├── __init__.py\n    │       │       ├── base.py\n    │       │       ├── callbacks.py\n    │       │       ├── config.py\n    │       │       ├── loss.py\n    │       │       ├── misc.py\n    │       │       ├── ops.py\n    │       │       ├── rasterize.py\n    │       │       ├── saving.py\n    │       │       └── typing.py\n    │       └── __init__.py\n    ├── .editorconfig\n    ├── .pre-commit-config.yaml\n    ├── .pylintrc\n    ├── 2dplayground.ipynb\n    ├── 2dplayground_SDI_version.ipynb\n    ├── CHANGELOG.md\n    ├── DOCUMENTATION.md\n    ├── gradio_app.py\n    ├── launch.py\n    ├── LICENSE\n    ├── README.md\n    ├── requirements-dev.txt\n    ├── requirements.txt\n    ├── setup.py\n    └── threestudio.ipynb",
    "stateUrl": "https://storage.mcpmark.ai/filesystem/threestudio.zip",
    "stateOriginalUrl": "https://github.com/threestudio-project/threestudio"
  },
  "instruction": "Please use FileSystem tools to finish the following task:\n\n### Task Description\n\nThreeStudio is a comprehensive codebase that implements various diffusion-based text-to-3D models, including NeRF-based rendering stage and diffusion guidance stage. Your task is to explore the codebase and identify the specific file that defines the guidance functionality for the Zero123 model.\n\n### Task Objectives\n\n1. **Explore the ThreeStudio codebase** using filesystem MCP tools\n2. **Search through the project structure** to understand the codebase organization\n3. **Identify the file** that contains the Zero123 guidance implementation\n4. **Create an answer file** with the correct file path\n\n### Expected Output\n\nCreate a file named `answer.txt` in the test directory root\n\n**Requirements:**\n- Only include the file path, no additional text or explanation\n- Use forward slashes (/) for path separators\n- Include the full relative path from the project root\n- Ensure the path points to the actual file that defines Zero123 guidance",
  "verify": "#!/usr/bin/env python3\n\"\"\"\nVerification script for ThreeStudio Task 1: Find Zero123 Guidance Implementation\n\"\"\"\n\nimport sys\nfrom pathlib import Path\nimport re\nimport os\n\ndef get_test_directory() -> Path:\n    \"\"\"Get the test directory from FILESYSTEM_TEST_DIR env var.\"\"\"\n    test_root = os.environ.get(\"FILESYSTEM_TEST_DIR\")\n    if not test_root:\n        raise ValueError(\"FILESYSTEM_TEST_DIR environment variable is required\")\n    return Path(test_root)\n\ndef verify_answer_file_exists(test_dir: Path) -> bool:\n    \"\"\"Verify that the answer.txt file exists.\"\"\"\n    answer_file = test_dir / \"answer.txt\"\n    \n    if not answer_file.exists():\n        print(\"❌ File 'answer.txt' not found\")\n        return False\n    \n    print(\"✅ Answer file found\")\n    return True\n\ndef verify_answer_format(test_dir: Path) -> bool:\n    \"\"\"Verify that the answer file has the correct format.\"\"\"\n    answer_file = test_dir / \"answer.txt\"\n    \n    try:\n        content = answer_file.read_text().strip()\n        \n        # Check if content is not empty\n        if not content:\n            print(\"❌ Answer file is empty\")\n            return False\n        \n        # Check if it contains only the file path (no additional text)\n        if len(content.split('\\n')) > 1:\n            print(\"❌ Answer file contains multiple lines or additional text\")\n            return False\n        \n        # Check if it uses forward slashes\n        if '\\\\' in content:\n            print(\"❌ Answer uses backslashes instead of forward slashes\")\n            return False\n        \n        # Check if it's a relative path\n        if content.startswith('/') or ':' in content:\n            print(\"❌ Answer appears to be an absolute path\")\n            return False\n        \n        print(\"✅ Answer format is correct\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error reading answer file: {e}\")\n        return False\n\ndef verify_file_path_structure(test_dir: Path) -> bool:\n    \"\"\"Verify that the file path has the expected structure.\"\"\"\n    answer_file = test_dir / \"answer.txt\"\n    \n    try:\n        content = answer_file.read_text().strip()\n        \n        # Expected path components for Zero123 guidance\n        # In backup directories, the path is threestudio/models/guidance/zero123_guidance.py\n        # In test_environments, the path is threestudio/threestudio/models/guidance/zero123_guidance.py\n        expected_components = [\"threestudio\", \"models\", \"guidance\", \"zero123_guidance.py\"]\n        \n        # Check if all expected components are in the path\n        for component in expected_components:\n            if component not in content:\n                print(f\"❌ Path missing expected component: {component}\")\n                return False\n        \n        print(\"✅ File path structure is correct\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error verifying file path structure: {e}\")\n        return False\n\ndef verify_file_exists(test_dir: Path) -> bool:\n    \"\"\"Verify that the identified file actually exists.\"\"\"\n    answer_file = test_dir / \"answer.txt\"\n    \n    try:\n        content = answer_file.read_text().strip()\n        \n        # Try the path as provided in the answer file\n        file_path = test_dir / content\n        \n        # If that doesn't exist, try with the correct path structure\n        # The answer file might have threestudio/models/guidance/zero123_guidance.py\n        # but the actual path is threestudio/threestudio/models/guidance/zero123_guidance.py\n        if not file_path.exists():\n            # Try to fix the path by adding the missing threestudio prefix\n            if content.startswith(\"threestudio/models/\"):\n                corrected_path = content.replace(\"threestudio/models/\", \"threestudio/threestudio/models/\")\n                file_path = test_dir / corrected_path\n                if file_path.exists():\n                    print(f\"✅ File exists with corrected path: {corrected_path}\")\n                    return True\n        \n        if not file_path.exists():\n            print(f\"❌ Identified file does not exist: {content}\")\n            return False\n        \n        print(\"✅ Identified file exists\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error verifying file existence: {e}\")\n        return False\n\ndef verify_zero123_guidance_content(test_dir: Path) -> bool:\n    \"\"\"Verify that the identified file actually contains Zero123 guidance implementation.\"\"\"\n    answer_file = test_dir / \"answer.txt\"\n    \n    try:\n        content = answer_file.read_text().strip()\n        \n        # Try the path as provided in the answer file\n        file_path = test_dir / content\n        \n        # If that doesn't exist, try with the correct path structure\n        if not file_path.exists():\n            # Try to fix the path by adding the missing threestudio prefix\n            if content.startswith(\"threestudio/models/\"):\n                corrected_path = content.replace(\"threestudio/models/\", \"threestudio/threestudio/models/\")\n                file_path = test_dir / corrected_path\n        \n        if not file_path.exists():\n            print(f\"❌ Cannot find file for content verification: {content}\")\n            return False\n        \n        file_content = file_path.read_text()\n        \n        # Check for the main Zero123 guidance implementation\n        # The main implementation should have the class name \"Zero123Guidance\" and register as \"zero123-guidance\"\n        main_zero123_indicators = [\n            r'class Zero123Guidance',  # Main class name\n            r'@threestudio\\.register\\(\"zero123-guidance\"\\)',  # Correct registration\n            r'BaseObject',  # Base class\n            r'zero123',  # General zero123 reference\n        ]\n        \n        found_indicators = []\n        for indicator in main_zero123_indicators:\n            if re.search(indicator, file_content, re.IGNORECASE):\n                found_indicators.append(indicator)\n        \n        # Check if this is the main Zero123 guidance implementation\n        is_main_implementation = (\n            'class Zero123Guidance' in file_content and \n            '@threestudio.register(\"zero123-guidance\")' in file_content\n        )\n        \n        if not is_main_implementation:\n            print(f\"❌ File is not the main Zero123 guidance implementation\")\n            print(f\"   Expected: class Zero123Guidance and @threestudio.register('zero123-guidance')\")\n            return False\n        \n        print(f\"✅ File contains main Zero123 guidance implementation indicators: {found_indicators}\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error verifying file content: {e}\")\n        return False\n\ndef main():\n    \"\"\"Main verification function.\"\"\"\n    test_dir = get_test_directory()\n    print(\"🔍 Verifying ThreeStudio Task 1: Find Zero123 Guidance Implementation...\")\n    \n    # Define verification steps\n    verification_steps = [\n        (\"Answer File Exists\", verify_answer_file_exists),\n        (\"Answer Format\", verify_answer_format),\n        (\"File Path Structure\", verify_file_path_structure),\n        (\"File Exists\", verify_file_exists),\n        (\"Zero123 Guidance Content\", verify_zero123_guidance_content),\n    ]\n    \n    # Run all verification steps\n    all_passed = True\n    for step_name, verify_func in verification_steps:\n        print(f\"\\n--- {step_name} ---\")\n        if not verify_func(test_dir):\n            all_passed = False\n    \n    # Final result\n    print(\"\\n\" + \"=\"*50)\n    if all_passed:\n        print(\"✅ Zero123 guidance file path identified correctly!\")\n        print(\"🎉 Task 1 verification: PASS\")\n        sys.exit(0)\n    else:\n        print(\"❌ Task 1 verification: FAIL\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()"
}