{
  "task_id": "code_locating",
  "task_name": "Code Locating",
  "category_id": "threestudio",
  "category_name": "Threestudio",
  "description": "Navigate the ThreeStudio codebase to locate and identify the specific file that defines Zero123 guidance functionality implementation.",
  "author": "Lingjun Chen",
  "created_at": "2025-08-05",
  "difficulty": "L3",
  "tags": [
    "code exploration"
  ],
  "mcp": [
    "filesystem"
  ],
  "metadata": {},
  "instruction": "# ThreeStudio Task 1: Find Zero123 Guidance Implementation\n\n## üìã Task Description\n\nThreeStudio is a comprehensive codebase that implements various diffusion-based text-to-3D models, including NeRF-based rendering stage and diffusion guidance stage. Your task is to explore the codebase and identify the specific file that defines the guidance functionality for the Zero123 model.\n\n## üéØ Task Objectives\n\n1. **Explore the ThreeStudio codebase** using filesystem MCP tools\n2. **Search through the project structure** to understand the codebase organization\n3. **Identify the file** that contains the Zero123 guidance implementation\n4. **Create an answer file** with the correct file path\n\n## üìù Expected Output\n\nCreate a file named `answer.txt` in the test directory root\n\n**Requirements:**\n- Only include the file path, no additional text or explanation\n- Use forward slashes (/) for path separators\n- Include the full relative path from the project root\n- Ensure the path points to the actual file that defines Zero123 guidance",
  "verify": "#!/usr/bin/env python3\n\"\"\"\nVerification script for ThreeStudio Task 1: Find Zero123 Guidance Implementation\n\"\"\"\n\nimport sys\nfrom pathlib import Path\nimport re\nimport os\n\ndef get_test_directory() -> Path:\n    \"\"\"Get the test directory from FILESYSTEM_TEST_DIR env var.\"\"\"\n    test_root = os.environ.get(\"FILESYSTEM_TEST_DIR\")\n    if not test_root:\n        raise ValueError(\"FILESYSTEM_TEST_DIR environment variable is required\")\n    return Path(test_root)\n\ndef verify_answer_file_exists(test_dir: Path) -> bool:\n    \"\"\"Verify that the answer.txt file exists.\"\"\"\n    answer_file = test_dir / \"answer.txt\"\n    \n    if not answer_file.exists():\n        print(\"‚ùå File 'answer.txt' not found\")\n        return False\n    \n    print(\"‚úÖ Answer file found\")\n    return True\n\ndef verify_answer_format(test_dir: Path) -> bool:\n    \"\"\"Verify that the answer file has the correct format.\"\"\"\n    answer_file = test_dir / \"answer.txt\"\n    \n    try:\n        content = answer_file.read_text().strip()\n        \n        # Check if content is not empty\n        if not content:\n            print(\"‚ùå Answer file is empty\")\n            return False\n        \n        # Check if it contains only the file path (no additional text)\n        if len(content.split('\\n')) > 1:\n            print(\"‚ùå Answer file contains multiple lines or additional text\")\n            return False\n        \n        # Check if it uses forward slashes\n        if '\\\\' in content:\n            print(\"‚ùå Answer uses backslashes instead of forward slashes\")\n            return False\n        \n        # Check if it's a relative path\n        if content.startswith('/') or ':' in content:\n            print(\"‚ùå Answer appears to be an absolute path\")\n            return False\n        \n        print(\"‚úÖ Answer format is correct\")\n        return True\n        \n    except Exception as e:\n        print(f\"‚ùå Error reading answer file: {e}\")\n        return False\n\ndef verify_file_path_structure(test_dir: Path) -> bool:\n    \"\"\"Verify that the file path has the expected structure.\"\"\"\n    answer_file = test_dir / \"answer.txt\"\n    \n    try:\n        content = answer_file.read_text().strip()\n        \n        # Expected path components for Zero123 guidance\n        # In backup directories, the path is threestudio/models/guidance/zero123_guidance.py\n        # In test_environments, the path is threestudio/threestudio/models/guidance/zero123_guidance.py\n        expected_components = [\"threestudio\", \"models\", \"guidance\", \"zero123_guidance.py\"]\n        \n        # Check if all expected components are in the path\n        for component in expected_components:\n            if component not in content:\n                print(f\"‚ùå Path missing expected component: {component}\")\n                return False\n        \n        print(\"‚úÖ File path structure is correct\")\n        return True\n        \n    except Exception as e:\n        print(f\"‚ùå Error verifying file path structure: {e}\")\n        return False\n\ndef verify_file_exists(test_dir: Path) -> bool:\n    \"\"\"Verify that the identified file actually exists.\"\"\"\n    answer_file = test_dir / \"answer.txt\"\n    \n    try:\n        content = answer_file.read_text().strip()\n        \n        # Try the path as provided in the answer file\n        file_path = test_dir / content\n        \n        # If that doesn't exist, try with the correct path structure\n        # The answer file might have threestudio/models/guidance/zero123_guidance.py\n        # but the actual path is threestudio/threestudio/models/guidance/zero123_guidance.py\n        if not file_path.exists():\n            # Try to fix the path by adding the missing threestudio prefix\n            if content.startswith(\"threestudio/models/\"):\n                corrected_path = content.replace(\"threestudio/models/\", \"threestudio/threestudio/models/\")\n                file_path = test_dir / corrected_path\n                if file_path.exists():\n                    print(f\"‚úÖ File exists with corrected path: {corrected_path}\")\n                    return True\n        \n        if not file_path.exists():\n            print(f\"‚ùå Identified file does not exist: {content}\")\n            return False\n        \n        print(\"‚úÖ Identified file exists\")\n        return True\n        \n    except Exception as e:\n        print(f\"‚ùå Error verifying file existence: {e}\")\n        return False\n\ndef verify_zero123_guidance_content(test_dir: Path) -> bool:\n    \"\"\"Verify that the identified file actually contains Zero123 guidance implementation.\"\"\"\n    answer_file = test_dir / \"answer.txt\"\n    \n    try:\n        content = answer_file.read_text().strip()\n        \n        # Try the path as provided in the answer file\n        file_path = test_dir / content\n        \n        # If that doesn't exist, try with the correct path structure\n        if not file_path.exists():\n            # Try to fix the path by adding the missing threestudio prefix\n            if content.startswith(\"threestudio/models/\"):\n                corrected_path = content.replace(\"threestudio/models/\", \"threestudio/threestudio/models/\")\n                file_path = test_dir / corrected_path\n        \n        if not file_path.exists():\n            print(f\"‚ùå Cannot find file for content verification: {content}\")\n            return False\n        \n        file_content = file_path.read_text()\n        \n        # Check for the main Zero123 guidance implementation\n        # The main implementation should have the class name \"Zero123Guidance\" and register as \"zero123-guidance\"\n        main_zero123_indicators = [\n            r'class Zero123Guidance',  # Main class name\n            r'@threestudio\\.register\\(\"zero123-guidance\"\\)',  # Correct registration\n            r'BaseObject',  # Base class\n            r'zero123',  # General zero123 reference\n        ]\n        \n        found_indicators = []\n        for indicator in main_zero123_indicators:\n            if re.search(indicator, file_content, re.IGNORECASE):\n                found_indicators.append(indicator)\n        \n        # Check if this is the main Zero123 guidance implementation\n        is_main_implementation = (\n            'class Zero123Guidance' in file_content and \n            '@threestudio.register(\"zero123-guidance\")' in file_content\n        )\n        \n        if not is_main_implementation:\n            print(f\"‚ùå File is not the main Zero123 guidance implementation\")\n            print(f\"   Expected: class Zero123Guidance and @threestudio.register('zero123-guidance')\")\n            return False\n        \n        print(f\"‚úÖ File contains main Zero123 guidance implementation indicators: {found_indicators}\")\n        return True\n        \n    except Exception as e:\n        print(f\"‚ùå Error verifying file content: {e}\")\n        return False\n\ndef main():\n    \"\"\"Main verification function.\"\"\"\n    test_dir = get_test_directory()\n    print(\"üîç Verifying ThreeStudio Task 1: Find Zero123 Guidance Implementation...\")\n    \n    # Define verification steps\n    verification_steps = [\n        (\"Answer File Exists\", verify_answer_file_exists),\n        (\"Answer Format\", verify_answer_format),\n        (\"File Path Structure\", verify_file_path_structure),\n        (\"File Exists\", verify_file_exists),\n        (\"Zero123 Guidance Content\", verify_zero123_guidance_content),\n    ]\n    \n    # Run all verification steps\n    all_passed = True\n    for step_name, verify_func in verification_steps:\n        print(f\"\\n--- {step_name} ---\")\n        if not verify_func(test_dir):\n            all_passed = False\n    \n    # Final result\n    print(\"\\n\" + \"=\"*50)\n    if all_passed:\n        print(\"‚úÖ Zero123 guidance file path identified correctly!\")\n        print(\"üéâ Task 1 verification: PASS\")\n        sys.exit(0)\n    else:\n        print(\"‚ùå Task 1 verification: FAIL\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()",
  "model_results": {
    "gemini-2-5-pro": 1,
    "deepseek-chat": 1,
    "qwen-3-coder": 1,
    "o3": 1,
    "gpt-5": 1,
    "k2": 1,
    "claude-4-sonnet": 1
  }
}