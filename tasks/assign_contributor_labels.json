{
  "task_id": "assign_contributor_labels",
  "task_name": "Assign Contributor Labels",
  "category_id": "missing-semester",
  "category_name": "Missing Semester",
  "description": "Assign labels to open issues and PRs based on contributors mentioned in comments or the most frequent contributor from past 100 commits, using assigned-username format.",
  "author": "Zijian Wu",
  "created_at": "2025-08-15",
  "difficulty": "L3",
  "tags": [
    "issue management",
    "label automation",
    "contributor analysis"
  ],
  "mcp": [
    "github"
  ],
  "meta_data": {
    "stateType": "url",
    "stateContent": null,
    "stateUrl": "https://github.com/mcpmark-source/missing-semester",
    "stateOriginalUrl": "https://github.com/missing-semester/missing-semester"
  },
  "instruction": "Assign assignees for each open issue and open PR by adding labels instead of using direct assignees. Only contributors who appeared in the past 100 commits are considered. First, collect all such contributors and identify the most frequent author among them. For each open issue or PR, assign using labels according to the following rules:\n\t•\tIf the comments mention an author with @username, add a label in the format assigned-username.\n\t•\tIf multiple authors are mentioned, add labels in the same format for all of them.\n\t•\tIf no authors are mentioned in the comments, add a label for the most frequent contributor from the past 100 commits, using the format assigned-username.",
  "verify": "import sys\nimport os\nimport requests\nfrom typing import Dict, Optional, Tuple, List\nfrom dotenv import load_dotenv\n\n\ndef _get_github_api(\n    endpoint: str, headers: Dict[str, str], org: str, repo: str = \"missing-semester\"\n) -> Tuple[bool, Optional[Dict]]:\n    \"\"\"Make a GET request to GitHub API and return (success, response).\"\"\"\n    url = f\"https://api.github.com/repos/{org}/{repo}/{endpoint}\"\n    \n    try:\n        response = requests.get(url, headers=headers)\n        if response.status_code == 200:\n            return True, response.json()\n        elif response.status_code == 404:\n            return False, None\n        else:\n            print(f\"API error for {endpoint}: {response.status_code}\", file=sys.stderr)\n            return False, None\n    except Exception as e:\n        print(f\"Exception for {endpoint}: {e}\", file=sys.stderr)\n        return False, None\n\n\ndef _get_issue_labels(\n    issue_number: int,\n    headers: Dict[str, str],\n    org: str,\n    repo: str = \"missing-semester\"\n) -> Optional[List[str]]:\n    \"\"\"Get labels for a specific issue/PR.\"\"\"\n    success, result = _get_github_api(f\"issues/{issue_number}\", headers, org, repo)\n    if not success or not result:\n        return None\n    \n    labels = result.get(\"labels\", [])\n    return [label[\"name\"] for label in labels]\n\n\ndef verify() -> bool:\n    \"\"\"\n    Programmatically verify that the labels were assigned correctly to issues and PRs.\n    \"\"\"\n    # Load environment variables from .mcp_env\n    load_dotenv(\".mcp_env\")\n\n    # Get GitHub token and org\n    github_token = os.environ.get(\"MCP_GITHUB_TOKEN\")\n    github_org = os.environ.get(\"GITHUB_EVAL_ORG\")\n\n    if not github_token:\n        print(\"Error: MCP_GITHUB_TOKEN environment variable not set\", file=sys.stderr)\n        return False\n\n    if not github_org:\n        print(\"Error: GITHUB_EVAL_ORG environment variable not set\", file=sys.stderr)\n        return False\n\n    headers = {\n        \"Authorization\": f\"Bearer {github_token}\",\n        \"Accept\": \"application/vnd.github.v3+json\",\n    }\n\n    print(\"Verifying contributor labels assignment task completion...\")\n\n    # Expected labels configuration\n    expected_labels = {\n        # Issues\n        9: [\"assigned-jonhoo\", \"assigned-anishathalye\"],  # Issue #9\n        14: [\"assigned-jonhoo\", \"assigned-anishathalye\"],  # Issue #14\n        15: [\"assigned-anishathalye\"],  # Issue #15\n        # PRs\n        21: [\"assigned-anishathalye\"],  # PR #21\n        22: [\"assigned-anishathalye\"],  # PR #22\n        23: [\"assigned-anishathalye\"],  # PR #23\n        24: [\"assigned-anishathalye\"],  # PR #24\n    }\n\n    all_passed = True\n\n    for item_number, expected in expected_labels.items():\n        item_type = \"Issue\" if item_number in [9, 14, 15] else \"PR\"\n        print(f\"\\nChecking {item_type} #{item_number}...\")\n        \n        labels = _get_issue_labels(item_number, headers, github_org, \"missing-semester\")\n        \n        if labels is None:\n            print(f\"  ❌ Failed to retrieve {item_type} #{item_number}\", file=sys.stderr)\n            all_passed = False\n            continue\n        \n        # Sort both lists for comparison\n        labels_sorted = sorted(labels)\n        expected_sorted = sorted(expected)\n        \n        if labels_sorted == expected_sorted:\n            print(f\"  ✅ {item_type} #{item_number} has correct labels: {labels_sorted}\")\n        else:\n            print(f\"  ❌ {item_type} #{item_number} has incorrect labels\", file=sys.stderr)\n            print(f\"     Expected: {expected_sorted}\", file=sys.stderr)\n            print(f\"     Found: {labels_sorted}\", file=sys.stderr)\n            all_passed = False\n\n    if all_passed:\n        print(\"\\n✅ All verification checks passed!\")\n        print(\"Contributor labels assignment task completed successfully:\")\n        print(\"  - Issues #9 and #14 have both 'assigned-jonhoo' and 'assigned-anishathalye' labels\")\n        print(\"  - Issue #15 and all 4 open PRs have 'assigned-anishathalye' label\")\n    else:\n        print(\"\\n❌ Some verification checks failed\", file=sys.stderr)\n\n    return all_passed\n\n\nif __name__ == \"__main__\":\n    success = verify()\n    sys.exit(0 if success else 1)"
}