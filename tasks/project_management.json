{
  "task_id": "project_management",
  "task_name": "Project Management",
  "category_id": "desktop",
  "category_name": "Desktop",
  "description": "Reorganize scattered desktop files into a structured project directory system based on content type, purpose, and file format analysis.",
  "author": "Lingjun Chen",
  "created_at": "2025-08-12",
  "difficulty": "L3",
  "tags": [
    "file organization"
  ],
  "mcp": [
    "filesystem"
  ],
  "metadata": {},
  "instruction": "# Desktop  Project Management Task: Reorganize Files into Structured Project Directory\n\n## 🎯 Task Objectives\n\n1. **Create the main directory structure** in `desktop_2`:\n\n   - Create a new directory in main directory called `organized_projects`\n   - Inside `organized_projects`, create 3 main subdirectories: `experiments`, `learning`, and `personal`\n   - Inside `experiments`, create 2 subdirectories: `ml_projects` and `data_analysis`\n   - Inside `learning`, create 2 subdirectories: `progress_tracking` and `resources`\n   - Inside `personal`, create 2 subdirectories: `entertainment` and `collections`\n2. **Move all the Python files** to `experiments/ml_projects/`:\n3. **Move all the CSV files** to `experiments/data_analysis/`:\n4. **Only Move learning-related markdown files** to `learning/resources/`:\n5. **Only Move entertainment planning-related markdown files** to `personal/entertainment/`:\n6. **Only Move music collection-related markdown files** to `personal/collections/`:\n7. **step 4.5.6 should move all the markdown files.**\n8. **Create a project structure documentation file**:\n\n   - Create `project_structure.md` in the `organized_projects` directory\n   - Document the new organization with exact file counts for each subdirectory\n   - Include a summary of what types of files are in each directory\n",
  "verify": "#!/usr/bin/env python3\n\"\"\"\nVerification script for Desktop 2 Project Management Task: File Reorganization\n\"\"\"\n\nimport sys\nfrom pathlib import Path\nimport os\n\ndef get_test_directory() -> Path:\n    \"\"\"Get the test directory from FILESYSTEM_TEST_DIR env var.\"\"\"\n    test_root = os.environ.get(\"FILESYSTEM_TEST_DIR\")\n    if not test_root:\n        raise ValueError(\"FILESYSTEM_TEST_DIR environment variable is required\")\n    return Path(test_root)\n\ndef verify_organized_projects_directory_exists(test_dir: Path) -> bool:\n    \"\"\"Verify that the organized_projects directory exists.\"\"\"\n    organized_dir = test_dir / \"organized_projects\"\n    \n    if not organized_dir.exists():\n        print(\"❌ 'organized_projects' directory not found\")\n        return False\n    \n    if not organized_dir.is_dir():\n        print(\"❌ 'organized_projects' exists but is not a directory\")\n        return False\n    \n    print(\"✅ 'organized_projects' directory exists\")\n    return True\n\ndef verify_directory_structure(test_dir: Path) -> bool:\n    \"\"\"Verify that all required subdirectories exist.\"\"\"\n    organized_dir = test_dir / \"organized_projects\"\n    \n    required_dirs = [\n        \"experiments\",\n        \"experiments/ml_projects\",\n        \"experiments/data_analysis\",\n        \"learning\",\n        \"learning/progress_tracking\",\n        \"learning/resources\",\n        \"personal\",\n        \"personal/entertainment\",\n        \"personal/collections\"\n    ]\n    \n    missing_dirs = []\n    for dir_path in required_dirs:\n        full_path = organized_dir / dir_path\n        if not full_path.exists():\n            missing_dirs.append(dir_path)\n        elif not full_path.is_dir():\n            missing_dirs.append(f\"{dir_path} (not a directory)\")\n    \n    if missing_dirs:\n        print(f\"❌ Missing or invalid directories: {missing_dirs}\")\n        return False\n    \n    print(\"✅ All required directory structure created correctly\")\n    return True\n\ndef verify_python_files_in_ml_projects(test_dir: Path) -> bool:\n    \"\"\"Verify that all Python files are moved to experiments/ml_projects.\"\"\"\n    organized_dir = test_dir / \"organized_projects\"\n    ml_projects_dir = organized_dir / \"experiments\" / \"ml_projects\"\n    \n    expected_python_files = [\n        \"study_notes.py\",\n        \"model.py\",\n        \"data_analysis.py\",\n        \"travel_calculator.py\",\n        \"inventory.py\",\n        \"playlist_manager.py\"\n    ]\n    \n    missing_files = []\n    for filename in expected_python_files:\n        file_path = ml_projects_dir / filename\n        if not file_path.exists():\n            missing_files.append(filename)\n    \n    if missing_files:\n        print(f\"❌ Missing Python files in ml_projects: {missing_files}\")\n        return False\n    \n    print(\"✅ All Python files moved to experiments/ml_projects\")\n    return True\n\ndef verify_csv_files_in_data_analysis(test_dir: Path) -> bool:\n    \"\"\"Verify that all CSV files are moved to experiments/data_analysis.\"\"\"\n    organized_dir = test_dir / \"organized_projects\"\n    data_analysis_dir = organized_dir / \"experiments\" / \"data_analysis\"\n    \n    expected_csv_files = [\n        \"learning_progress.csv\",\n        \"weekly_schedule.csv\",\n        \"results_record.csv\",\n        \"september_summary.csv\",\n        \"data.csv\",\n        \"favorite_songs.csv\",\n        \"travel_itinerary.csv\"\n    ]\n    \n    missing_files = []\n    for filename in expected_csv_files:\n        file_path = data_analysis_dir / filename\n        if not file_path.exists():\n            missing_files.append(filename)\n    \n    if missing_files:\n        print(f\"❌ Missing CSV files in data_analysis: {missing_files}\")\n        return False\n    \n    print(\"✅ All CSV files moved to experiments/data_analysis\")\n    return True\n\ndef verify_learning_md_files_in_resources(test_dir: Path) -> bool:\n    \"\"\"Verify that learning-related markdown files are moved to learning/resources.\"\"\"\n    organized_dir = test_dir / \"organized_projects\"\n    resources_dir = organized_dir / \"learning\" / \"resources\"\n    \n    expected_learning_files = [\n        \"learning_roadmap.md\",\n        \"research_topics.md\",\n        \"experiment_summary.md\",\n        \"exp_record.md\",\n        \"README.md\",\n        \"analysis_report.md\",\n        \"learning_goals.md\"\n    ]\n    \n    missing_files = []\n    for filename in expected_learning_files:\n        file_path = resources_dir / filename\n        if not file_path.exists():\n            missing_files.append(filename)\n    \n    if missing_files:\n        print(f\"❌ Missing learning markdown files in resources: {missing_files}\")\n        return False\n    \n    print(\"✅ All learning markdown files moved to learning/resources\")\n    return True\n\ndef verify_entertainment_md_files_in_entertainment(test_dir: Path) -> bool:\n    \"\"\"Verify that entertainment planning markdown files are moved to personal/entertainment.\"\"\"\n    organized_dir = test_dir / \"organized_projects\"\n    entertainment_dir = organized_dir / \"personal\" / \"entertainment\"\n    \n    expected_entertainment_files = [\n        \"gaming_schedule.md\",\n        \"entertainment_planner.md\",\n        \"travel_bucket_list.md\"\n    ]\n    \n    missing_files = []\n    for filename in expected_entertainment_files:\n        file_path = entertainment_dir / filename\n        if not file_path.exists():\n            missing_files.append(filename)\n    \n    if missing_files:\n        print(f\"❌ Missing entertainment markdown files in entertainment: {missing_files}\")\n        return False\n    \n    print(\"✅ All entertainment markdown files moved to personal/entertainment\")\n    return True\n\ndef verify_music_md_files_in_collections(test_dir: Path) -> bool:\n    \"\"\"Verify that music collection markdown files are moved to personal/collections.\"\"\"\n    organized_dir = test_dir / \"organized_projects\"\n    collections_dir = organized_dir / \"personal\" / \"collections\"\n    \n    expected_music_files = [\n        \"music_collection.md\"\n    ]\n    \n    missing_files = []\n    for filename in expected_music_files:\n        file_path = collections_dir / filename\n        if not file_path.exists():\n            missing_files.append(filename)\n    \n    if missing_files:\n        print(f\"❌ Missing music collection markdown files in collections: {filename}\")\n        return False\n    \n    print(\"✅ All music collection markdown files moved to personal/collections\")\n    return True\n\ndef verify_progress_tracking_empty(test_dir: Path) -> bool:\n    \"\"\"Verify that progress_tracking directory is empty.\"\"\"\n    organized_dir = test_dir / \"organized_projects\"\n    progress_dir = organized_dir / \"learning\" / \"progress_tracking\"\n    \n    files_in_progress = list(progress_dir.iterdir())\n    if files_in_progress:\n        print(f\"❌ progress_tracking directory should be empty, but contains: {[f.name for f in files_in_progress]}\")\n        return False\n    \n    print(\"✅ progress_tracking directory is correctly empty\")\n    return True\n\ndef verify_project_structure_file_exists(test_dir: Path) -> bool:\n    \"\"\"Verify that project_structure.md file exists.\"\"\"\n    organized_dir = test_dir / \"organized_projects\"\n    structure_file = organized_dir / \"project_structure.md\"\n    \n    if not structure_file.exists():\n        print(\"❌ 'project_structure.md' file not found\")\n        return False\n    \n    if not structure_file.is_file():\n        print(\"❌ 'project_structure.md' exists but is not a file\")\n        return False\n    \n    print(\"✅ 'project_structure.md' file exists\")\n    return True\n\ndef verify_file_counts(test_dir: Path) -> bool:\n    \"\"\"Verify that each directory has the correct number of files.\"\"\"\n    organized_dir = test_dir / \"organized_projects\"\n    \n    expected_counts = {\n        \"experiments/ml_projects\": 6,      # 6 Python files\n        \"experiments/data_analysis\": 7,    # 7 CSV files\n        \"learning/resources\": 7,           # 7 learning markdown files\n        \"learning/progress_tracking\": 0,   # 0 files (empty)\n        \"personal/entertainment\": 3,       # 3 entertainment markdown files\n        \"personal/collections\": 1          # 1 music collection markdown file\n    }\n    \n    incorrect_counts = []\n    for dir_path, expected_count in expected_counts.items():\n        full_path = organized_dir / dir_path\n        actual_count = len([f for f in full_path.iterdir() if f.is_file()])\n        \n        if actual_count != expected_count:\n            incorrect_counts.append(f\"{dir_path}: expected {expected_count}, got {actual_count}\")\n    \n    if incorrect_counts:\n        print(f\"❌ Incorrect file counts: {incorrect_counts}\")\n        return False\n    \n    print(\"✅ All directories have correct file counts\")\n    return True\n\ndef main():\n    \"\"\"Main verification function.\"\"\"\n    test_dir = get_test_directory()\n    print(\"🔍 Verifying Desktop 2 Project Management Task: File Reorganization...\")\n    \n    # Define verification steps\n    verification_steps = [\n        (\"Organized Projects Directory Exists\", verify_organized_projects_directory_exists),\n        (\"Directory Structure\", verify_directory_structure),\n        (\"Python Files in ML Projects\", verify_python_files_in_ml_projects),\n        (\"CSV Files in Data Analysis\", verify_csv_files_in_data_analysis),\n        (\"Learning Markdown Files in Resources\", verify_learning_md_files_in_resources),\n        (\"Entertainment Markdown Files in Entertainment\", verify_entertainment_md_files_in_entertainment),\n        (\"Music Collection Files in Collections\", verify_music_md_files_in_collections),\n        (\"Progress Tracking Empty\", verify_progress_tracking_empty),\n        (\"Project Structure File Exists\", verify_project_structure_file_exists),\n        (\"File Counts\", verify_file_counts),\n    ]\n    \n    # Run all verification steps\n    all_passed = True\n    for step_name, verify_func in verification_steps:\n        print(f\"\\n--- {step_name} ---\")\n        if not verify_func(test_dir):\n            all_passed = False\n    \n    # Final result\n    print(\"\\n\" + \"=\"*50)\n    if all_passed:\n        print(\"✅ Desktop 2 project reorganization completed correctly!\")\n        print(\"🎉 Task verification: PASS\")\n        sys.exit(0)\n    else:\n        print(\"❌ Task verification: FAIL\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()",
  "model_results": {
    "gemini-2-5-pro": 0,
    "deepseek-chat": 0,
    "qwen-3-coder": 0,
    "o3": 0,
    "gpt-5": 1,
    "k2": 1,
    "claude-4-sonnet": 1
  }
}