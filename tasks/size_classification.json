{
  "task_id": "size_classification",
  "task_name": "Size Classification",
  "category_id": "file_property",
  "category_name": "File Property",
  "description": "Classify all files in the folder by size into distinct categories (small/medium/large) and generate a comprehensive summary report with statistics.",
  "author": "Lingjun Chen",
  "created_at": "2025-08-07",
  "difficulty": "L3",
  "tags": [
    "file organization",
    "pattern analysis"
  ],
  "mcp": [
    "filesystem"
  ],
  "meta_data": {
    "stateType": "text",
    "stateContent": "file_property/\n    ‚îú‚îÄ‚îÄ bear.jpg\n    ‚îú‚îÄ‚îÄ bridge.jpg\n    ‚îú‚îÄ‚îÄ bus.MOV\n    ‚îú‚îÄ‚îÄ random_file_1.txt\n    ‚îú‚îÄ‚îÄ random_file_2.txt\n    ‚îú‚îÄ‚îÄ random_file_3.txt\n    ‚îú‚îÄ‚îÄ road.MOV\n    ‚îî‚îÄ‚îÄ sg.jpg",
    "stateUrl": "https://storage.mcpmark.ai/filesystem/file_property.zip",
    "stateOriginalUrl": null
  },
  "instruction": "Please use FileSystem tools to finish the following task:\n\n### Task Description\n\nClassify all files in the test directory into three categories based on their file size. Create three subdirectories and move files accordingly.\n\n### Task Objectives\n\n1. **Create three directories** in the test directory:\n\n   - `small_files/` - for files smaller than 300 bytes\n   - `medium_files/` - for files between 300-700 bytes (inclusive)\n   - `large_files/` - for files larger than 700 bytes\n2. **Move all files** from the test directory into the appropriate subdirectory based on their size\n3. **Handle all file types** - classify all files regardless of their extension (.txt, .jpg, .MOV, etc.)\n",
  "verify": "#!/usr/bin/env python3\n\"\"\"\nVerification script for File Classification Task\n\"\"\"\n\nimport sys\nfrom pathlib import Path\nimport os\n\ndef get_test_directory() -> Path:\n    \"\"\"Get the test directory from FILESYSTEM_TEST_DIR env var.\"\"\"\n    test_root = os.environ.get(\"FILESYSTEM_TEST_DIR\")\n    if not test_root:\n        raise ValueError(\"FILESYSTEM_TEST_DIR environment variable is required\")\n    return Path(test_root)\n\ndef get_expected_classification():\n    \"\"\"Return the expected file classification based on answer.md.\"\"\"\n    return {\n        \"small_files\": [\"random_file_1.txt\", \"random_file_3.txt\"],\n        \"medium_files\": [\"random_file_2.txt\"],\n        \"large_files\": [\"bear.jpg\", \"sg.jpg\", \"road.MOV\", \"bus.MOV\", \"bridge.jpg\"]\n    }\n\ndef verify_directories_exist(test_dir: Path) -> bool:\n    \"\"\"Verify that all three required directories exist.\"\"\"\n    required_dirs = [\"small_files\", \"medium_files\", \"large_files\"]\n    \n    for dir_name in required_dirs:\n        dir_path = test_dir / dir_name\n        if not dir_path.exists():\n            print(f\"‚ùå Directory '{dir_name}' not found\")\n            return False\n        if not dir_path.is_dir():\n            print(f\"‚ùå '{dir_name}' exists but is not a directory\")\n            return False\n    \n    print(\"‚úÖ All required directories exist\")\n    return True\n\ndef verify_file_classification(test_dir: Path) -> bool:\n    \"\"\"Verify that files are correctly classified into the right directories.\"\"\"\n    expected_classification = get_expected_classification()\n    \n    for dir_name, expected_files in expected_classification.items():\n        dir_path = test_dir / dir_name\n        \n        # Check that all expected files are in the directory\n        missing_files = []\n        for filename in expected_files:\n            file_path = dir_path / filename\n            if not file_path.exists():\n                missing_files.append(filename)\n        \n        if missing_files:\n            print(f\"‚ùå Missing files in '{dir_name}': {missing_files}\")\n            return False\n        \n        # Check that no unexpected files are in the directory (ignore .DS_Store and similar system files)\n        actual_files = [f.name for f in dir_path.iterdir() if f.is_file()]\n        # Filter out system files that are commonly present\n        system_files = ['.DS_Store', 'Thumbs.db', '.DS_Store?', '._.DS_Store']\n        unexpected_files = [f for f in actual_files if f not in expected_files and f not in system_files]\n        \n        if unexpected_files:\n            print(f\"‚ùå Unexpected files in '{dir_name}': {unexpected_files}\")\n            return False\n    \n    print(\"‚úÖ All files are correctly classified\")\n    return True\n\ndef verify_no_files_in_root(test_dir: Path) -> bool:\n    \"\"\"Verify that no files remain in the root test directory.\"\"\"\n    root_files = [f for f in test_dir.iterdir() if f.is_file()]\n    \n    # Filter out system files that are commonly present\n    system_files = ['.DS_Store', 'Thumbs.db', '.DS_Store?', '._.DS_Store']\n    non_system_files = [f for f in root_files if f.name not in system_files]\n    \n    if non_system_files:\n        print(f\"‚ùå Files still present in root directory: {[f.name for f in non_system_files]}\")\n        return False\n    \n    print(\"‚úÖ No files remain in root directory\")\n    return True\n\ndef verify_file_sizes(test_dir: Path) -> bool:\n    \"\"\"Verify that files are actually in the correct size categories.\"\"\"\n    size_ranges = {\n        \"small_files\": (0, 299),  # < 300 bytes\n        \"medium_files\": (300, 700),  # 300-700 bytes (inclusive)\n        \"large_files\": (701, float('inf'))  # > 700 bytes\n    }\n    \n    for dir_name, (min_size, max_size) in size_ranges.items():\n        dir_path = test_dir / dir_name\n        \n        for file_path in dir_path.iterdir():\n            if file_path.is_file():\n                file_size = file_path.stat().st_size\n                \n                if dir_name == \"small_files\" and file_size >= 300:\n                    print(f\"‚ùå File {file_path.name} in small_files but size is {file_size} bytes\")\n                    return False\n                elif dir_name == \"medium_files\" and (file_size < 300 or file_size > 700):\n                    print(f\"‚ùå File {file_path.name} in medium_files but size is {file_size} bytes\")\n                    return False\n                elif dir_name == \"large_files\" and file_size <= 700:\n                    print(f\"‚ùå File {file_path.name} in large_files but size is {file_size} bytes\")\n                    return False\n    \n    print(\"‚úÖ All files are in correct size categories\")\n    return True\n\ndef verify_total_file_count(test_dir: Path) -> bool:\n    \"\"\"Verify that all original files are accounted for.\"\"\"\n    expected_classification = get_expected_classification()\n    total_expected = sum(len(files) for files in expected_classification.values())\n    \n    total_actual = 0\n    for dir_name in [\"small_files\", \"medium_files\", \"large_files\"]:\n        dir_path = test_dir / dir_name\n        if dir_path.exists():\n            # Count only non-system files\n            system_files = ['.DS_Store', 'Thumbs.db', '.DS_Store?', '._.DS_Store']\n            files_in_dir = [f for f in dir_path.iterdir() if f.is_file() and f.name not in system_files]\n            total_actual += len(files_in_dir)\n    \n    if total_actual != total_expected:\n        print(f\"‚ùå Expected {total_expected} files total, found {total_actual}\")\n        return False\n    \n    print(f\"‚úÖ Total file count is correct: {total_actual}\")\n    return True\n\ndef main():\n    \"\"\"Main verification function.\"\"\"\n    try:\n        test_dir = get_test_directory()\n        print(f\"üîç Verifying file classification in: {test_dir}\")\n        \n        # Run all verification checks\n        checks = [\n            (\"Directory existence\", verify_directories_exist),\n            (\"File classification\", verify_file_classification),\n            (\"No files in root\", verify_no_files_in_root),\n            (\"File size validation\", verify_file_sizes),\n            (\"Total file count\", verify_total_file_count)\n        ]\n        \n        all_passed = True\n        for check_name, check_func in checks:\n            print(f\"\\nüìã Checking: {check_name}\")\n            if not check_func(test_dir):\n                all_passed = False\n        \n        if all_passed:\n            print(\"\\nüéâ All verification checks passed!\")\n            sys.exit(0)\n        else:\n            print(\"\\n‚ùå Some verification checks failed!\")\n            sys.exit(1)\n            \n    except Exception as e:\n        print(f\"‚ùå Verification failed with error: {e}\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()"
}