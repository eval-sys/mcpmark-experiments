{
  "task_id": "projects_section_update",
  "task_name": "Projects Section Update",
  "category_id": "online_resume",
  "category_name": "Online Resume",
  "description": "Reorganize the projects section by removing outdated projects and adding new relevant work with proper formatting.",
  "author": "Xiangyan Liu",
  "created_at": "2025-07-27",
  "difficulty": "L3",
  "tags": [
    "database manipulation",
    "template population",
    "data aggregation",
    "visual formatting",
    "cross-reference linking"
  ],
  "mcp": [
    "notion"
  ],
  "meta_data": {
    "stateType": "url",
    "stateContent": null,
    "stateUrl": "https://painted-tennis-ebc.notion.site/Online-Resume-23181626b6d781159faaeb5eadaf612e",
    "stateOriginalUrl": "https://www.notion.so/marketplace/templates/online-resume"
  },
  "instruction": "Find the page named \"Online Resume\" and reorganize the projects section to showcase only the most recent and relevant work.\n\n**Task Requirements:**\n1. Delete the project named \"Knitties eComm Website\" from the Projects database since it's from 2022 and no longer relevant\n\n2. Create a new project entry called \"Zapier Dashboard Redesign\" with:\n   - Description: \"Led the complete redesign of Zapier's main dashboard, focusing on improved usability and modern design patterns. Implemented new navigation system and responsive layouts.\"\n   - Date: Start \"2024-01-01\", End \"2024-06-30\"\n   - Tags: Add the existing \"UI Design\" tag, and create a new tag \"Enterprise\" with purple color, then add both tags to this project\n   - Phone: Same as the phone number under the Contact section\n   - Url: Same as the personal website under the Contact section\n\n3. After the Projects database block, add the following blocks in sequence:\n   - A divider block\n   - A heading_2 block with text \"Current Focus\"\n   - A paragraph block with content that dynamically references:\n     - The highest skill level from your Skills database (find the skill with the highest Skill Level percentage)\n     - Incorporate this into the text: \"The Zapier Dashboard Redesign represents my most impactful recent work, leveraging my expertise in [highest skill name] ([skill level]%) to deliver enterprise-grade solutions that prioritize both aesthetics and functionality.\"",
  "verify": "import sys\nfrom notion_client import Client\nfrom tasks.utils import notion_utils\n\n\ndef verify(notion: Client, main_id: str = None) -> bool:\n    \"\"\"\n    Verifies that the projects section has been reorganized correctly with cross-section references.\n    \"\"\"\n    page_id = None\n    if main_id:\n        found_id, object_type = notion_utils.find_page_or_database_by_id(\n            notion, main_id\n        )\n        if found_id and object_type == \"page\":\n            page_id = found_id\n\n    if not page_id:\n        page_id = notion_utils.find_page(notion, \"Online Resume\")\n    if not page_id:\n        print(\"Error: Page 'Online Resume' not found.\", file=sys.stderr)\n        return False\n\n    # Find the Projects database\n    projects_db_id = notion_utils.find_database_in_block(notion, page_id, \"Projects\")\n    if not projects_db_id:\n        print(\"Error: Database 'Projects' not found.\", file=sys.stderr)\n        return False\n\n    # Find the Skills database to get the highest skill level\n    skills_db_id = notion_utils.find_database_in_block(notion, page_id, \"Skills\")\n    if not skills_db_id:\n        print(\"Error: Database 'Skills' not found.\", file=sys.stderr)\n        return False\n\n    # Query Skills database to find the highest skill level\n    skills_results = notion.databases.query(database_id=skills_db_id).get(\"results\", [])\n    highest_skill_name = \"\"\n    highest_skill_level = 0\n\n    for skill_page in skills_results:\n        properties = skill_page.get(\"properties\", {})\n        skill_name_prop = properties.get(\"Skill\", {}).get(\"title\", [])\n        skill_level_prop = properties.get(\"Skill Level\", {}).get(\"number\")\n\n        if skill_name_prop and skill_level_prop is not None:\n            skill_name = skill_name_prop[0].get(\"text\", {}).get(\"content\", \"\")\n            if skill_level_prop > highest_skill_level:\n                highest_skill_level = skill_level_prop\n                highest_skill_name = skill_name\n\n    if not highest_skill_name:\n        print(\"Error: Could not find any skills with skill levels.\", file=sys.stderr)\n        return False\n\n    # Query Projects database\n    projects_results = notion.databases.query(database_id=projects_db_id).get(\n        \"results\", []\n    )\n\n    # Check that \"Knitties eComm Website\" is deleted\n    for page in projects_results:\n        properties = page.get(\"properties\", {})\n        name_prop = properties.get(\"Name\", {}).get(\"title\", [])\n        if (\n            name_prop\n            and name_prop[0].get(\"text\", {}).get(\"content\") == \"Knitties eComm Website\"\n        ):\n            print(\n                \"Failure: 'Knitties eComm Website' project was not deleted.\",\n                file=sys.stderr,\n            )\n            return False\n\n    # Check that \"Zapier Dashboard Redesign\" exists with correct properties\n    zapier_project_found = False\n    for page in projects_results:\n        properties = page.get(\"properties\", {})\n        name_prop = properties.get(\"Name\", {}).get(\"title\", [])\n        if (\n            name_prop\n            and name_prop[0].get(\"text\", {}).get(\"content\")\n            == \"Zapier Dashboard Redesign\"\n        ):\n            zapier_project_found = True\n\n            # Check description contains reference to UI Design Internship\n            desc_prop = properties.get(\"Description\", {}).get(\"rich_text\", [])\n            if not desc_prop:\n                print(\"Failure: Zapier project has no description.\", file=sys.stderr)\n                return False\n\n            description_text = desc_prop[0].get(\"text\", {}).get(\"content\", \"\")\n            base_desc = \"Led the complete redesign of Zapier's main dashboard, focusing on improved usability and modern design patterns. Implemented new navigation system and responsive layouts.\"\n            if base_desc not in description_text:\n                print(\n                    \"Failure: Zapier project description is missing base content.\",\n                    file=sys.stderr,\n                )\n                return False\n\n            # Check date\n            date_prop = properties.get(\"Date\", {}).get(\"date\", {})\n            if (\n                not date_prop\n                or date_prop.get(\"start\") != \"2024-01-01\"\n                or date_prop.get(\"end\") != \"2024-06-30\"\n            ):\n                print(\n                    \"Failure: Zapier project date range is incorrect.\", file=sys.stderr\n                )\n                return False\n\n            # Check tags\n            tags_prop = properties.get(\"Tags\", {}).get(\"multi_select\", [])\n            tag_names = {tag.get(\"name\") for tag in tags_prop}\n            if \"UI Design\" not in tag_names or \"Enterprise\" not in tag_names:\n                print(\n                    \"Failure: Zapier project is missing required tags.\", file=sys.stderr\n                )\n                return False\n\n            # Check phone\n            phone_prop = properties.get(\"Phone\", {}).get(\"phone_number\", [])\n            if not phone_prop or phone_prop != \"+44 7871263013\":\n                print(\n                    \"Failure: Zapier project phone number is incorrect.\",\n                    file=sys.stderr,\n                )\n                return\n\n            # Check url\n            url_prop = properties.get(\"Url\", {}).get(\"url\", [])\n            if not url_prop or url_prop != \"www.zinenwine.com\":\n                print(\"Failure: Zapier project url is incorrect.\", file=sys.stderr)\n                return\n\n            # Check Enterprise tag color\n            enterprise_tag_purple = False\n            for tag in tags_prop:\n                if tag.get(\"name\") == \"Enterprise\" and tag.get(\"color\") == \"purple\":\n                    enterprise_tag_purple = True\n                    break\n            if not enterprise_tag_purple:\n                print(\n                    \"Failure: Enterprise tag does not have purple color.\",\n                    file=sys.stderr,\n                )\n                return False\n\n            break\n\n    if not zapier_project_found:\n        print(\n            \"Failure: 'Zapier Dashboard Redesign' project not found.\", file=sys.stderr\n        )\n        return False\n\n    # Find the Projects database block and verify blocks after it\n    all_blocks = notion_utils.get_all_blocks_recursively(notion, page_id)\n\n    # Find the Projects database block\n    projects_db_index = -1\n    for i, block in enumerate(all_blocks):\n        if (\n            block.get(\"type\") == \"child_database\"\n            and block.get(\"child_database\", {}).get(\"title\") == \"Projects\"\n        ):\n            projects_db_index = i\n            break\n\n    if projects_db_index == -1:\n        print(\"Error: Could not find Projects database block.\", file=sys.stderr)\n        return False\n\n    # Check blocks after Projects database\n    if projects_db_index + 3 > len(all_blocks):\n        print(\"Failure: Not enough blocks after Projects database.\", file=sys.stderr)\n        return False\n\n    # Check divider block\n    divider_block = all_blocks[projects_db_index + 1]\n    if divider_block.get(\"type\") != \"divider\":\n        print(\n            \"Failure: Expected divider block after Projects database.\", file=sys.stderr\n        )\n        return False\n\n    # Check heading block\n    heading_block = all_blocks[projects_db_index + 2]\n    if heading_block.get(\"type\") != \"heading_2\":\n        print(\"Failure: Expected heading_2 block after divider.\", file=sys.stderr)\n        return False\n\n    heading_text = heading_block.get(\"heading_2\", {}).get(\"rich_text\", [])\n    if (\n        not heading_text\n        or heading_text[0].get(\"text\", {}).get(\"content\") != \"Current Focus\"\n    ):\n        print(\"Failure: Heading text is incorrect.\", file=sys.stderr)\n        return False\n\n    # Check paragraph block with dynamic skill reference\n    paragraph_block = all_blocks[projects_db_index + 3]\n    if paragraph_block.get(\"type\") != \"paragraph\":\n        print(\"Failure: Expected paragraph block after heading.\", file=sys.stderr)\n        return False\n\n    paragraph_text = paragraph_block.get(\"paragraph\", {}).get(\"rich_text\", [])\n    if not paragraph_text:\n        print(\"Failure: Paragraph block is empty.\", file=sys.stderr)\n        return False\n\n    paragraph_content = paragraph_text[0].get(\"text\", {}).get(\"content\", \"\")\n\n    # Check that paragraph contains the base text\n    base_text = \"The Zapier Dashboard Redesign represents my most impactful recent work, leveraging my expertise in\"\n    if base_text not in paragraph_content:\n        print(\"Failure: Paragraph does not contain base text.\", file=sys.stderr)\n        return False\n\n    # Check that paragraph references the highest skill\n    skill_level_percent = int(highest_skill_level * 100)\n    expected_skill_ref = f\"{highest_skill_name} ({skill_level_percent}%)\"\n    if expected_skill_ref not in paragraph_content:\n        print(\n            f\"Failure: Paragraph does not reference highest skill '{expected_skill_ref}'.\",\n            file=sys.stderr,\n        )\n        return False\n\n    # Check that paragraph contains the ending text\n    ending_text = (\n        \"enterprise-grade solutions that prioritize both aesthetics and functionality\"\n    )\n    if ending_text not in paragraph_content:\n        print(\n            \"Failure: Paragraph does not contain proper ending text.\", file=sys.stderr\n        )\n        return False\n\n    print(\n        f\"Success: Projects section has been reorganized correctly with cross-section references (highest skill: {highest_skill_name} at {skill_level_percent}%).\"\n    )\n    return True\n\n\ndef main():\n    \"\"\"\n    Executes the verification process and exits with a status code.\n    \"\"\"\n    notion = notion_utils.get_notion_client()\n    main_id = sys.argv[1] if len(sys.argv) > 1 else None\n    if verify(notion, main_id):\n        sys.exit(0)\n    else:\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()\n"
}