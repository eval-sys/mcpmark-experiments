{
  "task_id": "nba_statistics_analysis",
  "task_name": "NBA Statistics Analysis",
  "category_id": "reddit",
  "category_name": "Reddit",
  "description": "Create sports analytics account, collect NBA player statistics from forum discussions, analyze basketball performance metrics, and compile comprehensive statistical report with community insights.",
  "author": "Fanqing Meng",
  "created_at": "2025-08-12",
  "difficulty": "L3",
  "tags": [
    "user interaction",
    "data extraction",
    "comparative analysis",
    "content submission"
  ],
  "mcp": [
    "playwright"
  ],
  "meta_data": {
    "stateType": "video",
    "stateContent": null,
    "stateUrl": "",
    "stateOriginalUrl": "https://github.com/web-arena-x/webarena/tree/main/environment_docker"
  },
  "instruction": "I'm conducting research on NBA player discussions in online sports communities. Please help me create a comprehensive analysis.\n\n**Task Requirements:**\n\n1. Register a new account with username 'NBA_DataAnalyst_2024' and password 'Research#2024!'\n\n2. Navigate to the sports forum and search for posts containing 'NBA' in their titles:\n   - Collect data from the 5 NBA-related posts with the most comments\n   - For each post, record: the exact post title, vote count, comment count, and the username of the person who submitted it\n\n3. Visit the user profile of 'BCLetsRide69':\n   - Count his total submissions\n\n4. Create a new submission in the sports forum with:\n   - Title: \"Statistical Analysis: NBA Content Engagement on This Forum\"\n   - Body text must be EXACTLY these lines without anything (keep the keys as-is, only replace the values after the colon, follow the markdown format):\n\n```\n- Total_NBA_Posts|FILL_VALUE\n- Top1_Title|FILL_VALUE\n- Top1_Votes|FILL_VALUE\n- Top1_Comments|FILL_VALUE\n- Top1_Author|FILL_VALUE\n- Top2_Title|FILL_VALUE\n- Top2_Votes|FILL_VALUE\n- Top2_Comments|FILL_VALUE\n- Top2_Author|FILL_VALUE\n- Top3_Title|FILL_VALUE\n- Top3_Votes|FILL_VALUE\n- Top3_Comments|FILL_VALUE\n- Top3_Author|FILL_VALUE\n- Top4_Title|FILL_VALUE\n- Top4_Votes|FILL_VALUE\n- Top4_Comments|FILL_VALUE\n- Top4_Author|FILL_VALUE\n- Top5_Title|FILL_VALUE\n- Top5_Votes|FILL_VALUE\n- Top5_Comments|FILL_VALUE\n- Top5_Author|FILL_VALUE\n- BCLetsRide69_Total_Posts|FILL_VALUE\n```\n",
  "verify": "import asyncio\nimport sys\nimport re\nimport os\nfrom pathlib import Path\nfrom playwright.async_api import (\n    async_playwright,\n    TimeoutError as PlaywrightTimeoutError,\n)\n\n# 从环境变量读取 base_url，默认回退到本地\nBASE_URL = os.getenv(\"WEBARENA_BASE_URL\", \"http://localhost:9999\").rstrip(\"/\")\n\n\ndef parse_key_value_format(text):\n    \"\"\"\n    Parse the Key|Value format from the submission body.\n    This handles both the expected format from label.txt and the submission format.\n    \"\"\"\n    data = {}\n    \n    # Split by lines and parse each line\n    lines = text.strip().split('\\n')\n    for line in lines:\n        line = line.strip()\n        if not line or line.startswith('#'):\n            continue\n            \n        # Remove bullet point if present\n        if line.startswith('- '):\n            line = line[2:]\n        elif line.startswith('• '):\n            line = line[2:]\n            \n        # Parse pipe-separated format\n        if '|' in line:\n            parts = line.split('|', 1)\n            if len(parts) == 2:\n                key = parts[0].strip()\n                value = parts[1].strip()\n                if value and value != 'FILL_VALUE':\n                    data[key] = value\n    \n    return data\n\n\ndef normalize_text(text):\n    \"\"\"\n    Normalize text for comparison by handling different quote styles and whitespace.\n    \"\"\"\n    if not isinstance(text, str):\n        return str(text)\n\n    # Replace various quote styles with standard quotes\n    text = text.replace(\"\"\", \"'\").replace(\"\"\", \"'\")\n    text = text.replace('\"', '\"').replace('\"', '\"')\n    # Also normalize apostrophes - use unicode escapes to be safe\n    text = text.replace(\"\\u2019\", \"'\")  # RIGHT SINGLE QUOTATION MARK (')\n    text = text.replace(\"\\u2018\", \"'\")  # LEFT SINGLE QUOTATION MARK (')\n\n    # Normalize whitespace\n    text = \" \".join(text.split())\n\n    return text.strip()\n\n\nasync def verify() -> bool:\n    \"\"\"\n    Verifies that the NBA analysis task has been completed correctly.\n    \"\"\"\n    async with async_playwright() as p:\n        browser = await p.chromium.launch(headless=True)\n        context = await browser.new_context()\n        page = await context.new_page()\n\n        try:\n            # Navigate to the main page\n            print(\"Navigating to forum...\", file=sys.stderr)\n            await page.goto(f\"{BASE_URL}/\", wait_until=\"networkidle\")\n\n            # Check if logged in as NBA_DataAnalyst_2024\n            user_button = page.locator('button:has-text(\"NBA_DataAnalyst_2024\")')\n            if not await user_button.count():\n                # Try to login\n                print(\"Not logged in, attempting to login...\", file=sys.stderr)\n\n                await page.click('a:has-text(\"Log in\")')\n                await page.wait_for_load_state(\"networkidle\")\n\n                await page.fill('input[name=\"_username\"]', \"NBA_DataAnalyst_2024\")\n                await page.fill('input[name=\"_password\"]', \"Research#2024!\")\n\n                await page.click('button:has-text(\"Log in\")')\n                await page.wait_for_load_state(\"networkidle\")\n\n                user_button = page.locator('button:has-text(\"NBA_DataAnalyst_2024\")')\n                if not await user_button.count():\n                    print(\n                        \"Error: Login failed for NBA_DataAnalyst_2024\", file=sys.stderr\n                    )\n                    return False\n\n                print(\"Successfully logged in as NBA_DataAnalyst_2024\", file=sys.stderr)\n            else:\n                print(\"Already logged in as NBA_DataAnalyst_2024\", file=sys.stderr)\n\n            # Navigate to sports forum to check submission\n            print(\"Navigating to sports forum to check submission...\", file=sys.stderr)\n            await page.goto(\n                f\"{BASE_URL}/f/sports\", wait_until=\"networkidle\"\n            )\n\n            # Look for the submission with our specific title\n            print(\n                \"Looking for submission 'Statistical Analysis: NBA Content Engagement on This Forum'...\",\n                file=sys.stderr,\n            )\n            post_link = page.locator(\n                'a:has-text(\"Statistical Analysis: NBA Content Engagement on This Forum\")'\n            )\n\n            if not await post_link.count():\n                print(\n                    \"Error: Could not find submission with required title\",\n                    file=sys.stderr,\n                )\n                return False\n\n            # Click on the submission to view its content\n            await post_link.first.click()\n            await page.wait_for_load_state(\"networkidle\")\n\n            # Extract the submission body content\n            # Try multiple possible selectors for the post body\n            post_content = None\n            selectors = [\n                \".submission__body\",\n                \".post-body\",\n                \".RichText\",\n                '[class*=\"RichText\"]',\n                'div:has(> p:has-text(\"Total_NBA_Posts\"))',\n                'div:has-text(\"Total_NBA_Posts\"):has-text(\"Most_Popular_NBA_Author\")',\n            ]\n\n            for selector in selectors:\n                content_element = page.locator(selector)\n                if await content_element.count():\n                    post_content = await content_element.first.inner_text()\n                    if \"Total_NBA_Posts\" in post_content:\n                        print(\n                            f\"Found submission content using selector: {selector}\",\n                            file=sys.stderr,\n                        )\n                        break\n\n            if not post_content or \"Total_NBA_Posts\" not in post_content:\n                print(\n                    \"Error: Could not find submission body with required format\",\n                    file=sys.stderr,\n                )\n                return False\n\n            print(\"Submission content found, parsing data...\", file=sys.stderr)\n            print(f\"Raw content: {post_content[:200]}...\", file=sys.stderr)\n\n            # Parse the Key: Value format\n            extracted_data = parse_key_value_format(post_content)\n            print(f\"Extracted data: {extracted_data}\", file=sys.stderr)\n\n            # Load expected values from label.txt\n            label_path = Path(__file__).parent / \"label.txt\"\n            if label_path.exists():\n                with open(label_path, \"r\") as f:\n                    expected_text = f.read().strip()\n                expected_data = parse_key_value_format(expected_text)\n                print(\"Loaded expected values from label.txt\", file=sys.stderr)\n\n            # Verify all required keys are present\n            required_keys = [\n                \"Total_NBA_Posts\",\n                \"Top1_Title\",\n                \"Top1_Votes\",\n                \"Top1_Comments\",\n                \"Top1_Author\",\n                \"Top2_Title\",\n                \"Top2_Votes\",\n                \"Top2_Comments\",\n                \"Top2_Author\",\n                \"Top3_Title\",\n                \"Top3_Votes\",\n                \"Top3_Comments\",\n                \"Top3_Author\",\n                \"Top4_Title\",\n                \"Top4_Votes\",\n                \"Top4_Comments\",\n                \"Top4_Author\",\n                \"Top5_Title\",\n                \"Top5_Votes\",\n                \"Top5_Comments\",\n                \"Top5_Author\",\n                \"BCLetsRide69_Total_Posts\",\n            ]\n\n            missing_keys = []\n            for key in required_keys:\n                if key not in extracted_data:\n                    missing_keys.append(key)\n\n            if missing_keys:\n                print(\n                    f\"Error: Missing required keys: {', '.join(missing_keys)}\",\n                    file=sys.stderr,\n                )\n                return False\n\n            # Validate data format and content\n            errors = []\n\n            # Check Total_NBA_Posts is a number and matches expected\n            try:\n                total_posts = int(extracted_data[\"Total_NBA_Posts\"])\n                if \"expected_data\" in locals() and \"Total_NBA_Posts\" in expected_data:\n                    expected_total = int(expected_data[\"Total_NBA_Posts\"])\n                    if total_posts != expected_total:\n                        errors.append(\n                            f\"Total_NBA_Posts mismatch: got {total_posts}, expected {expected_total}\"\n                        )\n                elif (\n                    total_posts < 5\n                ):  # Should be at least 5 since we're collecting top 5\n                    errors.append(f\"Total_NBA_Posts seems too low: {total_posts}\")\n            except ValueError:\n                errors.append(\n                    f\"Total_NBA_Posts must be a number, got: {extracted_data['Total_NBA_Posts']}\"\n                )\n\n            # If we have expected data, compare against it\n            if \"expected_data\" in locals():\n                # Compare each field\n                for key in required_keys:\n                    if key in expected_data and key in extracted_data:\n                        expected_val = normalize_text(expected_data[key])\n                        actual_val = normalize_text(extracted_data[key])\n\n                        # For numeric fields, compare as integers\n                        if (\n                            \"Votes\" in key\n                            or \"Comments\" in key\n                            or key == \"Total_NBA_Posts\"\n                            or key == \"BCLetsRide69_Total_Posts\"\n                        ):\n                            try:\n                                expected_int = int(expected_val)\n                                actual_int = int(actual_val)\n                                if expected_int != actual_int:\n                                    errors.append(\n                                        f\"{key} mismatch: got {actual_int}, expected {expected_int}\"\n                                    )\n                            except ValueError:\n                                errors.append(\n                                    f\"{key} should be numeric: got '{actual_val}'\"\n                                )\n                        else:\n                            # For text fields, compare normalized text\n                            if expected_val != actual_val:\n                                errors.append(\n                                    f\"{key} mismatch: got '{actual_val}', expected '{expected_val}'\"\n                                )\n\n            else:\n                # If no expected data, just do basic validation\n                for key in required_keys:\n                    if key not in extracted_data:\n                        errors.append(f\"Missing required key: {key}\")\n                    elif (\n                        not extracted_data[key] or extracted_data[key] == \"[FILL_VALUE]\"\n                    ):\n                        errors.append(f\"{key} was not filled in\")\n\n            if errors:\n                print(\n                    \"Error: Validation failed with the following issues:\",\n                    file=sys.stderr,\n                )\n                for error in errors:\n                    print(f\"  - {error}\", file=sys.stderr)\n                return False\n\n            # All checks passed\n            print(\"Success: NBA analysis task completed successfully.\")\n            print(\"- Account NBA_DataAnalyst_2024 verified\")\n            print(\n                \"- Submission 'Statistical Analysis: NBA Content Engagement on This Forum' found\"\n            )\n            print(\n                f\"- Total NBA-related posts analyzed: {extracted_data['Total_NBA_Posts']}\"\n            )\n            print(\"- Top 5 posts identified and documented\")\n            print(\n                f\"- BCLetsRide69's total posts: {extracted_data['BCLetsRide69_Total_Posts']}\"\n            )\n            print(\"- All data in correct Key|Value format\")\n            return True\n\n        except PlaywrightTimeoutError as e:\n            print(f\"Error: Timeout occurred - {str(e)}\", file=sys.stderr)\n            return False\n        except Exception as e:\n            print(f\"Error: Unexpected error - {str(e)}\", file=sys.stderr)\n            return False\n        finally:\n            await browser.close()\n\n\ndef main():\n    \"\"\"\n    Executes the verification process and exits with a status code.\n    \"\"\"\n    result = asyncio.run(verify())\n    sys.exit(0 if result else 1)\n\n\nif __name__ == \"__main__\":\n    main()\n"
}