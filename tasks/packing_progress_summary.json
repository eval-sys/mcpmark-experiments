{
  "task_id": "packing_progress_summary",
  "task_name": "Packing Progress Summary",
  "category_id": "japan_travel_planner",
  "category_name": "Japan Travel Planner",
  "description": "Update packing list items and create a progress summary section showing statistics for each category.",
  "author": "Xiangyan Liu",
  "created_at": "2025-07-27",
  "difficulty": "L3",
  "tags": [
    "database manipulation",
    "data aggregation",
    "report generation",
    "status tracking"
  ],
  "mcp": [
    "notion"
  ],
  "meta_data": {
    "stateType": "url",
    "stateContent": null,
    "stateUrl": "https://painted-tennis-ebc.notion.site/Japan-Travel-Planner-23181626b6d781c4b6bedb12786b5abe",
    "stateOriginalUrl": "https://www.notion.so/marketplace/templates/japantravelplanner101"
  },
  "instruction": "I'm preparing for my Japan trip and need to organize my packing list. Please help me:\n\n**Step 1: Update Items in the Packing List Database**\nIn the Clothes category, all items have already been packed except for the hat After this, check the `SIM Card` entry and the `Wallet` entry.\n\n**Step 2: Create Packing Progress Summary**\nAfter adding the items, create a new section in the main Japan Travel Planner page immediately after the \"Packing List ğŸ’¼\" heading. This section should contain:\n\n1. A paragraph block with the bold text \"**Packing Progress Summary**\"\n2. Followed by bullet list items showing statistics for each category in the format:\n   - \"Category: X/Y packed\" (where X is packed items, Y is total items), for example: \"Shoes: 2/10 packed\"\n   - ...",
  "verify": "import sys\nfrom notion_client import Client\nfrom tasks.utils import notion_utils\n\n\ndef verify(notion: Client, main_id: str = None) -> bool:\n    \"\"\"\n    Verifies that:\n    1. All Clothes items except hat are marked as packed\n    2. SIM Card and Wallet entries are checked\n    3. Packing Progress Summary section is created with statistics\n    \"\"\"\n    # Find the main Japan Travel Planner page\n    page_id = None\n    if main_id:\n        found_id, object_type = notion_utils.find_page_or_database_by_id(\n            notion, main_id\n        )\n        if found_id and object_type == \"page\":\n            page_id = found_id\n\n    if not page_id:\n        page_id = notion_utils.find_page(notion, \"Japan Travel Planner\")\n    if not page_id:\n        print(\"Error: Page 'Japan Travel Planner' not found.\", file=sys.stderr)\n        return False\n\n    # Find the Packing List database\n    all_blocks = notion_utils.get_all_blocks_recursively(notion, page_id)\n    packing_list_db_id = None\n    packing_list_heading_id = None\n\n    for i, block in enumerate(all_blocks):\n        # Find the Packing List heading\n        if block.get(\"type\") == \"heading_2\":\n            heading_text = notion_utils.get_block_plain_text(block)\n            if \"Packing List\" in heading_text and \"ğŸ’¼\" in heading_text:\n                packing_list_heading_id = block[\"id\"]\n                # Look for the database after this heading\n                for j in range(i + 1, len(all_blocks)):\n                    if all_blocks[j].get(\"type\") == \"child_database\":\n                        packing_list_db_id = all_blocks[j][\"id\"]\n                        break\n                break\n\n    if not packing_list_db_id:\n        print(\"Error: Packing List database not found.\", file=sys.stderr)\n        return False\n\n    # Query the database for all items\n    try:\n        db_items = notion.databases.query(database_id=packing_list_db_id)\n\n        # Track items for verification\n        clothes_items = []\n        sim_card_found = False\n        sim_card_packed = False\n        wallet_found = False\n        wallet_packed = False\n\n        # Process all items\n        for page in db_items.get(\"results\", []):\n            props = page.get(\"properties\", {})\n\n            # Get item name\n            name_prop = props.get(\"Name\", {})\n            if name_prop.get(\"type\") == \"title\":\n                name = \"\".join(\n                    [t.get(\"plain_text\", \"\") for t in name_prop.get(\"title\", [])]\n                )\n            else:\n                continue\n\n            # Get type (multi_select)\n            type_prop = props.get(\"Type\", {})\n            types = []\n            if type_prop.get(\"type\") == \"multi_select\":\n                types = [\n                    opt.get(\"name\", \"\") for opt in type_prop.get(\"multi_select\", [])\n                ]\n\n            # Get packed status\n            packed_prop = props.get(\"Packed\", {})\n            packed = False\n            if packed_prop.get(\"type\") == \"checkbox\":\n                packed = packed_prop.get(\"checkbox\", False)\n\n            # Check specific items\n            if name == \"SIM Card\":\n                sim_card_found = True\n                sim_card_packed = packed\n            elif name == \"Wallet\":\n                wallet_found = True\n                wallet_packed = packed\n\n            # Track Clothes items\n            if \"Clothes\" in types:\n                clothes_items.append(\n                    {\"name\": name, \"packed\": packed, \"is_hat\": \"hat\" in name.lower()}\n                )\n\n        # Verify Clothes items (all packed except hat)\n        for item in clothes_items:\n            if item[\"is_hat\"]:\n                if item[\"packed\"]:\n                    print(\n                        \"Error: Hat should not be packed but is marked as packed.\",\n                        file=sys.stderr,\n                    )\n                    return False\n            else:\n                if not item[\"packed\"]:\n                    print(\n                        f\"Error: Clothes item '{item['name']}' should be packed but is not.\",\n                        file=sys.stderr,\n                    )\n                    return False\n\n        print(\"Success: All Clothes items are correctly marked (packed except hat).\")\n\n        # Verify SIM Card and Wallet\n        if not sim_card_found:\n            print(\"Error: SIM Card entry not found.\", file=sys.stderr)\n            return False\n        if not sim_card_packed:\n            print(\"Error: SIM Card entry is not checked (packed).\", file=sys.stderr)\n            return False\n\n        if not wallet_found:\n            print(\"Error: Wallet entry not found.\", file=sys.stderr)\n            return False\n        if not wallet_packed:\n            print(\"Error: Wallet entry is not checked (packed).\", file=sys.stderr)\n            return False\n\n        print(\"Success: SIM Card and Wallet entries are checked.\")\n\n    except Exception as e:\n        print(f\"Error querying Packing List database: {e}\", file=sys.stderr)\n        return False\n\n    # Expected ground truth statistics\n    expected_stats = {\n        \"Clothes\": {\"packed\": 12, \"total\": 13},\n        \"Electronics\": {\"packed\": 1, \"total\": 10},\n        \"Essentials\": {\"packed\": 1, \"total\": 12},\n        \"Miscellaneous\": {\"packed\": 0, \"total\": 10},\n        \"Shoes\": {\"packed\": 0, \"total\": 2},\n        \"Toiletries\": {\"packed\": 0, \"total\": 19},\n    }\n\n    # Verify Packing Progress Summary section\n    # Re-fetch blocks to get updated content\n    all_blocks = notion_utils.get_all_blocks_recursively(notion, page_id)\n\n    # Find the Packing List heading again and check blocks after it\n    packing_heading_index = None\n    for i, block in enumerate(all_blocks):\n        if block.get(\"id\") == packing_list_heading_id:\n            packing_heading_index = i\n            break\n\n    summary_found = False\n    statistics_verified = True\n    found_statistics = {}\n\n    if packing_heading_index is not None:\n        # Look for summary in the next few blocks\n        for i in range(\n            packing_heading_index + 1, min(packing_heading_index + 15, len(all_blocks))\n        ):\n            block = all_blocks[i]\n            block_text = notion_utils.get_block_plain_text(block)\n\n            # Check for \"Packing Progress Summary\" paragraph\n            if \"Packing Progress Summary\" in block_text:\n                summary_found = True\n                # Check if it's bold\n                if block.get(\"type\") == \"paragraph\":\n                    rich_text_list = block.get(\"paragraph\", {}).get(\"rich_text\", [])\n                    for text_obj in rich_text_list:\n                        if \"Packing Progress Summary\" in text_obj.get(\"text\", {}).get(\n                            \"content\", \"\"\n                        ):\n                            if not text_obj.get(\"annotations\", {}).get(\"bold\", False):\n                                print(\n                                    \"Error: 'Packing Progress Summary' text is not bold.\",\n                                    file=sys.stderr,\n                                )\n                                return False\n\n            # Check for statistics bullet points in format \"Category: X/Y packed\"\n            if (\n                block.get(\"type\") == \"bulleted_list_item\"\n                and \":\" in block_text\n                and \"/\" in block_text\n                and \"packed\" in block_text\n            ):\n                # Parse the statistic line\n                # Expected format: \"Category: X/Y packed\"\n                try:\n                    parts = block_text.split(\":\")\n                    if len(parts) >= 2:\n                        category = parts[0].strip()\n                        stats_part = parts[1].strip()\n\n                        # Extract X/Y from \"X/Y packed\"\n                        if \"/\" in stats_part and \"packed\" in stats_part:\n                            nums = stats_part.split(\"packed\")[0].strip()\n                            if \"/\" in nums:\n                                x_str, y_str = nums.split(\"/\")\n                                x = int(x_str.strip())\n                                y = int(y_str.strip())\n                                found_statistics[category] = {\"packed\": x, \"total\": y}\n                except:\n                    pass  # Continue if parsing fails\n\n    if not summary_found:\n        print(\n            \"Error: 'Packing Progress Summary' section not found after Packing List heading.\",\n            file=sys.stderr,\n        )\n        return False\n\n    if not found_statistics:\n        print(\n            \"Error: No valid packing statistics bullet points found in format 'Category: X/Y packed'.\",\n            file=sys.stderr,\n        )\n        return False\n\n    # Verify the statistics match the expected values\n    for category, stats in expected_stats.items():\n        if category not in found_statistics:\n            print(\n                f\"Error: Category '{category}' missing from Packing Progress Summary.\",\n                file=sys.stderr,\n            )\n            statistics_verified = False\n        else:\n            found = found_statistics[category]\n            if found[\"packed\"] != stats[\"packed\"] or found[\"total\"] != stats[\"total\"]:\n                print(\n                    f\"Error: Statistics mismatch for '{category}': expected {stats['packed']}/{stats['total']} packed, found {found['packed']}/{found['total']} packed.\",\n                    file=sys.stderr,\n                )\n                statistics_verified = False\n\n    # Check for extra categories in summary that don't exist in expected\n    for category in found_statistics:\n        if category not in expected_stats:\n            print(\n                f\"Error: Unexpected category '{category}' in summary.\", file=sys.stderr\n            )\n            statistics_verified = False\n\n    if not statistics_verified:\n        return False\n\n    print(\"Success: Packing Progress Summary section created with correct statistics.\")\n    # print(f\"Verified statistics: {', '.join(f'{k}: {v['packed']}/{v['total']} packed' for k, v in expected_stats.items())}\")\n\n    return True\n\n\ndef main():\n    \"\"\"\n    Executes the verification process and exits with a status code.\n    \"\"\"\n    notion = notion_utils.get_notion_client()\n    main_id = sys.argv[1] if len(sys.argv) > 1 else None\n    if verify(notion, main_id):\n        sys.exit(0)\n    else:\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()\n"
}