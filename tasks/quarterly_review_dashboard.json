{
  "task_id": "quarterly_review_dashboard",
  "task_name": "Quarterly Review Dashboard",
  "category_id": "company_in_a_box",
  "category_name": "Company In A Box",
  "description": "Create a quarterly business review dashboard in Notion based on the existing Company In A Box workspace with department objectives and action items database.",
  "author": "Zijian Wu",
  "created_at": "2025-07-27",
  "difficulty": "L3",
  "tags": [
    "database manipulation",
    "data aggregation",
    "report generation",
    "status tracking",
    "template population"
  ],
  "mcp": [
    "notion"
  ],
  "metadata": {
    "ori_template_url": "https://painted-tennis-ebc.notion.site/Company-In-A-Box-23d81626b6d7800098f3d0e64a706cd8",
    "gt_page_url": "https://www.notion.so/Company-In-A-Box-Quarterly-Review-Dashboard-2442b7e8cebd8162bc18c003d275f26e"
  },
  "instruction": "Create a quarterly business review dashboard in Notion based on the existing **Company In A Box** workspace.\n\n**Task Requirements:**\n1. Inside the **Company Wiki** page you will find a sub-page named **Company Goals**. Extract every departmental objective listed under the four departments — **Product**, **Marketing**, **Sales**, and **HR**.\n2. Under the top-level page **Company In A Box**, create a new child page titled **Q4 2024 Business Review Dashboard**.\n3. Inside that new page build the following structure (all parts must exist):\n   1. A single **callout** block near the top that summarises progress toward the three *Current Goals* shown on the main page:\n      • *LATAM expansion*  • *Enterprise push*  • *Employee engagement*  \n      (All three phrases must appear in the callout text.)\n   2. Four separate **section headings** (any heading level) – one for each department (**Product**, **Marketing**, **Sales**, **Human Resources**) – placed below the callout.  Under each heading list that department’s objectives in a progress-tracking format (e.g. to-dos, check-box list). Each objective from the **Company Goals** page must appear at least once.\n   3. Add a **database** named **Action Items** with the following properties *exactly*:\n      • **Task Name** – title\n      • **Department** – select (options: Product, Marketing, Sales, HR)\n      • **Priority** – select (options: High, Medium, Low)\n      • **Status** – status\n      Populate this database with **≥ 5** action-item pages derived from the departmental objectives, making sure every field in each entry is filled:\n       • **Task Name** & **Department** must correctly correspond to the underlying objective/department.\n       • **Priority** and **Status** can be any allowed value, but they must **not** be left empty.\n4. Keep the overall visual style consistent with the existing wiki (use headings, dividers, etc.).",
  "verify": "import sys\nfrom typing import List\nfrom notion_client import Client\nfrom tasks.utils import notion_utils\n\n\ndef _contains_keywords(text: str, keywords: List[str]) -> bool:\n    lowered = text.lower()\n    return all(kw.lower() in lowered for kw in keywords)\n\n\ndef verify(notion: Client, main_id: str = None) -> bool:\n    \"\"\"Programmatically verify that the dashboard page and its contents meet the\n    requirements described in description.md.\n    \"\"\"\n    DASHBOARD_TITLE = \"Q4 2024 Business Review Dashboard\"\n    PARENT_PAGE_TITLE = \"Company In A Box\"\n    CALL_OUT_KEYWORDS = [\"latam\", \"enterprise\", \"employee engagement\"]\n    DEPARTMENTS = [\"Product\", \"Marketing\", \"Sales\", \"Human Resources\"]\n    REQUIRED_DB_PROPERTIES = {\n        \"Task Name\": \"title\",\n        \"Department\": \"select\",\n        \"Priority\": \"select\",\n        \"Status\": \"status\",\n    }\n    PRIORITY_OPTIONS = {\"High\", \"Medium\", \"Low\"}\n\n    # 1. Locate the dashboard page\n    page_id = None\n    if main_id:\n        found_id, obj_type = notion_utils.find_page_or_database_by_id(notion, main_id)\n        if found_id and obj_type == \"page\":\n            page_id = found_id\n\n    if not page_id:\n        page_id = notion_utils.find_page(notion, DASHBOARD_TITLE)\n\n    if not page_id:\n        print(f\"Error: Page '{DASHBOARD_TITLE}' not found.\", file=sys.stderr)\n        return False\n\n    # Optional: ensure it is a child of Company In A Box\n    try:\n        page_obj = notion.pages.retrieve(page_id=page_id)\n        parent_id = page_obj.get(\"parent\", {}).get(\"page_id\")\n        if parent_id:\n            parent_page = notion.pages.retrieve(page_id=parent_id)\n            parent_title_rt = (\n                parent_page.get(\"properties\", {}).get(\"title\", {}).get(\"title\", [])\n            )\n            parent_title = (\n                parent_title_rt[0].get(\"plain_text\") if parent_title_rt else None\n            )\n            if parent_title != PARENT_PAGE_TITLE:\n                print(\n                    f\"Error: Dashboard page is not a direct child of '{PARENT_PAGE_TITLE}'.\",\n                    file=sys.stderr,\n                )\n                return False\n    except Exception:\n        pass  # parent check is best-effort only\n\n    # 2. Verify callout with keywords\n    all_blocks = notion_utils.get_all_blocks_recursively(notion, page_id)\n    callout_ok = False\n    for block in all_blocks:\n        if block.get(\"type\") == \"callout\":\n            callout_text = notion_utils.get_block_plain_text(block)\n            if _contains_keywords(callout_text, CALL_OUT_KEYWORDS):\n                callout_ok = True\n                break\n    if not callout_ok:\n        print(\n            \"Error: No callout found that includes all three Current Goal keywords (LATAM, Enterprise, Employee engagement).\",\n            file=sys.stderr,\n        )\n        return False\n\n    # 3. Verify department section headings\n    found_depts = set()\n    for block in all_blocks:\n        if block.get(\"type\") in {\"heading_1\", \"heading_2\", \"heading_3\"}:\n            heading_text = notion_utils.get_block_plain_text(block)\n            for dept in DEPARTMENTS:\n                if dept.lower() in heading_text.lower():\n                    found_depts.add(dept)\n    if set(DEPARTMENTS) != found_depts:\n        missing = set(DEPARTMENTS) - found_depts\n        print(\n            f\"Error: Missing department headings: {', '.join(missing)}.\",\n            file=sys.stderr,\n        )\n        return False\n\n    # 4. Verify Action Items database exists and has correct schema\n    db_id = notion_utils.find_database_in_block(notion, page_id, \"Action Items\")\n    if not db_id:\n        print(\n            \"Error: Database 'Action Items' not found on the dashboard.\",\n            file=sys.stderr,\n        )\n        return False\n\n    try:\n        db = notion.databases.retrieve(database_id=db_id)\n    except Exception as exc:\n        print(f\"Error: Unable to retrieve database: {exc}\", file=sys.stderr)\n        return False\n\n    db_props = db.get(\"properties\", {})\n    for prop_name, expected_type in REQUIRED_DB_PROPERTIES.items():\n        if prop_name not in db_props:\n            print(\n                f\"Error: Property '{prop_name}' missing from database.\", file=sys.stderr\n            )\n            return False\n        actual_type = db_props[prop_name][\"type\"]\n        if isinstance(expected_type, list):\n            if actual_type not in expected_type:\n                print(\n                    f\"Error: Property '{prop_name}' has type '{actual_type}', expected one of {expected_type}.\",\n                    file=sys.stderr,\n                )\n                return False\n        else:\n            if actual_type != expected_type:\n                print(\n                    f\"Error: Property '{prop_name}' has type '{actual_type}', expected '{expected_type}'.\",\n                    file=sys.stderr,\n                )\n                return False\n        # Extra check for Priority options\n        if prop_name == \"Priority\":\n            options = {opt[\"name\"] for opt in db_props[prop_name][\"select\"][\"options\"]}\n            if not PRIORITY_OPTIONS.issubset(options):\n                print(\n                    f\"Error: Priority property options must include High/Medium/Low. Current options: {options}\",\n                    file=sys.stderr,\n                )\n                return False\n\n    # 5. Verify at least 5 action items exist\n    try:\n        pages = notion.databases.query(database_id=db_id).get(\"results\", [])\n    except Exception as exc:\n        print(f\"Error querying database pages: {exc}\", file=sys.stderr)\n        return False\n\n    if len(pages) < 5:\n        print(\"Error: Database contains fewer than 5 action items.\", file=sys.stderr)\n        return False\n\n    # Optional: Verify Department values valid\n    for page in pages:\n        props = page.get(\"properties\", {})\n\n        # Task Name must be non-empty\n        title_rt = props.get(\"Task Name\", {}).get(\"title\", [])\n        task_name = title_rt[0].get(\"plain_text\") if title_rt else \"\"\n        if not task_name.strip():\n            print(\n                f\"Error: Action item '{page.get('id')}' is missing a Task Name.\",\n                file=sys.stderr,\n            )\n            return False\n\n        # Department must be valid\n        dept_select = props.get(\"Department\", {}).get(\"select\", {}).get(\"name\")\n        if not dept_select or dept_select not in DEPARTMENTS:\n            print(\n                f\"Error: Action item '{page.get('id')}' has invalid or missing Department value.\",\n                file=sys.stderr,\n            )\n            return False\n\n        # Priority and Status must be set (any value)\n        priority_val = props.get(\"Priority\", {}).get(\"select\", {}).get(\"name\")\n        status_val = props.get(\"Status\", {}).get(\"status\", {}).get(\"name\")\n        if not priority_val or not status_val:\n            print(\n                f\"Error: Action item '{page.get('id')}' must have both Priority and Status set.\",\n                file=sys.stderr,\n            )\n            return False\n\n    print(\n        \"Success: Verified Business Review Dashboard, departmental sections, callout, and Action Items database with ≥5 entries.\"\n    )\n    return True\n\n\ndef main():\n    notion = notion_utils.get_notion_client()\n    main_id = sys.argv[1] if len(sys.argv) > 1 else None\n    if verify(notion, main_id):\n        sys.exit(0)\n    else:\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()\n"
}