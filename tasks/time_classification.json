{
  "task_id": "time_classification",
  "task_name": "Time Classification",
  "category_id": "file_property",
  "category_name": "File Property",
  "description": "Organize files based on modification timestamps into temporal categories and create a detailed time-based classification report with groupings.",
  "author": "Lingjun Chen",
  "created_at": "2025-08-07",
  "difficulty": "L3",
  "tags": [
    "file organization",
    "data extraction",
    "pattern analysis"
  ],
  "mcp": [
    "filesystem"
  ],
  "metadata": {},
  "instruction": "# File Organization by Creation Time\n\n## üìã Task Description\n\nAnalyze the creation time (ctime) of all files in the test directory and organize them into a hierarchical directory structure based on their creation dates.\n\n## üéØ Task Objectives\n\n1. **Read metadata** of all files in the test directory\n2. **Analyze creation times** (ctime) of all files (excluding .DS_Store)\n3. **Create directory structure** organized by month/day based on creation time\n4. **Move files** to appropriate directories\n5. **Create metadata analysis files** in each directory\n\n## üìù Expected Output\n\n### Directory Structure\n\nCreate directories in the format: `MM/DD/` where:\n\n- MM = month (two digits, e.g., 01, 02)\n- DD = day (two digits, e.g., 07, 09, 11, 26)\n\n### Metadata Analysis Files\n\nCreate a file named `metadata_analyse.txt` in each directory containing exactly only two lines:\n\n- **Line 1**: Oldest filename and its creation time (excluding .DS_Store)\n- **Line 2**: Latest filename and its creation time (excluding .DS_Store)\n",
  "verify": "#!/usr/bin/env python3\n\"\"\"\nVerification script for File Organization by Creation Time Task\n\"\"\"\n\nimport sys\nfrom pathlib import Path\nimport os\nfrom datetime import datetime\nimport re\n\ndef get_test_directory() -> Path:\n    \"\"\"Get the test directory from FILESYSTEM_TEST_DIR env var.\"\"\"\n    test_root = os.environ.get(\"FILESYSTEM_TEST_DIR\")\n    if not test_root:\n        raise ValueError(\"FILESYSTEM_TEST_DIR environment variable is required\")\n    return Path(test_root)\n\ndef get_month_mapping():\n    \"\"\"Return mapping for both numeric and alphabetic month representations.\"\"\"\n    return {\n        \"07\": [\"07\", \"7\", \"jul\", \"Jul\", \"JUL\"],\n        \"08\": [\"08\", \"8\", \"aug\", \"Aug\", \"AUG\"]\n    }\n\ndef get_day_mapping():\n    \"\"\"Return mapping for day representations.\"\"\"\n    return {\n        \"09\": [\"09\", \"9\"],\n        \"25\": [\"25\"],\n        \"26\": [\"26\"],\n        \"06\": [\"06\", \"6\"]\n    }\n\ndef get_expected_directory_structure():\n    \"\"\"Return the expected directory structure based on answer.md.\"\"\"\n    return {\n        \"07\": {\n            \"09\": [\"sg.jpg\"],\n            \"25\": [\"bus.MOV\"],\n            \"26\": [\"road.MOV\"]\n        },\n        \"08\": {\n            \"06\": [\"bear.jpg\", \"bridge.jpg\", \"random_file_1.txt\", \"random_file_2.txt\", \"random_file_3.txt\"]\n        }\n    }\n\ndef find_month_directory(test_dir: Path, expected_month: str) -> Path:\n    \"\"\"Find the actual month directory, handling both numeric and alphabetic representations.\"\"\"\n    month_mapping = get_month_mapping()\n    valid_month_names = month_mapping.get(expected_month, [expected_month])\n    \n    for month_name in valid_month_names:\n        month_dir = test_dir / month_name\n        if month_dir.exists() and month_dir.is_dir():\n            return month_dir\n    \n    return None\n\ndef find_day_directory(month_dir: Path, expected_day: str) -> Path:\n    \"\"\"Find the actual day directory, handling both numeric representations.\"\"\"\n    day_mapping = get_day_mapping()\n    valid_day_names = day_mapping.get(expected_day, [expected_day])\n    \n    for day_name in valid_day_names:\n        day_dir = month_dir / day_name\n        if day_dir.exists() and day_dir.is_dir():\n            return day_dir\n    \n    return None\n\ndef verify_directory_structure(test_dir: Path) -> bool:\n    \"\"\"Verify that the correct directory structure exists.\"\"\"\n    expected_structure = get_expected_directory_structure()\n    \n    for expected_month, days in expected_structure.items():\n        month_dir = find_month_directory(test_dir, expected_month)\n        if month_dir is None:\n            valid_names = get_month_mapping().get(expected_month, [expected_month])\n            print(f\"‚ùå Month directory not found. Expected one of: {valid_names}\")\n            return False\n        \n        for day, expected_files in days.items():\n            day_dir = find_day_directory(month_dir, day)\n            if day_dir is None:\n                valid_day_names = get_day_mapping().get(day, [day])\n                print(f\"‚ùå Day directory '{month_dir.name}/{day}' not found. Expected one of: {valid_day_names}\")\n                return False\n            if not day_dir.is_dir():\n                print(f\"‚ùå '{month_dir.name}/{day_dir.name}' exists but is not a directory\")\n                return False\n    \n    print(\"‚úÖ Directory structure is correct\")\n    return True\n\ndef verify_files_in_directories(test_dir: Path) -> bool:\n    \"\"\"Verify that files are in the correct directories.\"\"\"\n    expected_structure = get_expected_directory_structure()\n    \n    for expected_month, days in expected_structure.items():\n        month_dir = find_month_directory(test_dir, expected_month)\n        if month_dir is None:\n            continue  # Already handled in verify_directory_structure\n        \n        for day, expected_files in days.items():\n            day_dir = find_day_directory(month_dir, day)\n            if day_dir is None:\n                continue  # Already handled in verify_directory_structure\n            \n            # Check that all expected files are in the directory\n            missing_files = []\n            for filename in expected_files:\n                file_path = day_dir / filename\n                if not file_path.exists():\n                    missing_files.append(filename)\n            \n            if missing_files:\n                print(f\"‚ùå Missing files in '{month_dir.name}/{day_dir.name}': {missing_files}\")\n                return False\n            \n            # Check that no unexpected files are in the directory (ignore .DS_Store and metadata_analyse.txt)\n            actual_files = [f.name for f in day_dir.iterdir() if f.is_file()]\n            system_files = ['.DS_Store', 'Thumbs.db', '.DS_Store?', '._.DS_Store', 'metadata_analyse.txt']\n            unexpected_files = [f for f in actual_files if f not in expected_files and f not in system_files]\n            \n            if unexpected_files:\n                print(f\"‚ùå Unexpected files in '{month_dir.name}/{day_dir.name}': {unexpected_files}\")\n                return False\n    \n    print(\"‚úÖ All files are in correct directories\")\n    return True\n\ndef verify_metadata_analysis_files(test_dir: Path) -> bool:\n    \"\"\"Verify that metadata_analyse.txt files exist and have correct content.\"\"\"\n    expected_structure = get_expected_directory_structure()\n    \n    for expected_month, days in expected_structure.items():\n        month_dir = find_month_directory(test_dir, expected_month)\n        if month_dir is None:\n            continue  # Already handled in verify_directory_structure\n        \n        for day, expected_files in days.items():\n            day_dir = find_day_directory(month_dir, day)\n            if day_dir is None:\n                continue  # Already handled in verify_directory_structure\n            \n            metadata_file = day_dir / \"metadata_analyse.txt\"\n            \n            if not metadata_file.exists():\n                print(f\"‚ùå metadata_analyse.txt not found in '{month_dir.name}/{day_dir.name}'\")\n                return False\n            \n            try:\n                content = metadata_file.read_text().strip()\n                lines = content.split('\\n')\n                \n                # Check that there are exactly 2 lines\n                if len(lines) != 2:\n                    print(f\"‚ùå metadata_analyse.txt in '{month_dir.name}/{day_dir.name}' has {len(lines)} lines, expected 2\")\n                    return False\n                \n                # Check each line - more flexible verification\n                for line_num, line in enumerate(lines, 1):\n                    line_lower = line.lower()\n                    \n                    # Check filename based on expected_month and day\n                    expected_filename = None\n                    if expected_month == \"07\" and day == \"09\":\n                        expected_filename = \"sg.jpg\"\n                    elif expected_month == \"07\" and day == \"25\":\n                        expected_filename = \"bus.mov\"\n                    elif expected_month == \"07\" and day == \"26\":\n                        expected_filename = \"road.mov\"\n                    elif expected_month == \"08\" and day == \"06\":\n                        # For 08/06, check if it's one of the expected files\n                        if line_num == 1:  # First line should be bear.jpg\n                            expected_filename = \"bear.jpg\"\n                        else:  # Second line should be one of the random files\n                            expected_filenames = [\"random_file_1.txt\", \"random_file_2.txt\", \"random_file_3.txt\"]\n                            if not any(filename in line_lower for filename in expected_filenames):\n                                print(f\"‚ùå Line {line_num} in '{month_dir.name}/{day_dir.name}' should contain one of {expected_filenames}: {line}\")\n                                return False\n                            continue  # Skip other checks for this line\n                    \n                    if expected_filename and expected_filename not in line_lower:\n                        print(f\"‚ùå Line {line_num} in '{month_dir.name}/{day_dir.name}' should contain '{expected_filename}': {line}\")\n                        return False\n                    \n                    # Check month letters\n                    month_letters = None\n                    if expected_month == \"07\":\n                        month_letters = [\"jul\", \"7\"]\n                    elif expected_month == \"08\":\n                        month_letters = [\"aug\", \"8\"]\n                    \n                    if month_letters and not any(letter in line_lower for letter in month_letters):\n                        print(f\"‚ùå Line {line_num} in '{month_dir.name}/{day_dir.name}' should contain month letters: {line}\")\n                        return False\n                    \n                    # Check year (2025)\n                    if \"2025\" not in line_lower:\n                        print(f\"‚ùå Line {line_num} in '{month_dir.name}/{day_dir.name}' should contain '2025': {line}\")\n                        return False\n                    \n                    # Check day number - support both formats\n                    valid_day_names = get_day_mapping().get(day, [day])\n                    if not any(day_name in line_lower for day_name in valid_day_names):\n                        print(f\"‚ùå Line {line_num} in '{month_dir.name}/{day_dir.name}' should contain day '{day}' (or {valid_day_names}): {line}\")\n                        return False\n                \n            except Exception as e:\n                print(f\"‚ùå Error reading metadata_analyse.txt in '{month_dir.name}/{day_dir.name}': {e}\")\n                return False\n    \n    print(\"‚úÖ All metadata_analyse.txt files are correct\")\n    return True\n\ndef verify_no_files_in_root(test_dir: Path) -> bool:\n    \"\"\"Verify that no files remain in the root test directory.\"\"\"\n    root_files = [f for f in test_dir.iterdir() if f.is_file()]\n    \n    # Filter out system files that are commonly present\n    system_files = ['.DS_Store', 'Thumbs.db', '.DS_Store?', '._.DS_Store']\n    non_system_files = [f for f in root_files if f.name not in system_files]\n    \n    if non_system_files:\n        print(f\"‚ùå Files still present in root directory: {[f.name for f in non_system_files]}\")\n        return False\n    \n    print(\"‚úÖ No files remain in root directory\")\n    return True\n\ndef verify_total_file_count(test_dir: Path) -> bool:\n    \"\"\"Verify that all original files are accounted for.\"\"\"\n    expected_structure = get_expected_directory_structure()\n    total_expected = sum(len(files) for days in expected_structure.values() for files in days.values())\n    \n    total_actual = 0\n    for expected_month, days in expected_structure.items():\n        month_dir = find_month_directory(test_dir, expected_month)\n        if month_dir is None:\n            continue\n        for day in days:\n            day_dir = find_day_directory(month_dir, day)\n            if day_dir and day_dir.exists():\n                # Count only non-system files\n                system_files = ['.DS_Store', 'Thumbs.db', '.DS_Store?', '._.DS_Store', 'metadata_analyse.txt']\n                files_in_dir = [f for f in day_dir.iterdir() if f.is_file() and f.name not in system_files]\n                total_actual += len(files_in_dir)\n    \n    if total_actual != total_expected:\n        print(f\"‚ùå Expected {total_expected} files total, found {total_actual}\")\n        return False\n    \n    print(f\"‚úÖ Total file count is correct: {total_actual}\")\n    return True\n\ndef main():\n    \"\"\"Main verification function.\"\"\"\n    try:\n        test_dir = get_test_directory()\n        print(f\"üîç Verifying Time Classification in: {test_dir}\")\n        \n        # Run all verification checks\n        checks = [\n            (\"Directory structure\", verify_directory_structure),\n            (\"Files in directories\", verify_files_in_directories),\n            (\"Metadata analysis files\", verify_metadata_analysis_files),\n            (\"No files in root\", verify_no_files_in_root),\n            (\"Total file count\", verify_total_file_count)\n        ]\n        \n        all_passed = True\n        for check_name, check_func in checks:\n            print(f\"\\nüìã Checking: {check_name}\")\n            if not check_func(test_dir):\n                all_passed = False\n        \n        if all_passed:\n            print(\"\\nüéâ All verification checks passed!\")\n            sys.exit(0)\n        else:\n            print(\"\\n‚ùå Some verification checks failed!\")\n            sys.exit(1)\n            \n    except Exception as e:\n        print(f\"‚ùå Verification failed with error: {e}\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()",
  "model_results": {
    "gemini-2-5-pro": 0,
    "deepseek-chat": 1,
    "qwen-3-coder": 0,
    "o3": 1,
    "gpt-5": 1,
    "k2": 1,
    "claude-4-sonnet": 0
  }
}