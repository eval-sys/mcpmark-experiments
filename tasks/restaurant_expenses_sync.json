{
  "task_id": "restaurant_expenses_sync",
  "task_name": "Restaurant Expenses Sync",
  "category_id": "japan_travel_planner",
  "category_name": "Japan Travel Planner",
  "description": "Find restaurants from Day 1 Travel Itinerary and create corresponding entries in the Expenses database.",
  "author": "Xiangyan Liu",
  "created_at": "2025-07-27",
  "difficulty": "L3",
  "tags": [
    "conditional filtering",
    "database manipulation",
    "cross-reference linking",
    "template population"
  ],
  "mcp": [
    "notion"
  ],
  "metadata": {
    "ori_template_url": "https://painted-tennis-ebc.notion.site/Japan-Travel-Planner-23181626b6d781c4b6bedb12786b5abe",
    "gt_page_url": "https://www.notion.so/Japan-Travel-Planner-Restaurant-Expenses-Sync-2442b7e8cebd80698042cec3f92164e6"
  },
  "instruction": "Please find the restaurants that appear in Day 1 of the Travel Itinerary database, then create corresponding entries in the Expenses database, one restaurant per entry. Set the date uniformly to Jan 1, 2025, and the cost uniformly to $120. Display the restaurant name in the Expense field. Set Category to Dining. For Comment, use the Description from the corresponding restaurant page. Leave other properties empty.",
  "verify": "import sys\nfrom notion_client import Client\nfrom tasks.utils import notion_utils\n\n\ndef verify(notion: Client, main_id: str = None) -> bool:\n    \"\"\"\n    Verifies that restaurants from Day 1 of Travel Itinerary have corresponding expense entries.\n    \"\"\"\n    page_id = None\n    if main_id:\n        found_id, object_type = notion_utils.find_page_or_database_by_id(\n            notion, main_id\n        )\n        if found_id and object_type == \"page\":\n            page_id = found_id\n\n    if not page_id:\n        page_id = notion_utils.find_page(notion, \"Japan Travel Planner\")\n    if not page_id:\n        print(\"Error: Page 'Japan Travel Planner' not found.\", file=sys.stderr)\n        return False\n\n    # Find Travel Itinerary database\n    itinerary_db_id = notion_utils.find_database_in_block(\n        notion, page_id, \"Travel Itinerary\"\n    )\n    if not itinerary_db_id:\n        print(\"Error: Database 'Travel Itinerary' not found.\", file=sys.stderr)\n        return False\n\n    # Find Expenses database\n    expenses_db_id = notion_utils.find_database_in_block(notion, page_id, \"Expenses\")\n    if not expenses_db_id:\n        print(\"Error: Database 'Expenses' not found.\", file=sys.stderr)\n        return False\n\n    # Find Japan Places to Visit database\n    places_db_id = notion_utils.find_database_in_block(\n        notion, page_id, \"Travel Itinerary\"\n    )\n    if not places_db_id:\n        print(\"Error: Database 'Japan Places to Visit' not found.\", file=sys.stderr)\n        return False\n\n    # Query Day 1 restaurants from Travel Itinerary\n    try:\n        itinerary_results = notion.databases.query(\n            database_id=itinerary_db_id,\n            filter={\n                \"and\": [\n                    {\"property\": \"Day\", \"select\": {\"equals\": \"Day 1\"}},\n                    {\"property\": \"Type\", \"multi_select\": {\"contains\": \"Food\"}},\n                ]\n            },\n        ).get(\"results\", [])\n    except Exception as e:\n        print(f\"Error querying Travel Itinerary database: {e}\", file=sys.stderr)\n        return False\n\n    if not itinerary_results:\n        print(\n            \"Error: No restaurants found for Day 1 in Travel Itinerary.\",\n            file=sys.stderr,\n        )\n        return False\n\n    # Extract restaurant names\n    restaurant_names = []\n    for entry in itinerary_results:\n        props = entry.get(\"properties\", {})\n        name_prop = props.get(\"Name\", {})\n        name_text = \"\".join(t.get(\"plain_text\", \"\") for t in name_prop.get(\"title\", []))\n        if name_text:\n            restaurant_names.append(name_text.strip())\n\n    if not restaurant_names:\n        print(\"Error: No restaurant names found in Day 1 entries.\", file=sys.stderr)\n        return False\n\n    # Get descriptions from Japan Places to Visit database\n    try:\n        places_results = notion.databases.query(database_id=places_db_id).get(\n            \"results\", []\n        )\n    except Exception as e:\n        print(f\"Error querying Japan Places to Visit database: {e}\", file=sys.stderr)\n        return False\n\n    # Create a map of restaurant names to descriptions\n    restaurant_descriptions = {}\n    for place in places_results:\n        props = place.get(\"properties\", {})\n        name_prop = props.get(\"Name\", {})\n        name_text = \"\".join(t.get(\"plain_text\", \"\") for t in name_prop.get(\"title\", []))\n\n        desc_prop = props.get(\"Description\", {})\n        desc_text = \"\".join(\n            t.get(\"plain_text\", \"\") for t in desc_prop.get(\"rich_text\", [])\n        )\n\n        if name_text and desc_text:\n            restaurant_descriptions[name_text.strip()] = desc_text.strip()\n\n    # Query Expenses database\n    try:\n        expenses_results = notion.databases.query(database_id=expenses_db_id).get(\n            \"results\", []\n        )\n    except Exception as e:\n        print(f\"Error querying Expenses database: {e}\", file=sys.stderr)\n        return False\n\n    # Verify each restaurant has a corresponding expense entry\n    verified_restaurants = []\n    for restaurant_name in restaurant_names:\n        found_matching_expense = False\n        expected_description = restaurant_descriptions.get(restaurant_name, \"\")\n\n        for expense in expenses_results:\n            props = expense.get(\"properties\", {})\n\n            # Check Expense field (title)\n            expense_prop = props.get(\"Expense\", {})\n            expense_text = \"\".join(\n                t.get(\"plain_text\", \"\") for t in expense_prop.get(\"title\", [])\n            )\n            if expense_text.strip() != restaurant_name:\n                continue\n\n            # Check Date\n            date_prop = props.get(\"Date\", {})\n            date_start = date_prop.get(\"date\", {}).get(\"start\")\n            if date_start != \"2025-01-01\":\n                continue\n\n            # Check Transaction Amount\n            amount_prop = props.get(\"Transaction Amount\", {})\n            amount = amount_prop.get(\"number\")\n            if amount != 120:\n                continue\n\n            # Check Category contains Dining\n            category_prop = props.get(\"Category\", {})\n            categories = [c.get(\"name\") for c in category_prop.get(\"multi_select\", [])]\n            if \"Dining\" not in categories:\n                continue\n\n            # Check Comment matches description (if description exists)\n            if expected_description:\n                comment_prop = props.get(\"Comment\", {})\n                comment_text = \"\".join(\n                    t.get(\"plain_text\", \"\") for t in comment_prop.get(\"rich_text\", [])\n                )\n                if comment_text.strip().replace(\n                    \"\\u202f\", \" \"\n                ) != expected_description.replace(\"\\u202f\", \" \"):\n                    continue\n\n            found_matching_expense = True\n            verified_restaurants.append(restaurant_name)\n            break\n\n        if not found_matching_expense:\n            print(\n                f\"Error: No matching expense entry found for restaurant '{restaurant_name}'.\",\n                file=sys.stderr,\n            )\n            return False\n\n    if len(verified_restaurants) == len(restaurant_names):\n        print(\n            f\"Success: Found matching expense entries for all {len(restaurant_names)} Day 1 restaurants.\"\n        )\n        return True\n    else:\n        print(\n            f\"Error: Only {len(verified_restaurants)} out of {len(restaurant_names)} restaurants have matching expense entries.\",\n            file=sys.stderr,\n        )\n        return False\n\n\ndef main():\n    \"\"\"\n    Executes the verification process and exits with a status code.\n    \"\"\"\n    notion = notion_utils.get_notion_client()\n    main_id = sys.argv[1] if len(sys.argv) > 1 else None\n    if verify(notion, main_id):\n        sys.exit(0)\n    else:\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()\n"
}