{
  "task_id": "code_snippets_go",
  "task_name": "Code Snippets Go",
  "category_id": "computer_science_student_dashboard",
  "category_name": "Computer Science Student Dashboard",
  "description": "Add a new Go column to the Code Snippets section between Python and JavaScript columns.",
  "author": "Zijian Wu",
  "created_at": "2025-07-27",
  "difficulty": "L3",
  "tags": [
    "content organization",
    "visual formatting",
    "template population"
  ],
  "mcp": [
    "notion"
  ],
  "meta_data": {
    "stateType": "url",
    "stateContent": null,
    "stateUrl": "https://painted-tennis-ebc.notion.site/Computer-Science-Student-Dashboard-23e81626b6d78083b787d3c832b02ef4",
    "stateOriginalUrl": "https://www.notion.so/marketplace/templates/computer-science-student-dashboard"
  },
  "instruction": "Find the page named \"Computer Science Student Dashboard\" and add a new Go column to the \"Code Snippets\" section.\n\n**Task Requirements:**\n1. In the \"Code Snippets\" section, create (or locate) a column dedicated to the Go programming language. **This column must appear between the existing Python and JavaScript columns** within the same column list.\n2. At the top of the Go column, add a bold paragraph that contains exactly the text `Go`.\n3. Under the header paragraph, add three code-block blocks configured with `language` set to **go**:\n   a. **Basic Go program** – Caption must be `Basic Go program` and the code content must be exactly:\n   ```go\n   package main\n\n   import \"fmt\"\n\n   func main() {\n       fmt.Println(\"Hello, World!\")\n   }\n   ```\n   b. **For loop in Go** – Caption must be `For loop in Go` and the code content must be exactly:\n   ```go\n   for i := 0; i < 5; i++ {\n       fmt.Println(i)\n   }\n   ```\n   c. **Function definition in Go** – Caption must be `Function definition in Go` and the code content must be exactly:\n   ```go\n   func add(a, b int) int {\n       return a + b\n   }\n   ```",
  "verify": "import sys\nfrom notion_client import Client\nfrom tasks.utils import notion_utils\n\n# Expected code blocks (language=go)\nEXPECTED_CODE_BLOCKS = [\n    {\n        \"caption\": \"Basic Go program\",\n        \"code\": (\n            'package main\\n\\nimport \"fmt\"\\n\\nfunc main() {\\n    fmt.Println(\"Hello, World!\")\\n}'\n        ),\n    },\n    {\n        \"caption\": \"For loop in Go\",\n        \"code\": (\"for i := 0; i < 5; i++ {\\n    fmt.Println(i)\\n}\"),\n    },\n    {\n        \"caption\": \"Function definition in Go\",\n        \"code\": (\"func add(a, b int) int {\\n    return a + b\\n}\"),\n    },\n]\n\nHEADER_TEXT = \"Go\"\n\n\ndef _normalize(text: str) -> str:\n    \"\"\"Remove trailing spaces on each line and strip leading/trailing blank lines.\"\"\"\n    return \"\\n\".join(line.rstrip() for line in text.strip().splitlines())\n\n\ndef _find_page(notion: Client, main_id: str | None) -> str | None:\n    \"\"\"Return a page_id to verify against or None if not found.\"\"\"\n    page_id = None\n    if main_id:\n        found_id, object_type = notion_utils.find_page_or_database_by_id(\n            notion, main_id\n        )\n        if found_id and object_type == \"page\":\n            page_id = found_id\n    if not page_id:\n        page_id = notion_utils.find_page(notion, \"Computer Science Student Dashboard\")\n    return page_id\n\n\ndef _has_bold_header_text(block, text: str) -> bool:\n    \"\"\"Generic bold header/paragraph check for a given text.\"\"\"\n    block_type = block.get(\"type\")\n    if block_type not in {\"paragraph\", \"heading_1\", \"heading_2\", \"heading_3\"}:\n        return False\n    rich_text_list = block.get(block_type, {}).get(\"rich_text\", [])\n    if not rich_text_list:\n        return False\n    plain = \"\".join(rt.get(\"plain_text\", \"\") for rt in rich_text_list).strip()\n    if plain != text:\n        return False\n    return any(rt.get(\"annotations\", {}).get(\"bold\", False) for rt in rich_text_list)\n\n\ndef _go_column_order_correct(notion: Client, page_id: str) -> bool:\n    \"\"\"Return True if there exists a column list where Python → Go → JavaScript order holds.\"\"\"\n    # Gather all blocks once (flat list) to locate column_list blocks\n    all_blocks = notion_utils.get_all_blocks_recursively(notion, page_id)\n    column_list_ids = [\n        blk[\"id\"] for blk in all_blocks if blk.get(\"type\") == \"column_list\"\n    ]\n\n    for cl_id in column_list_ids:\n        # Retrieve columns in explicit order\n        columns = notion.blocks.children.list(block_id=cl_id).get(\"results\", [])\n        header_to_idx: dict[str, int] = {}\n        for idx, col in enumerate(columns):\n            # Recursively inspect blocks within this column\n            col_blocks = notion_utils.get_all_blocks_recursively(notion, col[\"id\"])\n            for blk in col_blocks:\n                if _has_bold_header_text(blk, \"Python\"):\n                    header_to_idx.setdefault(\"Python\", idx)\n                elif _has_bold_header_text(blk, \"Go\"):\n                    header_to_idx.setdefault(\"Go\", idx)\n                elif _has_bold_header_text(blk, \"JavaScript\"):\n                    header_to_idx.setdefault(\"JavaScript\", idx)\n            # Short-circuit if all three found within current traversal\n            if len(header_to_idx) == 3:\n                break\n\n        if (\n            \"Python\" in header_to_idx\n            and \"Go\" in header_to_idx\n            and \"JavaScript\" in header_to_idx\n            and header_to_idx[\"Python\"]\n            < header_to_idx[\"Go\"]\n            < header_to_idx[\"JavaScript\"]\n        ):\n            return True\n    return False\n\n\ndef _collect_code_blocks(blocks):\n    \"\"\"Return list of (code_content, caption) tuples for code blocks with language 'go'.\"\"\"\n    collected = []\n    for block in blocks:\n        if block.get(\"type\") != \"code\":\n            continue\n        code_data = block.get(\"code\", {})\n        if code_data.get(\"language\") != \"go\":\n            continue\n        code_plain = \"\".join(\n            rt.get(\"plain_text\", \"\") for rt in code_data.get(\"rich_text\", [])\n        )\n        caption_plain = \"\".join(\n            rt.get(\"plain_text\", \"\") for rt in code_data.get(\"caption\", [])\n        )\n        collected.append((code_plain, caption_plain))\n    return collected\n\n\ndef verify(notion: Client, main_id: str | None = None) -> bool:\n    page_id = _find_page(notion, main_id)\n    if not page_id:\n        print(\"Error: Target page not found.\", file=sys.stderr)\n        return False\n\n    all_blocks = notion_utils.get_all_blocks_recursively(notion, page_id)\n\n    # Verify header\n    header_ok = any(_has_bold_header_text(b, HEADER_TEXT) for b in all_blocks)\n    if not header_ok:\n        print(\"Failure: Bold header 'Go' not found.\", file=sys.stderr)\n        return False\n\n    # Verify code blocks\n    code_blocks_found = _collect_code_blocks(all_blocks)\n\n    remaining = EXPECTED_CODE_BLOCKS.copy()\n    for code, caption in code_blocks_found:\n        norm_code = _normalize(code)\n        for expected in remaining:\n            if (\n                _normalize(expected[\"code\"]) == norm_code\n                and expected[\"caption\"] == caption\n            ):\n                remaining.remove(expected)\n                break\n    if remaining:\n        missing = \", \".join(exp[\"caption\"] for exp in remaining)\n        print(\n            f\"Failure: Missing or incorrect Go code blocks: {missing}\", file=sys.stderr\n        )\n        return False\n\n    # Verify column order Python → Go → JavaScript\n    if not _go_column_order_correct(notion, page_id):\n        print(\n            \"Failure: Go column is not positioned between Python and JavaScript.\",\n            file=sys.stderr,\n        )\n        return False\n\n    print(\n        \"Success: Verified Go column with required code blocks and correct positioning.\"\n    )\n    return True\n\n\ndef main():\n    notion = notion_utils.get_notion_client()\n    main_id = sys.argv[1] if len(sys.argv) > 1 else None\n    sys.exit(0 if verify(notion, main_id) else 1)\n\n\nif __name__ == \"__main__\":\n    main()\n"
}