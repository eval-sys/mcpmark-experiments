{
  "task_id": "deployment_process_sop",
  "task_name": "Deployment Process SOP",
  "category_id": "standard_operating_procedure",
  "category_name": "Standard Operating Procedure",
  "description": "Complete the SOP template with comprehensive content for a Software Deployment Process with interconnected sections.",
  "author": "Xiangyan Liu",
  "created_at": "2025-07-27",
  "difficulty": "L3",
  "tags": [
    "template population",
    "cross-reference linking",
    "content organization",
    "visual formatting"
  ],
  "mcp": [
    "notion"
  ],
  "metadata": {
    "ori_template_url": "https://painted-tennis-ebc.notion.site/Standard-Operating-Procedure-24381626b6d780a8b678f9e62ae5b152",
    "gt_page_url": "https://www.notion.so/Standard-Operating-Procedure-Deployment-Process-Sop-2442b7e8cebd803db05ceb02e37aeb24"
  },
  "instruction": "Using Notion Tools. Complete the SOP template (a notion page titled 'Standard Operating Procedure') by filling in all sections with comprehensive, interconnected content for a \"Software Deployment Process\" SOP, ensuring all cross-references, terminologies, and procedural steps are properly linked and validated.\n\n**Task Requirements:**\n\n1. **Update the SOP header information** (in the left column):\n   - Change the heading_1 \"SOP Title\" text to \"Software Deployment Process\"\n   - Update the paragraph \"Created 2023-10-25\" to \"Created 2025-01-19\"\n   - Update the paragraph \"Responsible department:\" to \"Responsible department: DevOps Engineering Team\"\n   - Update the People team page's callout to: \"DevOps Engineering Team Wiki - Contains team contact information, escalation procedures, and deployment schedules. Access required for all deployment activities.\"\n\n2. **Fill the Purpose section** with exactly this content:\n   - Replace the placeholder paragraph (starts with \"↓ Summarize the procedure\") with: \"This SOP defines the standardized process for deploying software applications to production environments, ensuring zero-downtime deployments, proper rollback procedures, and compliance with security protocols. This procedure applies to all production deployments and must be followed by all engineering teams.\"\n\n3. **Complete the Context section** with:\n   - Replace the placeholder paragraph (starts with \"↓ Add any related and useful information\") with: \"Software deployments are critical operations that can impact system availability and user experience. This process has been developed based on industry best practices and our incident response learnings from Q3 2023. All deployments must go through automated testing pipelines and require approval from designated reviewers.\"\n   - Update all THREE child_pages under the \"Relevant Docs\" toggle:\n     - First child_page callout (Contacting IT): \"Change Management Policy (SOP-001) - Defines approval workflows and change review processes for all production modifications.\"\n     - Second child_page callout (Team lunches): \"Incident Response Procedures (SOP-003) - Emergency procedures for handling deployment failures and system outages.\"\n     - Third child_page callout (Sending swag): \"Security Compliance Guidelines (SOP-007) - Security requirements and validation steps for production deployments.\"\n\n4. **Define comprehensive Terminologies** by:\n   - Replace the placeholder paragraph (starts with \"↓ Add any unfamiliar or domain specific words\") with: \"Essential deployment terminology for team understanding:\"\n   - Replace the existing bulleted_list_item \"Term: The definition of the term\" with these four exact items:\n     - \"Blue-Green Deployment: A deployment strategy that maintains two identical production environments\"\n     - \"Rollback Window: The maximum time allowed to revert a deployment (30 minutes)\"  \n     - \"Smoke Test: Initial verification tests run immediately after deployment\"\n     - \"Production Gateway: The approval checkpoint before production release\"\n\n5. **Populate Tools section** with:\n   - Replace the placeholder paragraph (starts with \"↓ Add any relevant tools\") with: \"Critical tools required for deployment operations:\"\n   - Update the TWO existing child_pages:\n     - First child_page callout: \"Jenkins CI/CD Pipeline - Primary deployment automation tool with integrated testing and approval workflows. Required for all automated deployments.\"\n     - Second child_page callout: \"Kubernetes Dashboard - Container orchestration monitoring and management interface for deployment verification and rollback operations.\"\n\n6. **Complete Roles & responsibilities** with:\n   - Replace the placeholder paragraph (starts with \"↓ Define who will be executing\") with: \"The following roles are essential for successful deployment execution:\"\n   - Replace the existing empty bulleted_list_item with these four exact items:\n     - \"DevOps Engineer: Executes deployment, monitors system health, initiates rollbacks if needed\"\n     - \"Lead Developer: Reviews code changes, approves deployment package, validates functionality\"  \n     - \"QA Engineer: Verifies smoke tests, confirms user acceptance criteria\"\n     - \"Security Officer: Validates security compliance, approves security-sensitive deployments\"\n\n7. **Create detailed Procedure section** with:\n   - Replace the placeholder paragraph (starts with \"↓ Create a step by step procedure\") with: \"Follow these steps in sequence. Do not skip steps or perform them out of order.\"\n   - Replace the THREE existing numbered_list_items with:\n     - \"Pre-deployment: Verify all automated tests pass, obtain required approvals from Lead Developer and Security Officer, confirm rollback plan is documented and tested\"\n     - \"Deployment execution: Deploy to staging environment first, run comprehensive smoke tests, obtain final Production Gateway approval, deploy to production using blue-green strategy\"\n     - \"Post-deployment: Monitor system metrics for minimum 30 minutes, validate all functionality using automated tests, document deployment results in change log, notify all stakeholders via deployment notification system\"",
  "verify": "import sys\nfrom notion_client import Client\nfrom tasks.utils import notion_utils\n\n\ndef verify(notion: Client, main_id: str = None) -> bool:\n    \"\"\"\n    Verifies comprehensive SOP template completion with exact content matching.\n    \"\"\"\n    page_id = None\n    if main_id:\n        found_id, object_type = notion_utils.find_page_or_database_by_id(\n            notion, main_id\n        )\n        if found_id and object_type == \"page\":\n            page_id = found_id\n\n    if not page_id:\n        page_id = notion_utils.find_page(notion, \"Standard Operating Procedure\")\n    if not page_id:\n        print(\"Error: Page 'Standard Operating Procedure' not found.\", file=sys.stderr)\n        return False\n\n    all_blocks = notion_utils.get_all_blocks_recursively(notion, page_id)\n    verification_results = []\n\n    # Check 1: Verify SOP header information updates\n    sop_title_found = False\n    created_date_found = False\n    responsible_dept_found = False\n    header_callout_found = False\n\n    for block in all_blocks:\n        if block.get(\"type\") == \"heading_1\":\n            heading_text = notion_utils.get_block_plain_text(block)\n            if \"Software Deployment Process\" in heading_text:\n                sop_title_found = True\n                verification_results.append(\"✅ SOP Title updated correctly\")\n\n        elif block.get(\"type\") == \"paragraph\":\n            para_text = notion_utils.get_block_plain_text(block)\n            if \"Created 2025-01-19\" in para_text:\n                created_date_found = True\n                verification_results.append(\"✅ Created date updated correctly\")\n            elif \"Responsible department: DevOps Engineering Team\" in para_text:\n                responsible_dept_found = True\n                verification_results.append(\n                    \"✅ Responsible department updated correctly\"\n                )\n\n        elif block.get(\"type\") == \"child_page\":\n            # Check child pages recursively for callout content - specifically the People team page\n            try:\n                child_page_info = notion.pages.retrieve(page_id=block[\"id\"])\n                child_page_title = \"\"\n                if (\n                    \"properties\" in child_page_info\n                    and \"title\" in child_page_info[\"properties\"]\n                ):\n                    title_list = child_page_info[\"properties\"][\"title\"].get(\"title\", [])\n                    if title_list:\n                        child_page_title = title_list[0].get(\"plain_text\", \"\")\n            except:\n                child_page_title = \"\"\n\n            child_blocks = notion_utils.get_all_blocks_recursively(notion, block[\"id\"])\n            for child_block in child_blocks:\n                if child_block.get(\"type\") == \"callout\":\n                    callout_text = notion_utils.get_block_plain_text(child_block)\n                    # Look for the People team page with the DevOps Engineering Team Wiki callout\n                    if (\n                        \"DevOps Engineering Team Wiki\" in callout_text\n                        and \"deployment schedules\" in callout_text\n                        and \"deployment activities\" in callout_text\n                    ):\n                        header_callout_found = True\n                        verification_results.append(\n                            \"✅ Header People team page callout updated correctly\"\n                        )\n\n    # Check 2: Verify Purpose section content\n    purpose_found = False\n    expected_purpose = \"This SOP defines the standardized process for deploying software applications to production environments\"\n\n    for i, block in enumerate(all_blocks):\n        if block.get(\"type\") == \"heading_2\":\n            heading_text = notion_utils.get_block_plain_text(block)\n            if \"Purpose\" in heading_text:\n                # Check next paragraph after Purpose heading\n                for j in range(i + 1, min(i + 5, len(all_blocks))):\n                    next_block = all_blocks[j]\n                    if next_block.get(\"type\") == \"paragraph\":\n                        para_text = notion_utils.get_block_plain_text(next_block)\n                        if (\n                            expected_purpose in para_text\n                            and \"engineering teams\" in para_text\n                        ):\n                            purpose_found = True\n                            verification_results.append(\n                                \"✅ Purpose section content updated correctly\"\n                            )\n                        break\n                break\n\n    # Check 3: Verify Context section and child_page callouts\n    context_found = False\n    child_pages_updated = 0\n    expected_context = \"Software deployments are critical operations that can impact system availability\"\n    expected_child_callouts = [\n        (\n            \"Change Management Policy (SOP-001)\",\n            \"Defines approval workflows and change review processes for all production modifications\",\n            \"Contacting IT\",\n        ),\n        (\n            \"Incident Response Procedures (SOP-003)\",\n            \"Emergency procedures for handling deployment failures and system outages\",\n            \"Team lunches\",\n        ),\n        (\n            \"Security Compliance Guidelines (SOP-007)\",\n            \"Security requirements and validation steps for production deployments\",\n            \"Sending swag\",\n        ),\n    ]\n\n    for i, block in enumerate(all_blocks):\n        if block.get(\"type\") == \"heading_2\":\n            heading_text = notion_utils.get_block_plain_text(block)\n            if \"Context\" in heading_text:\n                # Check paragraph content\n                for j in range(i + 1, min(i + 10, len(all_blocks))):\n                    next_block = all_blocks[j]\n                    if next_block.get(\"type\") == \"paragraph\":\n                        para_text = notion_utils.get_block_plain_text(next_block)\n                        if expected_context in para_text and \"Q3 2023\" in para_text:\n                            context_found = True\n                    elif next_block.get(\"type\") == \"toggle\":\n                        # Check child pages under toggle\n                        toggle_blocks = notion_utils.get_all_blocks_recursively(\n                            notion, next_block[\"id\"]\n                        )\n                        for toggle_child in toggle_blocks:\n                            if toggle_child.get(\"type\") == \"child_page\":\n                                # Get the child page title to match with expected callouts\n                                try:\n                                    child_page_info = notion.pages.retrieve(\n                                        page_id=toggle_child[\"id\"]\n                                    )\n                                    child_page_title = \"\"\n                                    if (\n                                        \"properties\" in child_page_info\n                                        and \"title\" in child_page_info[\"properties\"]\n                                    ):\n                                        title_list = child_page_info[\"properties\"][\n                                            \"title\"\n                                        ].get(\"title\", [])\n                                        if title_list:\n                                            child_page_title = title_list[0].get(\n                                                \"plain_text\", \"\"\n                                            )\n                                except:\n                                    child_page_title = \"\"\n\n                                child_blocks = notion_utils.get_all_blocks_recursively(\n                                    notion, toggle_child[\"id\"]\n                                )\n                                for child_block in child_blocks:\n                                    if child_block.get(\"type\") == \"callout\":\n                                        callout_text = (\n                                            notion_utils.get_block_plain_text(\n                                                child_block\n                                            )\n                                        )\n                                        for (\n                                            expected_title,\n                                            expected_content,\n                                            expected_page_title,\n                                        ) in expected_child_callouts:\n                                            if (\n                                                expected_title in callout_text\n                                                and expected_content in callout_text\n                                                and expected_page_title\n                                                in child_page_title\n                                            ):\n                                                child_pages_updated += 1\n                                                verification_results.append(\n                                                    f\"✅ Context child_page '{expected_page_title}' updated correctly\"\n                                                )\n                                                break\n\n    if context_found:\n        verification_results.append(\"✅ Context section content updated correctly\")\n\n    if child_pages_updated == 3:\n        verification_results.append(\n            \"✅ All 3 Context child_page callouts updated correctly\"\n        )\n    else:\n        verification_results.append(\n            f\"❌ Only {child_pages_updated}/3 Context child_page callouts updated correctly (Contacting IT, Team lunches, Sending swag)\"\n        )\n\n    # Check 4: Verify Terminologies section with exact 4 bulleted items\n    terminologies_found = False\n    terminology_items = []\n    expected_terminologies = [\n        \"Blue-Green Deployment: A deployment strategy that maintains two identical production environments\",\n        \"Rollback Window: The maximum time allowed to revert a deployment (30 minutes)\",\n        \"Smoke Test: Initial verification tests run immediately after deployment\",\n        \"Production Gateway: The approval checkpoint before production release\",\n    ]\n\n    for i, block in enumerate(all_blocks):\n        if block.get(\"type\") == \"heading_2\":\n            heading_text = notion_utils.get_block_plain_text(block)\n            if \"Terminologies\" in heading_text:\n                # Check for intro paragraph\n                for j in range(i + 1, min(i + 2, len(all_blocks))):\n                    if all_blocks[j].get(\"type\") == \"paragraph\":\n                        para_text = notion_utils.get_block_plain_text(all_blocks[j])\n                        if \"Essential deployment terminology\" in para_text:\n                            terminologies_found = True\n                            break\n\n                # Check bulleted list items\n                for j in range(i + 1, min(i + 10, len(all_blocks))):\n                    next_block = all_blocks[j]\n                    if next_block.get(\"type\") == \"bulleted_list_item\":\n                        item_text = notion_utils.get_block_plain_text(next_block)\n                        terminology_items.append(item_text)\n                    elif next_block.get(\"type\") in [\n                        \"heading_1\",\n                        \"heading_2\",\n                        \"heading_3\",\n                    ]:\n                        break\n                break\n\n    terminology_matches = sum(\n        1\n        for expected in expected_terminologies\n        if any(expected in item for item in terminology_items)\n    )\n\n    if terminologies_found and len(terminology_items) == 4 and terminology_matches == 4:\n        verification_results.append(\n            \"✅ Terminologies section with exactly 4 correct items\"\n        )\n    else:\n        verification_results.append(\n            f\"❌ Terminologies: expected 4 items, found {len(terminology_items)}, {terminology_matches} correct\"\n        )\n\n    # Check 5: Verify Tools section with 2 child_page callouts\n    tools_found = False\n    tools_child_pages = 0\n    expected_tools = [\n        (\"Jenkins CI/CD Pipeline\", \"automated deployments\"),\n        (\"Kubernetes Dashboard\", \"rollback operations\"),\n    ]\n\n    for i, block in enumerate(all_blocks):\n        if block.get(\"type\") == \"heading_2\":\n            heading_text = notion_utils.get_block_plain_text(block)\n            if \"Tools\" in heading_text:\n                # Check intro paragraph\n                for j in range(i + 1, min(i + 2, len(all_blocks))):\n                    if all_blocks[j].get(\"type\") == \"paragraph\":\n                        para_text = notion_utils.get_block_plain_text(all_blocks[j])\n                        if \"Critical tools required\" in para_text:\n                            tools_found = True\n                            break\n\n                # Check child pages\n                for j in range(i + 1, min(i + 10, len(all_blocks))):\n                    next_block = all_blocks[j]\n                    if next_block.get(\"type\") == \"child_page\":\n                        child_blocks = notion_utils.get_all_blocks_recursively(\n                            notion, next_block[\"id\"]\n                        )\n                        for child_block in child_blocks:\n                            if child_block.get(\"type\") == \"callout\":\n                                callout_text = notion_utils.get_block_plain_text(\n                                    child_block\n                                )\n                                for expected_title, expected_content in expected_tools:\n                                    if (\n                                        expected_title in callout_text\n                                        and expected_content in callout_text\n                                    ):\n                                        tools_child_pages += 1\n                                        break\n                    elif next_block.get(\"type\") in [\n                        \"heading_1\",\n                        \"heading_2\",\n                        \"heading_3\",\n                    ]:\n                        break\n                break\n\n    if tools_found and tools_child_pages == 2:\n        verification_results.append(\n            \"✅ Tools section with 2 correctly updated child_page callouts\"\n        )\n    else:\n        verification_results.append(\n            f\"❌ Tools section: expected 2 child_pages updated, found {tools_child_pages}\"\n        )\n\n    # Check 6: Verify Roles & responsibilities with exactly 4 bulleted items\n    roles_found = False\n    role_items = []\n    expected_roles = [\n        \"DevOps Engineer: Executes deployment, monitors system health, initiates rollbacks if needed\",\n        \"Lead Developer: Reviews code changes, approves deployment package, validates functionality\",\n        \"QA Engineer: Verifies smoke tests, confirms user acceptance criteria\",\n        \"Security Officer: Validates security compliance, approves security-sensitive deployments\",\n    ]\n\n    for i, block in enumerate(all_blocks):\n        if block.get(\"type\") == \"heading_2\":\n            heading_text = notion_utils.get_block_plain_text(block)\n            if \"Roles\" in heading_text and \"responsibilities\" in heading_text:\n                # Check intro paragraph\n                for j in range(i + 1, min(i + 2, len(all_blocks))):\n                    if all_blocks[j].get(\"type\") == \"paragraph\":\n                        para_text = notion_utils.get_block_plain_text(all_blocks[j])\n                        if \"essential for successful deployment execution\" in para_text:\n                            roles_found = True\n                            break\n\n                # Check bulleted list items\n                for j in range(i + 1, min(i + 10, len(all_blocks))):\n                    next_block = all_blocks[j]\n                    if next_block.get(\"type\") == \"bulleted_list_item\":\n                        item_text = notion_utils.get_block_plain_text(next_block)\n                        role_items.append(item_text)\n                    elif next_block.get(\"type\") in [\n                        \"heading_1\",\n                        \"heading_2\",\n                        \"heading_3\",\n                    ]:\n                        break\n                break\n\n    role_matches = sum(\n        1 for expected in expected_roles if any(expected in item for item in role_items)\n    )\n\n    if roles_found and len(role_items) == 4 and role_matches == 4:\n        verification_results.append(\n            \"✅ Roles & responsibilities section with exactly 4 correct items\"\n        )\n    else:\n        verification_results.append(\n            f\"❌ Roles section: expected 4 items, found {len(role_items)}, {role_matches} correct\"\n        )\n\n    # Check 7: Verify Procedure section with exactly 3 numbered items\n    procedure_found = False\n    procedure_items = []\n    expected_procedures = [\n        (\"Pre-deployment\", \"Lead Developer and Security Officer\", \"rollback plan\"),\n        (\"Deployment execution\", \"staging environment first\", \"blue-green strategy\"),\n        (\n            \"Post-deployment\",\n            \"minimum 30 minutes\",\n            \"stakeholders via deployment notification\",\n        ),\n    ]\n\n    for i, block in enumerate(all_blocks):\n        if block.get(\"type\") == \"heading_2\":\n            heading_text = notion_utils.get_block_plain_text(block)\n            if \"Procedure\" in heading_text:\n                # Check intro paragraph\n                for j in range(i + 1, min(i + 2, len(all_blocks))):\n                    if all_blocks[j].get(\"type\") == \"paragraph\":\n                        para_text = notion_utils.get_block_plain_text(all_blocks[j])\n                        if \"Follow these steps in sequence\" in para_text:\n                            procedure_found = True\n                            break\n\n                # Check numbered list items\n                for j in range(i + 1, min(i + 10, len(all_blocks))):\n                    next_block = all_blocks[j]\n                    if next_block.get(\"type\") == \"numbered_list_item\":\n                        item_text = notion_utils.get_block_plain_text(next_block)\n                        procedure_items.append(item_text)\n                    elif next_block.get(\"type\") in [\n                        \"heading_1\",\n                        \"heading_2\",\n                        \"heading_3\",\n                    ]:\n                        break\n                break\n\n    procedure_matches = 0\n    for item_text in procedure_items:\n        for expected_title, expected_content1, expected_content2 in expected_procedures:\n            if (\n                expected_title in item_text\n                and expected_content1 in item_text\n                and expected_content2 in item_text\n            ):\n                procedure_matches += 1\n                break\n\n    if procedure_found and len(procedure_items) == 3 and procedure_matches == 3:\n        verification_results.append(\"✅ Procedure section with exactly 3 correct items\")\n    else:\n        verification_results.append(\n            f\"❌ Procedure: expected 3 items, found {len(procedure_items)}, {procedure_matches} correct\"\n        )\n\n    # Calculate overall success\n    total_checks = 14  # Number of major verification points\n    successful_checks = sum(\n        1 for result in verification_results if result.startswith(\"✅\")\n    )\n\n    # Print all verification results\n    print(\"\\n=== SOP Template Verification Results ===\", file=sys.stderr)\n    for result in verification_results:\n        print(result, file=sys.stderr)\n\n    print(f\"\\n=== Summary: {successful_checks}/{total_checks} checks passed ===\")\n\n    # Must pass ALL checks to succeed\n    success = (\n        sop_title_found\n        and created_date_found\n        and responsible_dept_found\n        and header_callout_found\n        and purpose_found\n        and context_found\n        and child_pages_updated == 3\n        and terminologies_found\n        and len(terminology_items) == 4\n        and terminology_matches == 4\n        and tools_found\n        and tools_child_pages == 2\n        and roles_found\n        and len(role_items) == 4\n        and role_matches == 4\n        and procedure_found\n        and len(procedure_items) == 3\n        and procedure_matches == 3\n    )\n\n    if success:\n        print(\"\\n🎉 SUCCESS: All SOP template requirements completed correctly!\")\n        return True\n    else:\n        print(\n            f\"\\n❌ FAILURE: SOP template verification failed. {successful_checks}/{total_checks} requirements met.\",\n            file=sys.stderr,\n        )\n        return False\n\n\ndef main():\n    \"\"\"\n    Executes the verification process and exits with a status code.\n    \"\"\"\n    notion = notion_utils.get_notion_client()\n    main_id = sys.argv[1] if len(sys.argv) > 1 else None\n    if verify(notion, main_id):\n        sys.exit(0)\n    else:\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()\n"
}