{
  "task_id": "automated_changelog_generation",
  "task_name": "Automated Changelog Generation",
  "category_id": "claude-code",
  "category_name": "Claude Code",
  "description": "Analyze closed issues and open PRs to generate comprehensive documentation including changelog, migration guide, and analysis reports.",
  "author": "Zijian Wu",
  "created_at": "2025-08-15",
  "difficulty": "L3",
  "tags": [
    "release coordination",
    "workflow automation"
  ],
  "mcp": [
    "github"
  ],
  "meta_data": {
    "stateType": "url",
    "stateContent": null,
    "stateUrl": "https://github.com/mcpmark-source/claude-code",
    "stateOriginalUrl": "https://github.com/anthropics/claude-code"
  },
  "instruction": "I need you to analyze all recently closed issues and open pull requests in the repository, then generate comprehensive documentation and organize them properly.\n\n**Step 1: Create Documentation Branch**\nCreate a new branch called 'docs/changelog-and-migration' from the main branch.\n\n**Step 2: Generate Changelog from Closed Issues**\nFind all closed issues in the repository and create the file `CHANGELOG-GENERATED.md` on your branch with:\n- A heading \"# Changelog - Recent Fixes\"\n- A \"### üêõ Bug Fixes\" section listing all closed issues with bug label, formatted as: \"- **#[NUMBER]**: [Title] ([labels])\"\n- A \"### üìö Documentation\" section for closed issues with documentation label\n- A \"### üîÑ Duplicates\" section for issues marked as duplicate\n- A \"### üìä Statistics\" section with:\n  - Total number of closed issues\n  - Distribution by platform labels (platform:macos, platform:linux, etc.)\n  - Distribution by area labels (area:core, area:tools, etc.)\n\n**Step 3: Create Migration Guide for Open PRs**\nAnalyze all open pull requests and create the file `docs/MIGRATION_GUIDE.md` with:\n- A heading \"# Migration Guide for Pending Features\"\n- For each open PR, create a section with:\n  - PR title and number\n  - Summary of changes based on the PR description\n  - Any new configuration or environment variables mentioned\n  - Installation or usage instructions if applicable\n\n**Step 4: Create Issue Analysis Report**\nCreate the file `reports/ISSUE_ANALYSIS.md` with:\n- A heading \"# Issue Analysis Report\"\n- A \"## Closed Issues by Category\" section grouping closed issues by their primary label\n- A \"## Resolution Patterns\" section identifying common themes\n- A \"## Platform Impact Analysis\" section showing which platforms were most affected\n- Include references to specific issues that had cross-project impact or memory-related problems\n\n**Step 5: Create PR Integration Plan**\nCreate the file `reports/PR_INTEGRATION_PLAN.md` with:\n- A heading \"# Pull Request Integration Strategy\"\n- A \"## Open PRs Overview\" section listing each open PR with a technical summary\n- A \"## Dependencies and Conflicts\" section analyzing potential conflicts between PRs\n- A \"## Recommended Merge Order\" section with reasoning\n- A \"## Risk Assessment\" section linking any risks to previously closed issues\n\n**Step 6: Create Documentation PR**\nCreate a pull request from 'docs/changelog-and-migration' to 'main' with:\n- Title: \"docs: Generated changelog and migration documentation\"\n- Body including:\n  - A \"## Summary\" section describing what was generated\n  - A \"## Files Created\" section listing all new documentation\n  - A \"## Issues Processed\" section mentioning the number of closed issues analyzed\n  - A \"## PRs Analyzed\" section mentioning the open PRs reviewed\n\n**Step 7: Merge Documentation PR**\nMerge the documentation pull request using the \"squash\" merge method.",
  "verify": "import sys\nimport os\nimport requests\nfrom typing import Dict, List, Optional, Tuple\nimport base64\nfrom dotenv import load_dotenv\n\n\ndef _get_github_api(\n    endpoint: str, headers: Dict[str, str], org: str, repo: str = \"claude-code\"\n) -> Tuple[bool, Optional[Dict]]:\n    \"\"\"Make a GET request to GitHub API and return (success, response).\"\"\"\n    url = f\"https://api.github.com/repos/{org}/{repo}/{endpoint}\"\n\n    try:\n        response = requests.get(url, headers=headers)\n        if response.status_code == 200:\n            return True, response.json()\n        elif response.status_code == 404:\n            return False, None\n        else:\n            print(f\"API error for {endpoint}: {response.status_code}\", file=sys.stderr)\n            return False, None\n    except Exception as e:\n        print(f\"Exception for {endpoint}: {e}\", file=sys.stderr)\n        return False, None\n\n\ndef _check_branch_exists(\n    branch_name: str, headers: Dict[str, str], org: str, repo: str = \"claude-code\"\n) -> bool:\n    \"\"\"Verify that a branch exists in the repository.\"\"\"\n    success, _ = _get_github_api(f\"branches/{branch_name}\", headers, org, repo)\n    return success\n\n\ndef _get_file_content(\n    file_path: str,\n    headers: Dict[str, str],\n    org: str,\n    repo: str = \"claude-code\",\n    ref: str = \"main\",\n) -> Optional[str]:\n    \"\"\"Get the content of a file from the repository.\"\"\"\n    success, result = _get_github_api(\n        f\"contents/{file_path}?ref={ref}\", headers, org, repo\n    )\n    if not success or not result:\n        return None\n\n    try:\n        content = base64.b64decode(result.get(\"content\", \"\")).decode(\"utf-8\")\n        return content\n    except Exception as e:\n        print(f\"Content decode error for {file_path}: {e}\", file=sys.stderr)\n        return None\n\n\ndef _find_pr_by_title_keyword(\n    keyword: str, headers: Dict[str, str], org: str, repo: str = \"claude-code\"\n) -> Optional[Dict]:\n    \"\"\"Find a PR by title keyword and return the PR data.\"\"\"\n    for state in [\"open\", \"closed\"]:\n        success, prs = _get_github_api(\n            f\"pulls?state={state}&per_page=100\", headers, org, repo\n        )\n        if success and prs:\n            for pr in prs:\n                if keyword.lower() in pr.get(\"title\", \"\").lower():\n                    return pr\n    return None\n\n\ndef _get_pr_merge_commit(\n    pr_number: int, headers: Dict[str, str], org: str, repo: str = \"claude-code\"\n) -> Optional[Dict]:\n    \"\"\"Get the merge commit for a PR to check merge method.\"\"\"\n    success, pr = _get_github_api(f\"pulls/{pr_number}\", headers, org, repo)\n    if success and pr:\n        merge_commit_sha = pr.get(\"merge_commit_sha\")\n        if merge_commit_sha:\n            success, commit = _get_github_api(\n                f\"commits/{merge_commit_sha}\", headers, org, repo\n            )\n            if success:\n                return commit\n    return None\n\n\ndef _check_file_sections(content: str, required_sections: List[str]) -> bool:\n    \"\"\"Check if file content contains required sections.\"\"\"\n    if not content:\n        return False\n    return all(section in content for section in required_sections)\n\n\ndef _check_issue_references(text: str, issue_numbers: List[int]) -> int:\n    \"\"\"Count how many of the specified issue numbers are referenced in the text.\"\"\"\n    if not text:\n        return 0\n    count = 0\n    for num in issue_numbers:\n        if f\"#{num}\" in text:\n            count += 1\n    return count\n\n\ndef _check_pr_references(text: str, pr_numbers: List[int]) -> int:\n    \"\"\"Count how many of the specified PR numbers are referenced in the text.\"\"\"\n    if not text:\n        return 0\n    count = 0\n    for num in pr_numbers:\n        if f\"#{num}\" in text or f\"PR #{num}\" in text:\n            count += 1\n    return count\n\n\ndef verify() -> bool:\n    \"\"\"\n    Programmatically verify that the changelog and migration documentation workflow\n    meets the requirements described in description.md.\n    \"\"\"\n    # Configuration constants - these are known to us but not explicitly told to the model\n    DOCS_BRANCH_NAME = \"docs/changelog-and-migration\"\n    DOCS_PR_KEYWORD = \"Generated changelog and migration\"\n\n    # Known issue and PR numbers for verification\n    EXPECTED_BUG_ISSUES = [12, 13, 15, 21, 22, 23, 25, 37, 39, 48, 50]\n    EXPECTED_OPEN_PRS = [51, 52, 53]\n\n    # Expected file sections\n    CHANGELOG_SECTIONS = [\n        \"# Changelog - Recent Fixes\",\n        \"### üêõ Bug Fixes\",\n        \"### üìö Documentation\",\n        \"### üîÑ Duplicates\",\n        \"### üìä Statistics\",\n    ]\n\n    MIGRATION_GUIDE_SECTIONS = [\"# Migration Guide for Pending Features\"]\n\n    ISSUE_ANALYSIS_SECTIONS = [\n        \"# Issue Analysis Report\",\n        \"## Closed Issues by Category\",\n        \"## Resolution Patterns\",\n        \"## Platform Impact Analysis\",\n    ]\n\n    PR_INTEGRATION_SECTIONS = [\n        \"# Pull Request Integration Strategy\",\n        \"## Open PRs Overview\",\n        \"## Dependencies and Conflicts\",\n        \"## Recommended Merge Order\",\n        \"## Risk Assessment\",\n    ]\n\n    # Load environment variables from .mcp_env\n    load_dotenv(\".mcp_env\")\n\n    # Get GitHub token and org\n    github_token = os.environ.get(\"MCP_GITHUB_TOKEN\")\n    github_org = os.environ.get(\"GITHUB_EVAL_ORG\")\n\n    if not github_token:\n        print(\"Error: MCP_GITHUB_TOKEN environment variable not set\", file=sys.stderr)\n        return False\n\n    if not github_org:\n        print(\"Error: GITHUB_EVAL_ORG environment variable not set\", file=sys.stderr)\n        return False\n\n    headers = {\n        \"Authorization\": f\"Bearer {github_token}\",\n        \"Accept\": \"application/vnd.github.v3+json\",\n    }\n\n    # Run verification checks\n    print(\"Verifying changelog and migration documentation workflow...\")\n\n    # 1. Check that documentation branch exists\n    print(\"1. Verifying documentation branch exists...\")\n    if not _check_branch_exists(DOCS_BRANCH_NAME, headers, github_org):\n        print(f\"Error: Branch '{DOCS_BRANCH_NAME}' not found\", file=sys.stderr)\n        return False\n    print(\"‚úì Documentation branch created\")\n\n    # 2. Check changelog file\n    print(\"2. Verifying CHANGELOG-GENERATED.md...\")\n    changelog_content = _get_file_content(\n        \"CHANGELOG-GENERATED.md\", headers, github_org, \"claude-code\", DOCS_BRANCH_NAME\n    )\n    if not changelog_content:\n        print(\"Error: CHANGELOG-GENERATED.md not found\", file=sys.stderr)\n        return False\n\n    if not _check_file_sections(changelog_content, CHANGELOG_SECTIONS):\n        print(\n            \"Error: CHANGELOG-GENERATED.md missing required sections\", file=sys.stderr\n        )\n        return False\n\n    # Check that bug issues are referenced\n    bug_refs = _check_issue_references(changelog_content, EXPECTED_BUG_ISSUES)\n    if bug_refs < 8:  # At least 8 of the bug issues\n        print(\n            f\"Error: CHANGELOG-GENERATED.md only references {bug_refs} bug issues, expected at least 8\",\n            file=sys.stderr,\n        )\n        return False\n\n    # Check for platform and area statistics\n    if (\n        \"platform:\" not in changelog_content.lower()\n        or \"area:\" not in changelog_content.lower()\n    ):\n        print(\n            \"Error: CHANGELOG-GENERATED.md missing platform or area distribution\",\n            file=sys.stderr,\n        )\n        return False\n\n    print(\"‚úì Changelog created with proper content\")\n\n    # 3. Check migration guide\n    print(\"3. Verifying MIGRATION_GUIDE.md...\")\n    migration_content = _get_file_content(\n        \"docs/MIGRATION_GUIDE.md\", headers, github_org, \"claude-code\", DOCS_BRANCH_NAME\n    )\n    if not migration_content:\n        print(\"Error: docs/MIGRATION_GUIDE.md not found\", file=sys.stderr)\n        return False\n\n    if not _check_file_sections(migration_content, MIGRATION_GUIDE_SECTIONS):\n        print(\"Error: MIGRATION_GUIDE.md missing required sections\", file=sys.stderr)\n        return False\n\n    # Check that all expected open PRs are mentioned\n    pr_refs = _check_pr_references(migration_content, EXPECTED_OPEN_PRS)\n    if pr_refs < 3:\n        print(\n            f\"Error: MIGRATION_GUIDE.md only references {pr_refs}/3 open PRs\",\n            file=sys.stderr,\n        )\n        return False\n\n    print(\"‚úì Migration guide created with proper content\")\n\n    # 4. Check issue analysis report\n    print(\"4. Verifying ISSUE_ANALYSIS.md...\")\n    issue_analysis_content = _get_file_content(\n        \"reports/ISSUE_ANALYSIS.md\",\n        headers,\n        github_org,\n        \"claude-code\",\n        DOCS_BRANCH_NAME,\n    )\n    if not issue_analysis_content:\n        print(\"Error: reports/ISSUE_ANALYSIS.md not found\", file=sys.stderr)\n        return False\n\n    if not _check_file_sections(issue_analysis_content, ISSUE_ANALYSIS_SECTIONS):\n        print(\"Error: ISSUE_ANALYSIS.md missing required sections\", file=sys.stderr)\n        return False\n\n    # Check for cross-project and memory issue mentions\n    if \"#50\" not in issue_analysis_content and \"#48\" not in issue_analysis_content:\n        print(\n            \"Warning: ISSUE_ANALYSIS.md may be missing cross-project issue references\",\n            file=sys.stderr,\n        )\n\n    print(\"‚úì Issue analysis report created\")\n\n    # 5. Check PR integration plan\n    print(\"5. Verifying PR_INTEGRATION_PLAN.md...\")\n    pr_plan_content = _get_file_content(\n        \"reports/PR_INTEGRATION_PLAN.md\",\n        headers,\n        github_org,\n        \"claude-code\",\n        DOCS_BRANCH_NAME,\n    )\n    if not pr_plan_content:\n        print(\"Error: reports/PR_INTEGRATION_PLAN.md not found\", file=sys.stderr)\n        return False\n\n    if not _check_file_sections(pr_plan_content, PR_INTEGRATION_SECTIONS):\n        print(\n            \"Error: PR_INTEGRATION_PLAN.md missing required sections\", file=sys.stderr\n        )\n        return False\n\n    # Check that all open PRs are analyzed\n    pr_refs_in_plan = _check_pr_references(pr_plan_content, EXPECTED_OPEN_PRS)\n    if pr_refs_in_plan < 3:\n        print(\n            f\"Error: PR_INTEGRATION_PLAN.md only references {pr_refs_in_plan}/3 open PRs\",\n            file=sys.stderr,\n        )\n        return False\n\n    print(\"‚úì PR integration plan created\")\n\n    # 6. Find and verify the documentation PR\n    print(\"6. Verifying documentation pull request...\")\n    docs_pr = _find_pr_by_title_keyword(DOCS_PR_KEYWORD, headers, github_org)\n    if not docs_pr:\n        # Try alternative keyword\n        docs_pr = _find_pr_by_title_keyword(\n            \"changelog and migration\", headers, github_org\n        )\n\n    if not docs_pr:\n        print(\"Error: Documentation PR not found\", file=sys.stderr)\n        return False\n\n    pr_body = docs_pr.get(\"body\", \"\")\n    pr_number = docs_pr.get(\"number\")\n\n    # Check PR body sections\n    required_sections = [\n        \"## Summary\",\n        \"## Files Created\",\n        \"## Issues Processed\",\n        \"## PRs Analyzed\",\n    ]\n    missing_sections = []\n    for section in required_sections:\n        if section not in pr_body:\n            missing_sections.append(section)\n\n    if len(missing_sections) > 1:  # Allow 1 missing section for flexibility\n        print(\n            f\"Error: Documentation PR missing sections: {missing_sections}\",\n            file=sys.stderr,\n        )\n        return False\n\n    print(\"‚úì Documentation PR created\")\n\n    # 7. Check that the documentation PR has been merged with squash method\n    print(\"7. Verifying documentation PR merge with squash method...\")\n    if docs_pr.get(\"state\") != \"closed\" or not docs_pr.get(\"merged_at\"):\n        print(\"Error: Documentation PR has not been merged\", file=sys.stderr)\n        return False\n\n    # Check merge method was squash by examining the merge commit\n    merge_commit = _get_pr_merge_commit(pr_number, headers, github_org)\n    if merge_commit:\n        # Squash merges typically have only one parent (the base branch)\n        parents = merge_commit.get(\"parents\", [])\n        if len(parents) != 1:\n            print(\n                f\"Warning: Merge commit has {len(parents)} parents, may not be squash merge\",\n                file=sys.stderr,\n            )\n\n        # Check commit message pattern typical of squash merges\n        commit_message = merge_commit.get(\"commit\", {}).get(\"message\", \"\")\n        if f\"#{pr_number}\" not in commit_message:\n            print(\n                \"Warning: Merge commit message may not follow squash merge pattern\",\n                file=sys.stderr,\n            )\n    else:\n        print(\"Warning: Could not retrieve merge commit details\", file=sys.stderr)\n\n    merged_at = docs_pr.get(\"merged_at\")\n    if not merged_at:\n        print(\"Error: Documentation PR merge timestamp not found\", file=sys.stderr)\n        return False\n\n    print(\"‚úì Documentation PR merged successfully\")\n\n    print(\"\\n‚úÖ All verification checks passed!\")\n    print(\"Changelog and migration documentation completed successfully:\")\n    print(f\"  - Documentation PR #{pr_number} (merged)\")\n    print(f\"  - Branch: {DOCS_BRANCH_NAME}\")\n    print(\"  - Files created: 4 documentation files\")\n    print(f\"  - Bug issues referenced: {bug_refs}/{len(EXPECTED_BUG_ISSUES)}\")\n    print(f\"  - Open PRs analyzed: {pr_refs}/{len(EXPECTED_OPEN_PRS)}\")\n\n    return True\n\n\nif __name__ == \"__main__\":\n    success = verify()\n    sys.exit(0 if success else 1)\n"
}