{
  "task_id": "team_roster_management",
  "task_name": "Team Roster Management",
  "category_id": "sports",
  "category_name": "Sports",
  "description": "Manage team rosters with player transfers, injury tracking, performance evaluations, and health status adjustments.",
  "author": "Lingxiao Du",
  "created_at": "2025-08-18",
  "difficulty": "L3",
  "tags": [
    "schema design",
    "data migration",
    "statistical aggregation"
  ],
  "mcp": [
    "postgres"
  ],
  "meta_data": {
    "stateType": "text",
    "stateContent": "Table \"addresses\" {\n  \"id\" int4 [not null, increment]\n  \"location_id\" int4 [not null]\n  \"language\" varchar(100)\n  \"suite\" varchar(100)\n  \"floor\" varchar(100)\n  \"building\" varchar(100)\n  \"street_number\" varchar(100)\n  \"street_prefix\" varchar(100)\n  \"street\" varchar(100)\n  \"street_suffix\" varchar(100)\n  \"neighborhood\" varchar(100)\n  \"district\" varchar(100)\n  \"locality\" varchar(100)\n  \"county\" varchar(100)\n  \"region\" varchar(100)\n  \"postal_code\" varchar(100)\n  \"country\" varchar(100)\n}\n\nTable \"affiliation_phases\" {\n  \"id\" int4 [not null, increment]\n  \"affiliation_id\" int4 [not null]\n  \"ancestor_affiliation_id\" int4\n  \"start_season_id\" int4\n  \"start_date_time\" timestamp\n  \"end_season_id\" int4\n  \"end_date_time\" timestamp\n}\n\nTable \"affiliations\" {\n  \"id\" int4 [not null, increment]\n  \"affiliation_key\" varchar(100) [not null]\n  \"affiliation_type\" varchar(100)\n  \"publisher_id\" int4 [not null]\n}\n\nTable \"affiliations_documents\" {\n  \"affiliation_id\" int4 [not null]\n  \"document_id\" int4 [not null]\n}\n\nTable \"affiliations_events\" {\n  \"affiliation_id\" int4 [not null]\n  \"event_id\" int4 [not null]\n}\n\nTable \"affiliations_media\" {\n  \"affiliation_id\" int4 [not null]\n  \"media_id\" int4 [not null]\n}\n\nTable \"american_football_action_participants\" {\n  \"id\" int4 [not null, increment]\n  \"american_football_action_play_id\" int4 [not null]\n  \"person_id\" int4 [not null]\n  \"participant_role\" varchar(100) [not null]\n  \"score_type\" varchar(100)\n  \"field_line\" int4\n  \"yardage\" int4\n  \"score_credit\" int4\n  \"yards_gained\" int4\n}\n\nTable \"american_football_action_plays\" {\n  \"id\" int4 [not null, increment]\n  \"american_football_event_state_id\" int4 [not null]\n  \"play_type\" varchar(100)\n  \"score_attempt_type\" varchar(100)\n  \"drive_result\" varchar(100)\n  \"points\" int4\n  \"comment\" varchar(255)\n}\n\nTable \"american_football_defensive_stats\" {\n  \"id\" int4 [not null, increment]\n  \"tackles_total\" varchar(100)\n  \"tackles_solo\" varchar(100)\n  \"tackles_assists\" varchar(100)\n  \"interceptions_total\" varchar(100)\n  \"interceptions_yards\" varchar(100)\n  \"interceptions_average\" varchar(100)\n  \"interceptions_longest\" varchar(100)\n  \"interceptions_touchdown\" varchar(100)\n  \"quarterback_hurries\" varchar(100)\n  \"sacks_total\" varchar(100)\n  \"sacks_yards\" varchar(100)\n  \"passes_defensed\" varchar(100)\n}\n\nTable \"american_football_down_progress_stats\" {\n  \"id\" int4 [not null, increment]\n  \"first_downs_total\" varchar(100)\n  \"first_downs_pass\" varchar(100)\n  \"first_downs_run\" varchar(100)\n  \"first_downs_penalty\" varchar(100)\n  \"conversions_third_down\" varchar(100)\n  \"conversions_third_down_attempts\" varchar(100)\n  \"conversions_third_down_percentage\" varchar(100)\n  \"conversions_fourth_down\" varchar(100)\n  \"conversions_fourth_down_attempts\" varchar(100)\n  \"conversions_fourth_down_percentage\" varchar(100)\n}\n\nTable \"american_football_event_states\" {\n  \"id\" int4 [not null, increment]\n  \"event_id\" int4 [not null]\n  \"current_state\" int2\n  \"sequence_number\" int4\n  \"period_value\" int4\n  \"period_time_elapsed\" varchar(100)\n  \"period_time_remaining\" varchar(100)\n  \"clock_state\" varchar(100)\n  \"down\" int4\n  \"team_in_possession_id\" int4\n  \"distance_for_1st_down\" int4\n  \"field_side\" varchar(100)\n  \"field_line\" int4\n  \"context\" varchar(40)\n}\n\nTable \"american_football_fumbles_stats\" {\n  \"id\" int4 [not null, increment]\n  \"fumbles_committed\" varchar(100)\n  \"fumbles_forced\" varchar(100)\n  \"fumbles_recovered\" varchar(100)\n  \"fumbles_lost\" varchar(100)\n  \"fumbles_yards_gained\" varchar(100)\n  \"fumbles_own_committed\" varchar(100)\n  \"fumbles_own_recovered\" varchar(100)\n  \"fumbles_own_lost\" varchar(100)\n  \"fumbles_own_yards_gained\" varchar(100)\n  \"fumbles_opposing_committed\" varchar(100)\n  \"fumbles_opposing_recovered\" varchar(100)\n  \"fumbles_opposing_lost\" varchar(100)\n  \"fumbles_opposing_yards_gained\" varchar(100)\n}\n\nTable \"american_football_offensive_stats\" {\n  \"id\" int4 [not null, increment]\n  \"offensive_plays_yards\" varchar(100)\n  \"offensive_plays_number\" varchar(100)\n  \"offensive_plays_average_yards_per\" varchar(100)\n  \"possession_duration\" varchar(100)\n  \"turnovers_giveaway\" varchar(100)\n}\n\nTable \"american_football_passing_stats\" {\n  \"id\" int4 [not null, increment]\n  \"passes_attempts\" varchar(100)\n  \"passes_completions\" varchar(100)\n  \"passes_percentage\" varchar(100)\n  \"passes_yards_gross\" varchar(100)\n  \"passes_yards_net\" varchar(100)\n  \"passes_yards_lost\" varchar(100)\n  \"passes_touchdowns\" varchar(100)\n  \"passes_touchdowns_percentage\" varchar(100)\n  \"passes_interceptions\" varchar(100)\n  \"passes_interceptions_percentage\" varchar(100)\n  \"passes_longest\" varchar(100)\n  \"passes_average_yards_per\" varchar(100)\n  \"passer_rating\" varchar(100)\n  \"receptions_total\" varchar(100)\n  \"receptions_yards\" varchar(100)\n  \"receptions_touchdowns\" varchar(100)\n  \"receptions_first_down\" varchar(100)\n  \"receptions_longest\" varchar(100)\n  \"receptions_average_yards_per\" varchar(100)\n}\n\nTable \"american_football_penalties_stats\" {\n  \"id\" int4 [not null, increment]\n  \"penalties_total\" varchar(100)\n  \"penalty_yards\" varchar(100)\n  \"penalty_first_downs\" varchar(100)\n}\n\nTable \"american_football_rushing_stats\" {\n  \"id\" int4 [not null, increment]\n  \"rushes_attempts\" varchar(100)\n  \"rushes_yards\" varchar(100)\n  \"rushes_touchdowns\" varchar(100)\n  \"rushing_average_yards_per\" varchar(100)\n  \"rushes_first_down\" varchar(100)\n  \"rushes_longest\" varchar(100)\n}\n\nTable \"american_football_sacks_against_stats\" {\n  \"id\" int4 [not null, increment]\n  \"sacks_against_yards\" varchar(100)\n  \"sacks_against_total\" varchar(100)\n}\n\nTable \"american_football_scoring_stats\" {\n  \"id\" int4 [not null, increment]\n  \"touchdowns_total\" varchar(100)\n  \"touchdowns_passing\" varchar(100)\n  \"touchdowns_rushing\" varchar(100)\n  \"touchdowns_special_teams\" varchar(100)\n  \"touchdowns_defensive\" varchar(100)\n  \"extra_points_attempts\" varchar(100)\n  \"extra_points_made\" varchar(100)\n  \"extra_points_missed\" varchar(100)\n  \"extra_points_blocked\" varchar(100)\n  \"field_goal_attempts\" varchar(100)\n  \"field_goals_made\" varchar(100)\n  \"field_goals_missed\" varchar(100)\n  \"field_goals_blocked\" varchar(100)\n  \"safeties_against\" varchar(100)\n  \"two_point_conversions_attempts\" varchar(100)\n  \"two_point_conversions_made\" varchar(100)\n  \"touchbacks_total\" varchar(100)\n}\n\nTable \"american_football_special_teams_stats\" {\n  \"id\" int4 [not null, increment]\n  \"returns_punt_total\" varchar(100)\n  \"returns_punt_yards\" varchar(100)\n  \"returns_punt_average\" varchar(100)\n  \"returns_punt_longest\" varchar(100)\n  \"returns_punt_touchdown\" varchar(100)\n  \"returns_kickoff_total\" varchar(100)\n  \"returns_kickoff_yards\" varchar(100)\n  \"returns_kickoff_average\" varchar(100)\n  \"returns_kickoff_longest\" varchar(100)\n  \"returns_kickoff_touchdown\" varchar(100)\n  \"returns_total\" varchar(100)\n  \"returns_yards\" varchar(100)\n  \"punts_total\" varchar(100)\n  \"punts_yards_gross\" varchar(100)\n  \"punts_yards_net\" varchar(100)\n  \"punts_longest\" varchar(100)\n  \"punts_inside_20\" varchar(100)\n  \"punts_inside_20_percentage\" varchar(100)\n  \"punts_average\" varchar(100)\n  \"punts_blocked\" varchar(100)\n  \"touchbacks_total\" varchar(100)\n  \"touchbacks_total_percentage\" varchar(100)\n  \"touchbacks_kickoffs\" varchar(100)\n  \"touchbacks_kickoffs_percentage\" varchar(100)\n  \"touchbacks_punts\" varchar(100)\n  \"touchbacks_punts_percentage\" varchar(100)\n  \"touchbacks_interceptions\" varchar(100)\n  \"touchbacks_interceptions_percentage\" varchar(100)\n  \"fair_catches\" varchar(100)\n}\n\nTable \"baseball_action_contact_details\" {\n  \"id\" int4 [not null, increment]\n  \"baseball_action_pitch_id\" int4 [not null]\n  \"location\" varchar(100)\n  \"strength\" varchar(100)\n  \"velocity\" int4\n  \"comment\" text\n  \"trajectory_coordinates\" varchar(100)\n  \"trajectory_formula\" varchar(100)\n}\n\nTable \"baseball_action_pitches\" {\n  \"id\" int4 [not null, increment]\n  \"baseball_action_play_id\" int4 [not null]\n  \"sequence_number\" int4\n  \"baseball_defensive_group_id\" int4\n  \"umpire_call\" varchar(100)\n  \"pitch_location\" varchar(100)\n  \"pitch_type\" varchar(100)\n  \"pitch_velocity\" int4\n  \"comment\" text\n  \"trajectory_coordinates\" varchar(100)\n  \"trajectory_formula\" varchar(100)\n  \"ball_type\" varchar(40)\n  \"strike_type\" varchar(40)\n}\n\nTable \"baseball_action_plays\" {\n  \"id\" int4 [not null, increment]\n  \"baseball_event_state_id\" int4 [not null]\n  \"play_type\" varchar(100)\n  \"notation\" varchar(100)\n  \"notation_yaml\" text\n  \"baseball_defensive_group_id\" int4\n  \"comment\" varchar(255)\n  \"runner_on_first_advance\" int4\n  \"runner_on_second_advance\" int4\n  \"runner_on_third_advance\" int4\n  \"outs_recorded\" int4\n  \"rbi\" int4\n  \"runs_scored\" int4\n  \"earned_runs_scored\" varchar(100)\n}\n\nTable \"baseball_action_substitutions\" {\n  \"id\" int4 [not null, increment]\n  \"baseball_event_state_id\" int4 [not null]\n  \"sequence_number\" int4\n  \"person_type\" varchar(100)\n  \"person_original_id\" int4\n  \"person_original_position_id\" int4\n  \"person_original_lineup_slot\" int4\n  \"person_replacing_id\" int4\n  \"person_replacing_position_id\" int4\n  \"person_replacing_lineup_slot\" int4\n  \"substitution_reason\" varchar(100)\n  \"comment\" varchar(100)\n}\n\nTable \"baseball_defensive_group\" {\n  \"id\" int4 [not null, increment]\n}\n\nTable \"baseball_defensive_players\" {\n  \"id\" int4 [not null, increment]\n  \"baseball_defensive_group_id\" int4 [not null]\n  \"player_id\" int4 [not null]\n  \"position_id\" int4 [not null]\n}\n\nTable \"baseball_defensive_stats\" {\n  \"id\" int4 [not null, increment]\n  \"double_plays\" int4\n  \"triple_plays\" int4\n  \"putouts\" int4\n  \"assists\" int4\n  \"errors\" int4\n  \"fielding_percentage\" numeric\n  \"defensive_average\" numeric\n  \"errors_passed_ball\" int4\n  \"errors_catchers_interference\" int4\n}\n\nTable \"baseball_event_states\" {\n  \"id\" int4 [not null, increment]\n  \"event_id\" int4 [not null]\n  \"current_state\" int2\n  \"sequence_number\" int4\n  \"at_bat_number\" int4\n  \"inning_value\" int4\n  \"inning_half\" varchar(100)\n  \"outs\" int4\n  \"balls\" int4\n  \"strikes\" int4\n  \"runner_on_first_id\" int4\n  \"runner_on_second_id\" int4\n  \"runner_on_third_id\" int4\n  \"runner_on_first\" int2\n  \"runner_on_second\" int2\n  \"runner_on_third\" int2\n  \"runs_this_inning_half\" int4\n  \"pitcher_id\" int4\n  \"batter_id\" int4\n  \"batter_side\" varchar(100)\n  \"context\" varchar(40)\n}\n\nTable \"baseball_offensive_stats\" {\n  \"id\" int4 [not null, increment]\n  \"average\" numeric\n  \"runs_scored\" int4\n  \"at_bats\" int4\n  \"hits\" int4\n  \"rbi\" int4\n  \"total_bases\" int4\n  \"slugging_percentage\" numeric\n  \"bases_on_balls\" int4\n  \"strikeouts\" int4\n  \"left_on_base\" int4\n  \"left_in_scoring_position\" int4\n  \"singles\" int4\n  \"doubles\" int4\n  \"triples\" int4\n  \"home_runs\" int4\n  \"grand_slams\" int4\n  \"at_bats_per_rbi\" numeric\n  \"plate_appearances_per_rbi\" numeric\n  \"at_bats_per_home_run\" numeric\n  \"plate_appearances_per_home_run\" numeric\n  \"sac_flies\" int4\n  \"sac_bunts\" int4\n  \"grounded_into_double_play\" int4\n  \"moved_up\" int4\n  \"on_base_percentage\" numeric\n  \"stolen_bases\" int4\n  \"stolen_bases_caught\" int4\n  \"stolen_bases_average\" numeric\n  \"hit_by_pitch\" int4\n  \"defensive_interferance_reaches\" int4\n  \"on_base_plus_slugging\" numeric\n  \"plate_appearances\" int4\n  \"hits_extra_base\" int4\n}\n\nTable \"baseball_pitching_stats\" {\n  \"id\" int4 [not null, increment]\n  \"runs_allowed\" int4\n  \"singles_allowed\" int4\n  \"doubles_allowed\" int4\n  \"triples_allowed\" int4\n  \"home_runs_allowed\" int4\n  \"innings_pitched\" varchar(20)\n  \"hits\" int4\n  \"earned_runs\" int4\n  \"unearned_runs\" int4\n  \"bases_on_balls\" int4\n  \"bases_on_balls_intentional\" int4\n  \"strikeouts\" int4\n  \"strikeout_to_bb_ratio\" numeric\n  \"number_of_pitches\" int4\n  \"era\" numeric\n  \"inherited_runners_scored\" int4\n  \"pick_offs\" int4\n  \"errors_hit_with_pitch\" int4\n  \"errors_wild_pitch\" int4\n  \"balks\" int4\n  \"wins\" int4\n  \"losses\" int4\n  \"saves\" int4\n  \"shutouts\" int4\n  \"games_complete\" int4\n  \"games_finished\" int4\n  \"winning_percentage\" numeric\n  \"event_credit\" varchar(40)\n  \"save_credit\" varchar(40)\n}\n\nTable \"basketball_defensive_stats\" {\n  \"id\" int4 [not null, increment]\n  \"steals_total\" varchar(100)\n  \"steals_per_game\" varchar(100)\n  \"blocks_total\" varchar(100)\n  \"blocks_per_game\" varchar(100)\n}\n\nTable \"basketball_event_states\" {\n  \"id\" int4 [not null, increment]\n  \"event_id\" int4 [not null]\n  \"current_state\" int4\n  \"sequence_number\" int4\n  \"period_value\" varchar(100)\n  \"period_time_elapsed\" varchar(100)\n  \"period_time_remaining\" varchar(100)\n  \"context\" varchar(40)\n}\n\nTable \"basketball_offensive_stats\" {\n  \"id\" int4 [not null, increment]\n  \"field_goals_made\" int4\n  \"field_goals_attempted\" int4\n  \"field_goals_percentage\" varchar(100)\n  \"field_goals_per_game\" varchar(100)\n  \"field_goals_attempted_per_game\" varchar(100)\n  \"field_goals_percentage_adjusted\" varchar(100)\n  \"three_pointers_made\" int4\n  \"three_pointers_attempted\" int4\n  \"three_pointers_percentage\" varchar(100)\n  \"three_pointers_per_game\" varchar(100)\n  \"three_pointers_attempted_per_game\" varchar(100)\n  \"free_throws_made\" varchar(100)\n  \"free_throws_attempted\" varchar(100)\n  \"free_throws_percentage\" varchar(100)\n  \"free_throws_per_game\" varchar(100)\n  \"free_throws_attempted_per_game\" varchar(100)\n  \"points_scored_total\" varchar(100)\n  \"points_scored_per_game\" varchar(100)\n  \"assists_total\" varchar(100)\n  \"assists_per_game\" varchar(100)\n  \"turnovers_total\" varchar(100)\n  \"turnovers_per_game\" varchar(100)\n  \"points_scored_off_turnovers\" varchar(100)\n  \"points_scored_in_paint\" varchar(100)\n  \"points_scored_on_second_chance\" varchar(100)\n  \"points_scored_on_fast_break\" varchar(100)\n}\n\nTable \"basketball_rebounding_stats\" {\n  \"id\" int4 [not null, increment]\n  \"rebounds_total\" varchar(100)\n  \"rebounds_per_game\" varchar(100)\n  \"rebounds_defensive\" varchar(100)\n  \"rebounds_offensive\" varchar(100)\n  \"team_rebounds_total\" varchar(100)\n  \"team_rebounds_per_game\" varchar(100)\n  \"team_rebounds_defensive\" varchar(100)\n  \"team_rebounds_offensive\" varchar(100)\n}\n\nTable \"basketball_team_stats\" {\n  \"id\" int4 [not null, increment]\n  \"timeouts_left\" varchar(100)\n  \"largest_lead\" varchar(100)\n  \"fouls_total\" varchar(100)\n  \"turnover_margin\" varchar(100)\n}\n\nTable \"bookmakers\" {\n  \"id\" int4 [not null, increment]\n  \"bookmaker_key\" varchar(100)\n  \"publisher_id\" int4 [not null]\n  \"location_id\" int4\n}\n\nTable \"core_person_stats\" {\n  \"id\" int4 [not null, increment]\n  \"time_played_event\" varchar(40)\n  \"time_played_total\" varchar(40)\n  \"time_played_event_average\" varchar(40)\n  \"events_played\" int4\n  \"events_started\" int4\n  \"position_id\" int4\n}\n\nTable \"core_stats\" {\n  \"id\" int4 [not null, increment]\n  \"score\" varchar(100)\n  \"score_opposing\" varchar(100)\n  \"score_attempts\" varchar(100)\n  \"score_attempts_opposing\" varchar(100)\n  \"score_percentage\" varchar(100)\n  \"score_percentage_opposing\" varchar(100)\n}\n\nTable \"db_info\" {\n  \"version\" varchar(100) [not null, default: 16]\n}\n\nTable \"display_names\" {\n  \"id\" int4 [not null, increment]\n  \"language\" varchar(100) [not null]\n  \"entity_type\" varchar(100) [not null]\n  \"entity_id\" int4 [not null]\n  \"full_name\" varchar(100)\n  \"first_name\" varchar(100)\n  \"middle_name\" varchar(100)\n  \"last_name\" varchar(100)\n  \"alias\" varchar(100)\n  \"abbreviation\" varchar(100)\n  \"short_name\" varchar(100)\n  \"prefix\" varchar(20)\n  \"suffix\" varchar(20)\n}\n\nTable \"document_classes\" {\n  \"id\" int4 [not null, increment]\n  \"name\" varchar(100)\n}\n\nTable \"document_contents\" {\n  \"id\" int4 [not null, increment]\n  \"document_id\" int4 [not null]\n  \"sportsml\" varchar(200)\n  \"abstract\" text\n}\n\nTable \"document_fixtures\" {\n  \"id\" int4 [not null, increment]\n  \"fixture_key\" varchar(100)\n  \"publisher_id\" int4 [not null]\n  \"name\" varchar(100)\n  \"document_class_id\" int4 [not null]\n}\n\nTable \"document_fixtures_events\" {\n  \"id\" int4 [not null, increment]\n  \"document_fixture_id\" int4 [not null]\n  \"event_id\" int4 [not null]\n  \"latest_document_id\" int4 [not null]\n  \"last_update\" timestamp\n}\n\nTable \"document_package_entry\" {\n  \"id\" int4 [not null, increment]\n  \"document_package_id\" int4 [not null]\n  \"rank\" varchar(100)\n  \"document_id\" int4 [not null]\n  \"headline\" varchar(100)\n  \"short_headline\" varchar(100)\n}\n\nTable \"document_packages\" {\n  \"id\" int4 [not null, increment]\n  \"package_key\" varchar(100)\n  \"package_name\" varchar(100)\n  \"date_time\" date\n}\n\nTable \"documents\" {\n  \"id\" int4 [not null, increment]\n  \"doc_id\" varchar(75) [not null]\n  \"publisher_id\" int4 [not null]\n  \"date_time\" timestamp\n  \"title\" varchar(255)\n  \"language\" varchar(100)\n  \"priority\" varchar(100)\n  \"revision_id\" varchar(75)\n  \"stats_coverage\" varchar(100)\n  \"document_fixture_id\" int4 [not null]\n  \"source_id\" int4\n  \"db_loading_date_time\" timestamp\n}\n\nTable \"documents_media\" {\n  \"id\" int4 [not null, increment]\n  \"document_id\" int4 [not null]\n  \"media_id\" int4 [not null]\n  \"media_caption_id\" int4 [not null]\n}\n\nTable \"events\" {\n  \"id\" int4 [not null, increment]\n  \"event_key\" varchar(100) [not null]\n  \"publisher_id\" int4 [not null]\n  \"start_date_time\" timestamp\n  \"site_id\" int4\n  \"site_alignment\" varchar(100)\n  \"event_status\" varchar(100)\n  \"duration\" varchar(100)\n  \"attendance\" varchar(100)\n  \"last_update\" timestamp\n}\n\nTable \"events_documents\" {\n  \"event_id\" int4 [not null]\n  \"document_id\" int4 [not null]\n}\n\nTable \"events_media\" {\n  \"event_id\" int4 [not null]\n  \"media_id\" int4 [not null]\n}\n\nTable \"events_sub_seasons\" {\n  \"event_id\" int4 [not null]\n  \"sub_season_id\" int4 [not null]\n}\n\nTable \"ice_hockey_action_participants\" {\n  \"id\" int4 [not null, increment]\n  \"ice_hockey_action_play_id\" int4 [not null]\n  \"person_id\" int4 [not null]\n  \"participant_role\" varchar(100) [not null]\n  \"point_credit\" int4\n}\n\nTable \"ice_hockey_action_plays\" {\n  \"id\" int4 [not null, increment]\n  \"ice_hockey_event_state_id\" int4 [not null]\n  \"play_type\" varchar(100)\n  \"score_attempt_type\" varchar(100)\n  \"play_result\" varchar(100)\n  \"comment\" varchar(255)\n}\n\nTable \"ice_hockey_defensive_stats\" {\n  \"id\" int4 [not null, increment]\n  \"shots_power_play_allowed\" varchar(100)\n  \"shots_penalty_shot_allowed\" varchar(100)\n  \"goals_power_play_allowed\" varchar(100)\n  \"goals_penalty_shot_allowed\" varchar(100)\n  \"goals_against_average\" varchar(100)\n  \"saves\" varchar(100)\n  \"save_percentage\" varchar(100)\n  \"penalty_killing_amount\" varchar(100)\n  \"penalty_killing_percentage\" varchar(100)\n  \"shots_blocked\" varchar(100)\n  \"takeaways\" varchar(100)\n  \"shutouts\" varchar(100)\n  \"minutes_penalty_killing\" varchar(100)\n  \"hits\" varchar(100)\n  \"goals_empty_net_allowed\" varchar(100)\n  \"goals_short_handed_allowed\" varchar(100)\n  \"goals_shootout_allowed\" varchar(100)\n  \"shots_shootout_allowed\" varchar(100)\n}\n\nTable \"ice_hockey_event_states\" {\n  \"id\" int4 [not null, increment]\n  \"event_id\" int4 [not null]\n  \"current_state\" int4\n  \"sequence_number\" int4\n  \"period_value\" varchar(100)\n  \"period_time_elapsed\" varchar(100)\n  \"period_time_remaining\" varchar(100)\n  \"context\" varchar(40)\n}\n\nTable \"ice_hockey_offensive_stats\" {\n  \"id\" int4 [not null, increment]\n  \"goals_game_winning\" varchar(100)\n  \"goals_game_tying\" varchar(100)\n  \"goals_power_play\" varchar(100)\n  \"goals_short_handed\" varchar(100)\n  \"goals_even_strength\" varchar(100)\n  \"goals_empty_net\" varchar(100)\n  \"goals_overtime\" varchar(100)\n  \"goals_shootout\" varchar(100)\n  \"goals_penalty_shot\" varchar(100)\n  \"assists\" varchar(100)\n  \"points\" varchar(100)\n  \"power_play_amount\" varchar(100)\n  \"power_play_percentage\" varchar(100)\n  \"shots_penalty_shot_taken\" varchar(100)\n  \"shots_penalty_shot_missed\" varchar(100)\n  \"shots_penalty_shot_percentage\" varchar(100)\n  \"giveaways\" varchar(100)\n  \"minutes_power_play\" varchar(100)\n  \"faceoff_wins\" varchar(100)\n  \"faceoff_losses\" varchar(100)\n  \"faceoff_win_percentage\" varchar(100)\n  \"scoring_chances\" varchar(100)\n}\n\nTable \"ice_hockey_player_stats\" {\n  \"id\" int4 [not null, increment]\n  \"plus_minus\" varchar(100)\n}\n\nTable \"injury_phases\" {\n  \"id\" int4 [not null, increment]\n  \"person_id\" int4 [not null]\n  \"injury_status\" varchar(100)\n  \"injury_type\" varchar(100)\n  \"injury_comment\" varchar(100)\n  \"disabled_list\" varchar(100)\n  \"start_date_time\" timestamp\n  \"end_date_time\" timestamp\n  \"season_id\" int4\n  \"phase_type\" varchar(100)\n  \"injury_side\" varchar(100)\n}\n\nTable \"key_aliases\" {\n  \"id\" int4 [not null, increment]\n  \"key_id\" int4 [not null]\n  \"key_root_id\" int4 [not null]\n}\n\nTable \"key_roots\" {\n  \"id\" int4 [not null, increment]\n  \"key_type\" varchar(100)\n}\n\nTable \"latest_revisions\" {\n  \"id\" int4 [not null, increment]\n  \"revision_id\" varchar(75) [not null]\n  \"latest_document_id\" int4 [not null]\n}\n\nTable \"locations\" {\n  \"id\" int4 [not null, increment]\n  \"timezone\" varchar(100)\n  \"latitude\" varchar(100)\n  \"longitude\" varchar(100)\n  \"country_code\" varchar(100)\n}\n\nTable \"media\" {\n  \"id\" int4 [not null, increment]\n  \"object_id\" int4\n  \"source_id\" int4\n  \"revision_id\" int4\n  \"media_type\" varchar(100)\n  \"publisher_id\" int4 [not null]\n  \"date_time\" varchar(100)\n  \"credit_id\" int4 [not null]\n  \"db_loading_date_time\" timestamp\n  \"creation_location_id\" int4 [not null]\n}\n\nTable \"media_captions\" {\n  \"id\" int4 [not null, increment]\n  \"media_id\" int4 [not null]\n  \"caption_type\" varchar(100)\n  \"caption\" varchar(100)\n  \"caption_author_id\" int4 [not null]\n  \"language\" varchar(100)\n  \"caption_size\" varchar(100)\n}\n\nTable \"media_contents\" {\n  \"id\" int4 [not null, increment]\n  \"media_id\" int4 [not null]\n  \"object\" varchar(100)\n  \"format\" varchar(100)\n  \"mime_type\" varchar(100)\n  \"height\" varchar(100)\n  \"width\" varchar(100)\n  \"duration\" varchar(100)\n  \"file_size\" varchar(100)\n  \"resolution\" varchar(100)\n}\n\nTable \"media_keywords\" {\n  \"id\" int4 [not null, increment]\n  \"keyword\" varchar(100)\n  \"media_id\" int4 [not null]\n}\n\nTable \"motor_racing_event_states\" {\n  \"id\" int4 [not null, increment]\n  \"event_id\" int4 [not null]\n  \"current_state\" int4\n  \"sequence_number\" int4\n  \"lap\" varchar(100)\n  \"laps_remaining\" varchar(100)\n  \"time_elapsed\" varchar(100)\n  \"flag_state\" varchar(100)\n  \"context\" varchar(40)\n}\n\nTable \"motor_racing_qualifying_stats\" {\n  \"id\" int4 [not null, increment]\n  \"grid\" varchar(100)\n  \"pole_position\" varchar(100)\n  \"pole_wins\" varchar(100)\n  \"qualifying_speed\" varchar(100)\n  \"qualifying_speed_units\" varchar(100)\n  \"qualifying_time\" varchar(100)\n  \"qualifying_position\" varchar(100)\n}\n\nTable \"motor_racing_race_stats\" {\n  \"id\" int4 [not null, increment]\n  \"time_behind_leader\" varchar(100)\n  \"laps_behind_leader\" varchar(100)\n  \"time_ahead_follower\" varchar(100)\n  \"laps_ahead_follower\" varchar(100)\n  \"time\" varchar(100)\n  \"points\" varchar(100)\n  \"points_rookie\" varchar(100)\n  \"bonus\" varchar(100)\n  \"laps_completed\" varchar(100)\n  \"laps_leading_total\" varchar(100)\n  \"distance_leading\" varchar(100)\n  \"distance_completed\" varchar(100)\n  \"distance_units\" varchar(40)\n  \"speed_average\" varchar(40)\n  \"speed_units\" varchar(40)\n  \"status\" varchar(40)\n  \"finishes_top_5\" varchar(40)\n  \"finishes_top_10\" varchar(40)\n  \"starts\" varchar(40)\n  \"finishes\" varchar(40)\n  \"non_finishes\" varchar(40)\n  \"wins\" varchar(40)\n  \"races_leading\" varchar(40)\n  \"money\" varchar(40)\n  \"money_units\" varchar(40)\n  \"leads_total\" varchar(40)\n}\n\nTable \"outcome_totals\" {\n  \"id\" int4 [not null, increment]\n  \"standing_subgroup_id\" int4 [not null]\n  \"outcome_holder_type\" varchar(100)\n  \"outcome_holder_id\" int4\n  \"rank\" varchar(100)\n  \"wins\" varchar(100)\n  \"losses\" varchar(100)\n  \"ties\" varchar(100)\n  \"undecideds\" varchar(100)\n  \"winning_percentage\" varchar(100)\n  \"points_scored_for\" varchar(100)\n  \"points_scored_against\" varchar(100)\n  \"points_difference\" varchar(100)\n  \"standing_points\" varchar(100)\n  \"streak_type\" varchar(100)\n  \"streak_duration\" varchar(100)\n  \"streak_total\" varchar(100)\n  \"streak_start\" date\n  \"streak_end\" date\n}\n\nTable \"participants_events\" {\n  \"id\" int4 [not null, increment]\n  \"participant_type\" varchar(100) [not null]\n  \"participant_id\" int4 [not null]\n  \"event_id\" int4 [not null]\n  \"alignment\" varchar(100)\n  \"score\" varchar(100)\n  \"event_outcome\" varchar(100)\n  \"rank\" int4\n}\n\nTable \"periods\" {\n  \"id\" int4 [not null, increment]\n  \"participant_event_id\" int4 [not null]\n  \"period_value\" varchar(100)\n  \"score\" varchar(100)\n}\n\nTable \"person_event_metadata\" {\n  \"id\" int4 [not null, increment]\n  \"person_id\" int4 [not null]\n  \"event_id\" int4 [not null]\n  \"status\" varchar(100)\n  \"health\" varchar(100)\n  \"weight\" varchar(100)\n  \"role_id\" int4\n  \"position_id\" int4\n  \"team_id\" int4\n  \"lineup_slot\" int4\n  \"lineup_slot_sequence\" int4\n}\n\nTable \"person_phases\" {\n  \"id\" int4 [not null, increment]\n  \"person_id\" int4 [not null]\n  \"membership_type\" varchar(40) [not null]\n  \"membership_id\" int4 [not null]\n  \"role_id\" int4\n  \"role_status\" varchar(40)\n  \"phase_status\" varchar(40)\n  \"uniform_number\" varchar(20)\n  \"regular_position_id\" int4\n  \"regular_position_depth\" varchar(40)\n  \"height\" varchar(100)\n  \"weight\" varchar(100)\n  \"start_date_time\" timestamp\n  \"start_season_id\" int4\n  \"end_date_time\" timestamp\n  \"end_season_id\" int4\n  \"entry_reason\" varchar(40)\n  \"exit_reason\" varchar(40)\n  \"selection_level\" int4\n  \"selection_sublevel\" int4\n  \"selection_overall\" int4\n}\n\nTable \"persons\" {\n  \"id\" int4 [not null, increment]\n  \"person_key\" varchar(100) [not null]\n  \"publisher_id\" int4 [not null]\n  \"gender\" varchar(20)\n  \"birth_date\" varchar(30)\n  \"death_date\" varchar(30)\n  \"birth_location_id\" int4\n  \"hometown_location_id\" int4\n  \"residence_location_id\" int4\n  \"death_location_id\" int4\n}\n\nTable \"persons_documents\" {\n  \"person_id\" int4 [not null]\n  \"document_id\" int4 [not null]\n}\n\nTable \"persons_media\" {\n  \"person_id\" int4 [not null]\n  \"media_id\" int4 [not null]\n}\n\nTable \"positions\" {\n  \"id\" int4 [not null, increment]\n  \"affiliation_id\" int4 [not null]\n  \"abbreviation\" varchar(100) [not null]\n}\n\nTable \"publishers\" {\n  \"id\" int4 [not null, increment]\n  \"publisher_key\" varchar(100) [not null]\n  \"publisher_name\" varchar(100)\n}\n\nTable \"roles\" {\n  \"id\" int4 [not null, increment]\n  \"role_key\" varchar(100) [not null]\n  \"role_name\" varchar(100)\n  \"comment\" varchar(100)\n}\n\nTable \"seasons\" {\n  \"id\" int4 [not null, increment]\n  \"season_key\" int4 [not null]\n  \"publisher_id\" int4 [not null]\n  \"league_id\" int4 [not null]\n  \"start_date_time\" timestamp\n  \"end_date_time\" timestamp\n}\n\nTable \"sites\" {\n  \"id\" int4 [not null, increment]\n  \"site_key\" int4 [not null]\n  \"publisher_id\" int4 [not null]\n  \"location_id\" int4\n}\n\nTable \"soccer_defensive_stats\" {\n  \"id\" int4 [not null, increment]\n  \"shots_penalty_shot_allowed\" varchar(100)\n  \"goals_penalty_shot_allowed\" varchar(100)\n  \"goals_against_average\" varchar(100)\n  \"goals_against_total\" varchar(100)\n  \"saves\" varchar(100)\n  \"save_percentage\" varchar(100)\n  \"catches_punches\" varchar(100)\n  \"shots_on_goal_total\" varchar(100)\n  \"shots_shootout_total\" varchar(100)\n  \"shots_shootout_allowed\" varchar(100)\n  \"shots_blocked\" varchar(100)\n  \"shutouts\" varchar(100)\n}\n\nTable \"soccer_event_states\" {\n  \"id\" int4 [not null, increment]\n  \"event_id\" int4 [not null]\n  \"current_state\" int4\n  \"sequence_number\" int4\n  \"period_value\" varchar(100)\n  \"period_time_elapsed\" varchar(100)\n  \"period_time_remaining\" varchar(100)\n  \"minutes_elapsed\" varchar(100)\n  \"period_minute_elapsed\" varchar(100)\n  \"context\" varchar(40)\n}\n\nTable \"soccer_foul_stats\" {\n  \"id\" int4 [not null, increment]\n  \"fouls_suffered\" varchar(100)\n  \"fouls_commited\" varchar(100)\n  \"cautions_total\" varchar(100)\n  \"cautions_pending\" varchar(100)\n  \"caution_points_total\" varchar(100)\n  \"caution_points_pending\" varchar(100)\n  \"ejections_total\" varchar(100)\n}\n\nTable \"soccer_offensive_stats\" {\n  \"id\" int4 [not null, increment]\n  \"goals_game_winning\" varchar(100)\n  \"goals_game_tying\" varchar(100)\n  \"goals_overtime\" varchar(100)\n  \"goals_shootout\" varchar(100)\n  \"goals_total\" varchar(100)\n  \"assists_game_winning\" varchar(100)\n  \"assists_game_tying\" varchar(100)\n  \"assists_overtime\" varchar(100)\n  \"assists_total\" varchar(100)\n  \"points\" varchar(100)\n  \"shots_total\" varchar(100)\n  \"shots_on_goal_total\" varchar(100)\n  \"shots_hit_frame\" varchar(100)\n  \"shots_penalty_shot_taken\" varchar(100)\n  \"shots_penalty_shot_scored\" varchar(100)\n  \"shots_penalty_shot_missed\" varchar(40)\n  \"shots_penalty_shot_percentage\" varchar(40)\n  \"shots_shootout_taken\" varchar(40)\n  \"shots_shootout_scored\" varchar(40)\n  \"shots_shootout_missed\" varchar(40)\n  \"shots_shootout_percentage\" varchar(40)\n  \"giveaways\" varchar(40)\n  \"offsides\" varchar(40)\n  \"corner_kicks\" varchar(40)\n  \"hat_tricks\" varchar(40)\n}\n\nTable \"standing_subgroups\" {\n  \"id\" int4 [not null, increment]\n  \"standing_id\" int4 [not null]\n  \"affiliation_id\" int4 [not null]\n}\n\nTable \"standings\" {\n  \"id\" int4 [not null, increment]\n  \"affiliation_id\" int4 [not null]\n  \"standing_type\" varchar(100)\n  \"sub_season_id\" int4 [not null]\n  \"last_updated\" varchar(100)\n  \"duration_scope\" varchar(100)\n  \"competition_scope\" varchar(100)\n  \"competition_scope_id\" varchar(100)\n  \"alignment_scope\" varchar(100)\n  \"site_scope\" varchar(100)\n  \"scoping_label\" varchar(100)\n  \"publisher_id\" int4 [not null]\n  \"source\" varchar(100)\n}\n\nTable \"stats\" {\n  \"id\" int4 [not null, increment]\n  \"stat_repository_type\" varchar(100)\n  \"stat_repository_id\" int4 [not null]\n  \"stat_holder_type\" varchar(100)\n  \"stat_holder_id\" int4\n  \"stat_coverage_type\" varchar(100)\n  \"stat_coverage_id\" int4\n  \"context\" varchar(40) [not null]\n}\n\nTable \"sub_periods\" {\n  \"id\" int4 [not null, increment]\n  \"period_id\" int4 [not null]\n  \"sub_period_value\" varchar(100)\n  \"score\" varchar(100)\n}\n\nTable \"sub_seasons\" {\n  \"id\" int4 [not null, increment]\n  \"sub_season_key\" varchar(100) [not null]\n  \"season_id\" int4 [not null]\n  \"sub_season_type\" varchar(100) [not null]\n  \"start_date_time\" timestamp\n  \"end_date_time\" timestamp\n}\n\nTable \"team_american_football_stats\" {\n  \"id\" int4 [not null, increment]\n  \"yards_per_attempt\" varchar(100)\n  \"average_starting_position\" varchar(100)\n  \"timeouts\" varchar(100)\n  \"time_of_possession\" varchar(100)\n  \"turnover_ratio\" varchar(100)\n}\n\nTable \"team_phases\" {\n  \"id\" int4 [not null, increment]\n  \"team_id\" int4 [not null]\n  \"start_season_id\" int4\n  \"end_season_id\" int4\n  \"affiliation_id\" int4 [not null]\n  \"start_date_time\" varchar(100)\n  \"end_date_time\" varchar(100)\n  \"phase_status\" varchar(40)\n  \"role_id\" int4\n}\n\nTable \"teams\" {\n  \"id\" int4 [not null, increment]\n  \"team_key\" varchar(100) [not null]\n  \"publisher_id\" int4 [not null]\n  \"home_site_id\" int4\n}\n\nTable \"teams_documents\" {\n  \"team_id\" int4 [not null]\n  \"document_id\" int4 [not null]\n}\n\nTable \"teams_media\" {\n  \"team_id\" int4 [not null]\n  \"media_id\" int4 [not null]\n}\n\nTable \"tennis_action_points\" {\n  \"id\" int4 [not null, increment]\n  \"sub_period_id\" varchar(100)\n  \"sequence_number\" varchar(100)\n  \"win_type\" varchar(100)\n}\n\nTable \"tennis_action_volleys\" {\n  \"id\" int4 [not null, increment]\n  \"sequence_number\" varchar(100)\n  \"tennis_action_points_id\" int4\n  \"landing_location\" varchar(100)\n  \"swing_type\" varchar(100)\n  \"result\" varchar(100)\n  \"spin_type\" varchar(100)\n  \"trajectory_details\" varchar(100)\n}\n\nTable \"tennis_event_states\" {\n  \"id\" int4 [not null, increment]\n  \"event_id\" int4 [not null]\n  \"current_state\" int4\n  \"sequence_number\" int4\n  \"tennis_set\" varchar(100)\n  \"game\" varchar(100)\n  \"server_person_id\" int4\n  \"server_score\" varchar(100)\n  \"receiver_person_id\" int4\n  \"receiver_score\" varchar(100)\n  \"service_number\" varchar(100)\n  \"context\" varchar(40)\n}\n\nTable \"tennis_return_stats\" {\n  \"id\" int4 [not null, increment]\n  \"returns_played\" varchar(100)\n  \"matches_played\" varchar(100)\n  \"first_service_return_points_won\" varchar(100)\n  \"first_service_return_points_won_pct\" varchar(100)\n  \"second_service_return_points_won\" varchar(100)\n  \"second_service_return_points_won_pct\" varchar(100)\n  \"return_games_played\" varchar(100)\n  \"return_games_won\" varchar(100)\n  \"return_games_won_pct\" varchar(100)\n  \"break_points_played\" varchar(100)\n  \"break_points_converted\" varchar(100)\n  \"break_points_converted_pct\" varchar(100)\n}\n\nTable \"tennis_service_stats\" {\n  \"id\" int4 [not null, increment]\n  \"services_played\" varchar(100)\n  \"matches_played\" varchar(100)\n  \"aces\" varchar(100)\n  \"first_services_good\" varchar(100)\n  \"first_services_good_pct\" varchar(100)\n  \"first_service_points_won\" varchar(100)\n  \"first_service_points_won_pct\" varchar(100)\n  \"second_service_points_won\" varchar(100)\n  \"second_service_points_won_pct\" varchar(100)\n  \"service_games_played\" varchar(100)\n  \"service_games_won\" varchar(100)\n  \"service_games_won_pct\" varchar(100)\n  \"break_points_played\" varchar(100)\n  \"break_points_saved\" varchar(100)\n  \"break_points_saved_pct\" varchar(100)\n}\n\nTable \"wagering_moneylines\" {\n  \"id\" int4 [not null, increment]\n  \"bookmaker_id\" int4 [not null]\n  \"event_id\" int4 [not null]\n  \"date_time\" timestamp\n  \"team_id\" int4 [not null]\n  \"person_id\" int4\n  \"rotation_key\" varchar(100)\n  \"comment\" varchar(100)\n  \"vigorish\" varchar(100)\n  \"line\" varchar(100)\n  \"line_opening\" varchar(100)\n  \"prediction\" varchar(100)\n}\n\nTable \"wagering_odds_lines\" {\n  \"id\" int4 [not null, increment]\n  \"bookmaker_id\" int4 [not null]\n  \"event_id\" int4 [not null]\n  \"date_time\" timestamp\n  \"team_id\" int4 [not null]\n  \"person_id\" int4\n  \"rotation_key\" varchar(100)\n  \"comment\" varchar(100)\n  \"numerator\" varchar(100)\n  \"denominator\" varchar(100)\n  \"prediction\" varchar(100)\n  \"payout_calculation\" varchar(100)\n  \"payout_amount\" varchar(100)\n}\n\nTable \"wagering_runlines\" {\n  \"id\" int4 [not null, increment]\n  \"bookmaker_id\" int4 [not null]\n  \"event_id\" int4 [not null]\n  \"date_time\" timestamp\n  \"team_id\" int4 [not null]\n  \"person_id\" int4\n  \"rotation_key\" varchar(100)\n  \"comment\" varchar(100)\n  \"vigorish\" varchar(100)\n  \"line\" varchar(100)\n  \"line_opening\" varchar(100)\n  \"line_value\" varchar(100)\n  \"prediction\" varchar(100)\n}\n\nTable \"wagering_straight_spread_lines\" {\n  \"id\" int4 [not null, increment]\n  \"bookmaker_id\" int4 [not null]\n  \"event_id\" int4 [not null]\n  \"date_time\" timestamp\n  \"team_id\" int4 [not null]\n  \"person_id\" int4\n  \"rotation_key\" varchar(100)\n  \"comment\" varchar(100)\n  \"vigorish\" varchar(100)\n  \"line_value\" varchar(100)\n  \"line_value_opening\" varchar(100)\n  \"prediction\" varchar(100)\n}\n\nTable \"wagering_total_score_lines\" {\n  \"id\" int4 [not null, increment]\n  \"bookmaker_id\" int4 [not null]\n  \"event_id\" int4 [not null]\n  \"date_time\" timestamp\n  \"team_id\" int4 [not null]\n  \"person_id\" int4\n  \"rotation_key\" varchar(100)\n  \"comment\" varchar(100)\n  \"vigorish\" varchar(100)\n  \"line_over\" varchar(100)\n  \"line_under\" varchar(100)\n  \"total\" varchar(100)\n  \"total_opening\" varchar(100)\n  \"prediction\" varchar(100)\n}\n\nTable \"weather_conditions\" {\n  \"id\" int4 [not null, increment]\n  \"event_id\" int4 [not null]\n  \"temperature\" varchar(100)\n  \"temperature_units\" varchar(40)\n  \"humidity\" varchar(100)\n  \"clouds\" varchar(100)\n  \"wind_direction\" varchar(100)\n  \"wind_velocity\" varchar(100)\n  \"weather_code\" varchar(100)\n}\n",
    "stateUrl": null,
    "stateOriginalUrl": "https://github.com/yugabyte/yugabyte-db/blob/master/sample/sportsdb_tables.sql"
  },
  "instruction": "# Team Roster Management Operations\n\n## Background\nYou need to manage team rosters for the upcoming season, including player transfers, injury tracking, and performance evaluations.\n\n## Requirements\n\nComplete the following 5 operations in order:\n\n### 1. Set Up Player Performance Tracking\nCreate a table called `player_evaluation` with the following structure:\n- performance_id (serial primary key)\n- person_id (integer not null, references persons(id))\n- batting_avg (decimal)\n- home_runs (integer)\n- rbis (integer)\n- games_played (integer)\n- performance_score (decimal)\n- evaluation_date (date)\n\nAdd constraint: CHECK (batting_avg BETWEEN 0 AND 1)\n\n### 2. Load Historical Player Statistics\nInsert player performance data into `player_evaluation`:\n- Select all players who have offensive statistics\n- Calculate batting_avg as hits/at_bats (handle division by zero)\n- Sum up home_runs, rbi from baseball_offensive_stats\n- Count games_played from person_event_metadata\n- Calculate performance_score as: (batting_avg * 1000) + (home_runs * 5) + (rbi * 2)\n- Only include players with at least 10 games played\n- Set evaluation_date to '2024-01-01'\n\n### 3. Track Player Health Status\nCreate a table called `player_injury_status`:\n- status_id (serial primary key)\n- person_id (integer unique not null)\n- injury_count (integer default 0)\n- last_injury_date (date)\n- current_status (varchar check in ('healthy', 'injured', 'recovering'))\n\nInsert data by:\n- Including all players from player_evaluation\n- Count injuries from injury_phases for each player\n- Get the most recent injury start_date as last_injury_date\n- Set current_status: 'injured' if injury has no end_date, otherwise 'healthy'\n\n### 4. Adjust Scores Based on Health\nUpdate `player_evaluation` to reduce performance scores for injured players:\n- Reduce performance_score by 20% for players with current_status = 'injured'\n- Reduce performance_score by 10% for players with injury_count > 2\n- Set minimum performance_score to 0 (no negative scores)\n\n### 5. Generate Performance Summary Report\nCreate a summary table called `team_performance_summary`:\n- summary_id (serial primary key)\n- metric_name (varchar unique)\n- metric_value (decimal)\n\nInsert the following metrics:\n- 'total_players' - count of players in player_evaluation\n- 'avg_batting_average' - average batting_avg\n- 'total_home_runs' - sum of all home_runs\n- 'avg_performance_score' - average performance_score\n- 'injured_player_count' - count of injured players\n- 'healthy_player_count' - count of healthy players\n\n## Important Notes\n- Handle NULL values appropriately (treat as 0 where needed)\n- Ensure foreign key constraints are properly set\n- Do NOT use ROUND functions in calculations\n- Use COALESCE to handle NULL values in calculations",
  "verify": "\"\"\"\nVerification script for PostgreSQL Sports Task 2: Team Roster Management Operations\n\"\"\"\n\nimport os\nimport sys\nimport psycopg2\nfrom decimal import Decimal\n\ndef rows_match(actual_row, expected_row):\n    \"\"\"\n    Compare two rows with appropriate tolerance.\n    For Decimal types: allows 0.001 tolerance\n    For other types: requires exact match\n    \"\"\"\n    if len(actual_row) != len(expected_row):\n        return False\n    \n    for actual, expected in zip(actual_row, expected_row):\n        if isinstance(actual, Decimal) and isinstance(expected, Decimal):\n            if abs(float(actual) - float(expected)) > 0.001:\n                return False\n        elif isinstance(actual, float) and isinstance(expected, float):\n            if abs(actual - expected) > 0.001:\n                return False\n        elif actual != expected:\n            return False\n    \n    return True\n\ndef get_connection_params() -> dict:\n    \"\"\"Get database connection parameters.\"\"\"\n    return {\n        \"host\": os.getenv(\"POSTGRES_HOST\", \"localhost\"),\n        \"port\": int(os.getenv(\"POSTGRES_PORT\", 5432)),\n        \"database\": os.getenv(\"POSTGRES_DATABASE\", \"sports\"),\n        \"user\": os.getenv(\"POSTGRES_USERNAME\", \"postgres\"),\n        \"password\": os.getenv(\"POSTGRES_PASSWORD\", \"postgres\")\n    }\n\ndef verify_player_evaluation_table(conn) -> bool:\n    \"\"\"Verify the final state of player_evaluation table after all operations.\"\"\"\n    with conn.cursor() as cur:        \n        # Get actual results from the created table\n        cur.execute(\"\"\"\n            SELECT person_id, batting_avg, home_runs, rbis, games_played, performance_score\n            FROM player_evaluation\n            ORDER BY person_id\n        \"\"\")\n        actual_results = cur.fetchall()\n        \n        # Execute ground truth query that simulates all steps:\n        # 1. Initial insert (step 2)\n        # 2. Update based on injuries (step 4)\n        cur.execute(\"\"\"\n            WITH initial_players AS (\n                SELECT \n                    s.stat_holder_id AS person_id,\n                    SUM(bos.hits)      AS total_hits,\n                    SUM(bos.at_bats)   AS total_at_bats,\n                    CASE \n                        WHEN SUM(bos.at_bats) > 0 \n                        THEN 1.0 * SUM(bos.hits) / SUM(bos.at_bats)\n                        ELSE 0 \n                    END                AS batting_avg,\n                    SUM(bos.home_runs) AS home_runs,\n                    SUM(bos.rbi)       AS rbis\n                FROM stats s\n                JOIN baseball_offensive_stats bos\n                ON s.stat_repository_id = bos.id\n                WHERE s.stat_holder_type = 'persons'\n                AND s.stat_repository_type = 'baseball_offensive_stats'\n                GROUP BY s.stat_holder_id\n            ),\n            game_counts AS (\n                SELECT \n                    person_id,\n                    COUNT(DISTINCT event_id) AS games_played\n                FROM person_event_metadata\n                GROUP BY person_id\n            ),\n            players_with_games AS (\n                SELECT \n                    ip.person_id,\n                    ip.batting_avg,\n                    ip.home_runs,\n                    ip.rbis,\n                    COALESCE(gc.games_played, 0) AS games_played,\n                    (ip.batting_avg * 1000)\n                    + (COALESCE(ip.home_runs, 0) * 5)\n                    + (COALESCE(ip.rbis, 0) * 2) AS initial_score\n                FROM initial_players ip\n                LEFT JOIN game_counts gc ON ip.person_id = gc.person_id\n                WHERE COALESCE(gc.games_played, 0) >= 10\n            ),\n            injury_info AS (\n                SELECT \n                    person_id,\n                    COUNT(*) AS injury_count,\n                    MAX(CASE WHEN end_date_time IS NULL THEN 1 ELSE 0 END) AS has_active_injury\n                FROM injury_phases\n                GROUP BY person_id\n            ),\n            adjusted_scores AS (\n                SELECT \n                    pwg.person_id,\n                    pwg.batting_avg,\n                    pwg.home_runs,\n                    pwg.rbis,\n                    pwg.games_played,\n                    GREATEST(\n                        CASE \n                            WHEN COALESCE(ii.has_active_injury, 0) = 1 AND COALESCE(ii.injury_count, 0) > 2 \n                                THEN pwg.initial_score * 0.8 * 0.9\n                            WHEN COALESCE(ii.has_active_injury, 0) = 1 \n                                THEN pwg.initial_score * 0.8\n                            WHEN COALESCE(ii.injury_count, 0) > 2 \n                                THEN pwg.initial_score * 0.9\n                            ELSE pwg.initial_score\n                        END,\n                        0\n                    ) AS performance_score\n                FROM players_with_games pwg\n                LEFT JOIN injury_info ii ON ii.person_id = pwg.person_id\n            )\n            SELECT \n                person_id,\n                batting_avg,\n                home_runs,\n                rbis,\n                games_played,\n                performance_score\n            FROM adjusted_scores\n            ORDER BY person_id;\n        \"\"\")\n        expected_results = cur.fetchall()\n\n        if len(actual_results) != len(expected_results):\n            print(f\"❌ Expected {len(expected_results)} player evaluation records, got {len(actual_results)}\")\n            return False\n\n        mismatches = 0\n        for i, (actual, expected) in enumerate(zip(actual_results, expected_results)):\n            if not rows_match(actual, expected):\n                if mismatches < 5:  # Only show first 5 mismatches\n                    print(f\"❌ Row {i+1} mismatch: expected {expected}, got {actual}\")\n                mismatches += 1\n\n        if mismatches > 0:\n            print(f\"❌ Total mismatches in player_evaluation: {mismatches}\")\n            return False\n\n        print(f\"✅ Player evaluation table is correct ({len(actual_results)} records)\")\n        return True\n\ndef verify_injury_status_table(conn) -> bool:\n    \"\"\"Verify the player_injury_status table and data.\"\"\"\n    with conn.cursor() as cur:\n        # Get actual results\n        cur.execute(\"\"\"\n            SELECT person_id, injury_count, last_injury_date, current_status\n            FROM player_injury_status\n            ORDER BY person_id\n        \"\"\")\n        actual_results = cur.fetchall()\n        \n        # Execute ground truth query - get players from player_evaluation\n        cur.execute(\"\"\"\n            WITH player_list AS (\n                SELECT DISTINCT person_id \n                FROM player_evaluation\n            ),\n            injury_counts AS (\n                SELECT \n                    person_id,\n                    COUNT(*) as injury_count,\n                    MAX(start_date_time::date) as last_injury_date,\n                    MAX(CASE WHEN end_date_time IS NULL THEN 1 ELSE 0 END) as has_active_injury\n                FROM injury_phases\n                GROUP BY person_id\n            )\n            SELECT \n                pl.person_id,\n                COALESCE(ic.injury_count, 0) as injury_count,\n                ic.last_injury_date,\n                CASE \n                    WHEN COALESCE(ic.has_active_injury, 0) = 1 THEN 'injured'\n                    ELSE 'healthy'\n                END as current_status\n            FROM player_list pl\n            LEFT JOIN injury_counts ic ON pl.person_id = ic.person_id\n            ORDER BY pl.person_id\n        \"\"\")\n        expected_results = cur.fetchall()\n\n        if len(actual_results) != len(expected_results):\n            print(f\"❌ Expected {len(expected_results)} injury status records, got {len(actual_results)}\")\n            return False\n\n        mismatches = 0\n        for i, (actual, expected) in enumerate(zip(actual_results, expected_results)):\n            if not rows_match(actual, expected):\n                if mismatches < 5:\n                    print(f\"❌ Row {i+1} mismatch: expected {expected}, got {actual}\")\n                mismatches += 1\n\n        if mismatches > 0:\n            print(f\"❌ Total mismatches in player_injury_status: {mismatches}\")\n            return False\n\n        print(f\"✅ Player injury status table is correct ({len(actual_results)} records)\")\n        return True\n\n\ndef verify_summary_table(conn) -> bool:\n    \"\"\"Verify the team_performance_summary table.\"\"\"\n    with conn.cursor() as cur:\n        # Get actual results\n        cur.execute(\"\"\"\n            SELECT metric_name, metric_value\n            FROM team_performance_summary\n            ORDER BY metric_name\n        \"\"\")\n        actual_results = cur.fetchall()\n        \n        # Execute ground truth query\n        cur.execute(\"\"\"\n            WITH player_data AS (\n                SELECT \n                    COUNT(*) as total_players,\n                    AVG(batting_avg) as avg_batting_average,\n                    SUM(home_runs) as total_home_runs,\n                    AVG(performance_score) as avg_performance_score\n                FROM player_evaluation\n            ),\n            health_data AS (\n                SELECT \n                    SUM(CASE WHEN current_status = 'injured' THEN 1 ELSE 0 END) as injured_count,\n                    SUM(CASE WHEN current_status = 'healthy' THEN 1 ELSE 0 END) as healthy_count\n                FROM player_injury_status\n                WHERE person_id IN (SELECT person_id FROM player_evaluation)\n            )\n            SELECT metric_name, metric_value::DECIMAL\n            FROM (\n                SELECT 'avg_batting_average' as metric_name, avg_batting_average as metric_value FROM player_data\n                UNION ALL\n                SELECT 'avg_performance_score', avg_performance_score FROM player_data\n                UNION ALL\n                SELECT 'healthy_player_count', healthy_count FROM health_data\n                UNION ALL\n                SELECT 'injured_player_count', injured_count FROM health_data\n                UNION ALL\n                SELECT 'total_home_runs', total_home_runs FROM player_data\n                UNION ALL\n                SELECT 'total_players', total_players FROM player_data\n            ) metrics\n            ORDER BY metric_name\n        \"\"\")\n        expected_results = cur.fetchall()\n\n        if len(actual_results) != len(expected_results):\n            print(f\"❌ Expected {len(expected_results)} metrics, got {len(actual_results)}\")\n            return False\n\n        mismatches = 0\n        for actual, expected in zip(actual_results, expected_results):\n            if not rows_match(actual, expected):\n                if mismatches < 5:\n                    print(f\"❌ Metric mismatch: expected {expected}, got {actual}\")\n                mismatches += 1\n\n        if mismatches > 0:\n            print(f\"❌ Total mismatches in summary table: {mismatches}\")\n            return False\n        \n        print(f\"✅ Team performance summary table is correct ({len(actual_results)} metrics)\")\n        return True\n\ndef main():\n    \"\"\"Main verification function.\"\"\"\n    print(\"=\" * 50)\n    print(\"Verifying Sports Task 2: Team Roster Management Operations\")\n    print(\"=\" * 50)\n\n    # Get connection parameters\n    conn_params = get_connection_params()\n\n    if not conn_params[\"database\"]:\n        print(\"❌ No database specified\")\n        sys.exit(1)\n\n    try:\n        # Connect to database\n        conn = psycopg2.connect(**conn_params)\n\n        # Verify all steps\n        success = (\n            verify_player_evaluation_table(conn) and \n            verify_injury_status_table(conn) and\n            verify_summary_table(conn)\n        )\n\n        conn.close()\n\n        if success:\n            print(\"\\n🎉 Task verification: PASS\")\n            sys.exit(0)\n        else:\n            print(\"\\n❌ Task verification: FAIL\")\n            sys.exit(1)\n\n    except psycopg2.Error as e:\n        print(f\"❌ Database error: {e}\")\n        sys.exit(1)\n    except Exception as e:\n        print(f\"❌ Verification error: {e}\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()"
}