{
  "task_id": "skills_development_tracker",
  "task_name": "Skills Development Tracker",
  "category_id": "online_resume",
  "category_name": "Online Resume",
  "description": "Create a comprehensive skills audit system with development tracking for skills below 70% proficiency.",
  "author": "Xiangyan Liu",
  "created_at": "2025-07-27",
  "difficulty": "L3",
  "tags": [
    "database manipulation",
    "cross-reference linking",
    "conditional filtering",
    "data aggregation",
    "template population",
    "visual formatting"
  ],
  "mcp": [
    "notion"
  ],
  "metadata": {
    "ori_template_url": "https://painted-tennis-ebc.notion.site/Online-Resume-23181626b6d781159faaeb5eadaf612e",
    "gt_page_url": "https://www.notion.so/Online-Resume-Skills-Development-Tracker-2442b7e8cebd8001add5f216391465c1"
  },
  "instruction": "Create a comprehensive skills audit system by performing the following tasks:\n\n**Task Requirements:**\n1. Create a new database named \"Skills Development Tracker\" as a child database in the main resume page with the following properties:\n   - Name (title property)\n   - Current Skill (relation to Skills database)\n   - Current Proficiency (rollup from related skill's \"Skill Level\" property)\n   - Target Proficiency (number property with format \"percent\")\n   - Gap (formula: Target Proficiency - Current Proficiency)\n   - Learning Resources (rich text property)\n   - Progress Notes (rich text property)\n\n2. Populate the Skills Development Tracker database with entries for all skills that have a proficiency level below 70% (0.7):\n   - For each qualifying skill, create an entry with:\n     - Name: \"[Skill Name] Development Plan\"\n     - Link to the corresponding skill in Skills database\n     - Target Proficiency: Set to Current + 25% (capped at 95%)\n     - Learning Resources: \"Online courses and practice projects\"\n     - Progress Notes: \"Initial assessment completed\"\n\n3. Create a callout block immediately after the Skills section (after the Skills database) with:\n   - Background color: blue_background\n   - Icon: ðŸŽ¯ (target emoji)\n   - Content: \"Focus Areas: [3 skills with lowest current proficiency]\"",
  "verify": "import sys\nfrom notion_client import Client\nfrom tasks.utils import notion_utils\n\n\ndef verify(notion: Client, main_id: str = None) -> bool:\n    \"\"\"\n    Verifies that the Skills Development Tracker database and callout block were created correctly.\n    \"\"\"\n    page_id = None\n    if main_id:\n        found_id, object_type = notion_utils.find_page_or_database_by_id(\n            notion, main_id\n        )\n        if found_id and object_type == \"page\":\n            page_id = found_id\n\n    if not page_id:\n        page_id = notion_utils.find_page(notion, \"New Online Resume\")\n    if not page_id:\n        print(\"Error: Page 'New Online Resume' not found.\", file=sys.stderr)\n        return False\n\n    # Step 1: Verify Skills Development Tracker database exists\n    tracker_db_id = notion_utils.find_database_in_block(\n        notion, page_id, \"Skills Development Tracker\"\n    )\n    if not tracker_db_id:\n        print(\n            \"Error: Database 'Skills Development Tracker' not found.\", file=sys.stderr\n        )\n        return False\n\n    # Step 2: Verify database schema\n    try:\n        db_info = notion.databases.retrieve(database_id=tracker_db_id)\n        properties = db_info.get(\"properties\", {})\n\n        # Check required properties\n        required_props = {\n            \"Name\": \"title\",\n            \"Current Skill\": \"relation\",\n            \"Current Proficiency\": \"rollup\",\n            \"Target Proficiency\": \"number\",\n            \"Gap\": \"formula\",\n            \"Learning Resources\": \"rich_text\",\n            \"Progress Notes\": \"rich_text\",\n        }\n\n        for prop_name, expected_type in required_props.items():\n            if prop_name not in properties:\n                print(\n                    f\"Error: Property '{prop_name}' not found in database.\",\n                    file=sys.stderr,\n                )\n                return False\n            if properties[prop_name][\"type\"] != expected_type:\n                print(\n                    f\"Error: Property '{prop_name}' has incorrect type. Expected '{expected_type}', got '{properties[prop_name]['type']}'.\",\n                    file=sys.stderr,\n                )\n                return False\n\n        # Verify Target Proficiency is percent format\n        if (\n            properties[\"Target Proficiency\"].get(\"number\", {}).get(\"format\")\n            != \"percent\"\n        ):\n            print(\n                \"Error: Target Proficiency should have 'percent' format.\",\n                file=sys.stderr,\n            )\n            return False\n\n    except Exception as e:\n        print(f\"Error retrieving database info: {e}\", file=sys.stderr)\n        return False\n\n    # Step 3: Get Skills database to check entries\n    skills_db_id = notion_utils.find_database_in_block(notion, page_id, \"Skills\")\n    if not skills_db_id:\n        print(\"Error: Skills database not found.\", file=sys.stderr)\n        return False\n\n    # Get all skills with proficiency < 70%\n    skills_below_70 = []\n    try:\n        skills_results = notion.databases.query(database_id=skills_db_id).get(\n            \"results\", []\n        )\n        for skill in skills_results:\n            skill_level = (\n                skill.get(\"properties\", {}).get(\"Skill Level\", {}).get(\"number\", 1.0)\n            )\n            if skill_level < 0.7:\n                skill_name = (\n                    skill.get(\"properties\", {}).get(\"Skill\", {}).get(\"title\", [])\n                )\n                if skill_name:\n                    skill_name_text = skill_name[0].get(\"text\", {}).get(\"content\", \"\")\n                    skills_below_70.append(\n                        {\n                            \"name\": skill_name_text,\n                            \"id\": skill[\"id\"],\n                            \"level\": skill_level,\n                        }\n                    )\n    except Exception as e:\n        print(f\"Error querying Skills database: {e}\", file=sys.stderr)\n        return False\n\n    if not skills_below_70:\n        print(\"Warning: No skills found with proficiency below 70%.\", file=sys.stderr)\n        # This might be OK if all skills are above 70%\n\n    # Step 4: Verify entries in Skills Development Tracker\n    try:\n        tracker_results = notion.databases.query(database_id=tracker_db_id).get(\n            \"results\", []\n        )\n\n        # Check that we have entries for skills below 70%\n        if len(skills_below_70) > 0 and len(tracker_results) == 0:\n            print(\n                \"Error: No entries found in Skills Development Tracker database.\",\n                file=sys.stderr,\n            )\n            return False\n\n        # Verify each entry\n        for entry in tracker_results:\n            props = entry.get(\"properties\", {})\n\n            # Check name format\n            name_prop = props.get(\"Name\", {}).get(\"title\", [])\n            if not name_prop:\n                print(\"Error: Entry missing Name property.\", file=sys.stderr)\n                return False\n            name_text = name_prop[0].get(\"text\", {}).get(\"content\", \"\")\n            if not name_text.endswith(\" Development Plan\"):\n                print(\n                    f\"Error: Entry name '{name_text}' doesn't follow expected format.\",\n                    file=sys.stderr,\n                )\n                return False\n\n            # Check relation to Skills database\n            skill_relation = props.get(\"Current Skill\", {}).get(\"relation\", [])\n            if not skill_relation:\n                print(\n                    f\"Error: Entry '{name_text}' missing Current Skill relation.\",\n                    file=sys.stderr,\n                )\n                return False\n\n            # Check Target Proficiency (should be set)\n            target_prof = props.get(\"Target Proficiency\", {}).get(\"number\")\n            if target_prof is None:\n                print(\n                    f\"Error: Entry '{name_text}' missing Target Proficiency.\",\n                    file=sys.stderr,\n                )\n                return False\n\n            # Check Learning Resources\n            learning_resources = props.get(\"Learning Resources\", {}).get(\n                \"rich_text\", []\n            )\n            if not learning_resources:\n                print(\n                    f\"Error: Entry '{name_text}' missing Learning Resources.\",\n                    file=sys.stderr,\n                )\n                return False\n\n            # Check Progress Notes\n            progress_notes = props.get(\"Progress Notes\", {}).get(\"rich_text\", [])\n            if not progress_notes:\n                print(\n                    f\"Error: Entry '{name_text}' missing Progress Notes.\",\n                    file=sys.stderr,\n                )\n                return False\n\n    except Exception as e:\n        print(f\"Error querying Skills Development Tracker: {e}\", file=sys.stderr)\n        return False\n\n    # Step 5: Verify callout block exists after Skills section\n    all_blocks = notion_utils.get_all_blocks_recursively(notion, page_id)\n\n    # Find Skills database block\n    skills_db_block_index = None\n    for i, block in enumerate(all_blocks):\n        if (\n            block.get(\"type\") == \"child_database\"\n            and block.get(\"child_database\", {}).get(\"title\") == \"Skills\"\n        ):\n            skills_db_block_index = i\n            break\n\n    if skills_db_block_index is None:\n        print(\"Error: Could not find Skills database block.\", file=sys.stderr)\n        return False\n\n    # Look for callout block after Skills database\n    callout_found = False\n    block = all_blocks[skills_db_block_index + 1]\n    if block.get(\"type\") == \"callout\":\n        callout_data = block.get(\"callout\", {})\n\n        # Check background color\n        if callout_data.get(\"color\") != \"blue_background\":\n            print(\"Error: Could not find callout block with blue background.\")\n            return False\n\n        # Check icon\n        icon = callout_data.get(\"icon\", {})\n        if icon.get(\"type\") != \"emoji\" or icon.get(\"emoji\") != \"ðŸŽ¯\":\n            print(\"Error: Could not find callout block with ðŸŽ¯ emoji.\")\n            return False\n\n        # Check content starts with \"Focus Areas:\"\n        rich_text = callout_data.get(\"rich_text\", [])\n        if rich_text:\n            content = rich_text[0].get(\"text\", {}).get(\"content\", \"\")\n            if (\n                content.startswith(\"Focus Areas:\")\n                and \"CSS + Basic JS\" in content\n                and \"Webflow\" in content\n                and \"Rive\" in content\n            ):\n                callout_found = True\n                print(f\"Success: Found callout block with content: {content}\")\n            else:\n                print(\"Error: Could not find callout block with required text content.\")\n                return False\n\n    if not callout_found:\n        print(\n            \"Error: Could not find callout block with Focus Areas after Skills section.\",\n            file=sys.stderr,\n        )\n        return False\n\n    print(\n        \"Success: Skills Development Tracker database and callout block verified successfully.\"\n    )\n    return True\n\n\ndef main():\n    \"\"\"\n    Executes the verification process and exits with a status code.\n    \"\"\"\n    notion = notion_utils.get_notion_client()\n    main_id = sys.argv[1] if len(sys.argv) > 1 else None\n    if verify(notion, main_id):\n        sys.exit(0)\n    else:\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()\n",
  "model_results": {
    "k2": 0,
    "gpt-5": 0,
    "grok-4": 0,
    "gpt-4-1": 0,
    "gemini-2-5-flash": 0,
    "gemini-2-5-pro": 0,
    "gpt-5-mini": 0,
    "deepseek-chat": 0,
    "gpt-4-1-mini": 0,
    "claude-4-sonnet": 0,
    "gpt-5-nano": 0,
    "o3": 0
  }
}