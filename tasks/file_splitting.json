{
  "task_id": "file_splitting",
  "task_name": "File Splitting",
  "category_id": "file_context",
  "category_name": "File Context",
  "description": "Split a large text file into multiple equal-length segments for easier processing, distribution, and parallel handling of content.",
  "author": "Lingjun Chen",
  "created_at": "2025-08-08",
  "difficulty": "L3",
  "tags": [
    "content transformation"
  ],
  "mcp": [
    "filesystem"
  ],
  "meta_data": {
    "stateType": "text",
    "stateContent": "file_context/\n    ‚îú‚îÄ‚îÄ file_01.txt\n    ‚îú‚îÄ‚îÄ file_02.txt\n    ‚îú‚îÄ‚îÄ file_03.txt\n    ‚îú‚îÄ‚îÄ file_04.txt\n    ‚îú‚îÄ‚îÄ file_05.txt\n    ‚îú‚îÄ‚îÄ file_06.txt\n    ‚îú‚îÄ‚îÄ file_07.txt\n    ‚îú‚îÄ‚îÄ file_08.txt\n    ‚îú‚îÄ‚îÄ file_09.txt\n    ‚îú‚îÄ‚îÄ file_10.txt\n    ‚îú‚îÄ‚îÄ file_11.txt\n    ‚îú‚îÄ‚îÄ file_12.txt\n    ‚îú‚îÄ‚îÄ file_13.txt\n    ‚îú‚îÄ‚îÄ file_14.txt\n    ‚îú‚îÄ‚îÄ file_15.txt\n    ‚îú‚îÄ‚îÄ file_16.txt\n    ‚îú‚îÄ‚îÄ file_17.txt\n    ‚îú‚îÄ‚îÄ file_18.txt\n    ‚îú‚îÄ‚îÄ file_19.txt\n    ‚îú‚îÄ‚îÄ file_20.txt\n    ‚îî‚îÄ‚îÄ large_file.txt",
    "stateUrl": "https://storage.mcpmark.ai/filesystem/file_context.zip",
    "stateOriginalUrl": null
  },
  "instruction": "Please use FileSystem tools to finish the following task:\n\n### Task Description\n\nYou need to split a large text file into multiple smaller files with equal character counts. The task involves creating a new directory and splitting the content into exactly 10 files.\n\n### Task Objectives\n\n1. **Create a new directory** named `split` in the test directory\n2. **Split the file** `large_file.txt` into exactly 10 files with equal character counts\n3. **Name the files** as `split_01.txt`, `split_02.txt`, ..., `split_10.txt` in the `split` directory\n",
  "verify": "#!/usr/bin/env python3\n\"\"\"\nVerification script for File Splitting Task\n\"\"\"\n\nimport sys\nfrom pathlib import Path\nimport os\n\ndef get_test_directory() -> Path:\n    \"\"\"Get the test directory from FILESYSTEM_TEST_DIR env var.\"\"\"\n    test_root = os.environ.get(\"FILESYSTEM_TEST_DIR\")\n    if not test_root:\n        raise ValueError(\"FILESYSTEM_TEST_DIR environment variable is required\")\n    return Path(test_root)\n\ndef verify_split_directory_exists(test_dir: Path) -> bool:\n    \"\"\"Verify that the split directory exists.\"\"\"\n    split_dir = test_dir / \"split\"\n    \n    if not split_dir.exists():\n        print(\"‚ùå Directory 'split' not found\")\n        return False\n    \n    if not split_dir.is_dir():\n        print(\"‚ùå 'split' exists but is not a directory\")\n        return False\n    \n    print(\"‚úÖ Split directory found\")\n    return True\n\ndef verify_all_split_files_exist(test_dir: Path) -> bool:\n    \"\"\"Verify that all 10 split files exist with correct names.\"\"\"\n    split_dir = test_dir / \"split\"\n    \n    expected_files = [f\"split_{i:02d}.txt\" for i in range(1, 11)]\n    missing_files = []\n    \n    for filename in expected_files:\n        file_path = split_dir / filename\n        if not file_path.exists():\n            missing_files.append(filename)\n    \n    if missing_files:\n        print(f\"‚ùå Missing files: {missing_files}\")\n        return False\n    \n    print(\"‚úÖ All 10 split files exist with correct names\")\n    return True\n\ndef verify_equal_file_lengths(test_dir: Path) -> bool:\n    \"\"\"Verify that all split files have equal character counts.\"\"\"\n    split_dir = test_dir / \"split\"\n    \n    file_lengths = []\n    for i in range(1, 11):\n        filename = f\"split_{i:02d}.txt\"\n        file_path = split_dir / filename\n        \n        try:\n            content = file_path.read_text()\n            file_lengths.append(len(content))\n        except Exception as e:\n            print(f\"‚ùå Error reading {filename}: {e}\")\n            return False\n    \n    # Check if all lengths are equal\n    if len(set(file_lengths)) != 1:\n        print(f\"‚ùå File lengths are not equal: {file_lengths}\")\n        return False\n    \n    print(f\"‚úÖ All files have equal length: {file_lengths[0]} characters\")\n    return True\n\ndef verify_content_integrity(test_dir: Path) -> bool:\n    \"\"\"Verify that concatenated split files equal the original file.\"\"\"\n    split_dir = test_dir / \"split\"\n    original_file = test_dir / \"large_file.txt\"\n    \n    # Read original content\n    try:\n        original_content = original_file.read_text()\n    except Exception as e:\n        print(f\"‚ùå Error reading original file: {e}\")\n        return False\n    \n    # Concatenate all split files\n    concatenated_content = \"\"\n    for i in range(1, 11):\n        filename = f\"split_{i:02d}.txt\"\n        file_path = split_dir / filename\n        \n        try:\n            content = file_path.read_text()\n            concatenated_content += content\n        except Exception as e:\n            print(f\"‚ùå Error reading {filename}: {e}\")\n            return False\n    \n    # Compare content\n    if concatenated_content != original_content:\n        print(\"‚ùå Concatenated content does not match original file\")\n        print(f\"   Original length: {len(original_content)}\")\n        print(f\"   Concatenated length: {len(concatenated_content)}\")\n        return False\n    \n    print(\"‚úÖ Concatenated content matches original file exactly\")\n    return True\n\ndef verify_no_extra_files(test_dir: Path) -> bool:\n    \"\"\"Verify that no extra files exist in the split directory.\"\"\"\n    split_dir = test_dir / \"split\"\n    \n    expected_files = {f\"split_{i:02d}.txt\" for i in range(1, 11)}\n    actual_files = {f.name for f in split_dir.iterdir() if f.is_file()}\n    \n    extra_files = actual_files - expected_files\n    if extra_files:\n        print(f\"‚ùå Extra files found in split directory: {extra_files}\")\n        return False\n    \n    print(\"‚úÖ No extra files in split directory\")\n    return True\n\ndef main():\n    \"\"\"Main verification function.\"\"\"\n    test_dir = get_test_directory()\n    print(\"üîç Verifying File Splitting Task...\")\n    \n    # Define verification steps\n    verification_steps = [\n        (\"Split Directory Exists\", verify_split_directory_exists),\n        (\"All Split Files Exist\", verify_all_split_files_exist),\n        (\"Equal File Lengths\", verify_equal_file_lengths),\n        (\"Content Integrity\", verify_content_integrity),\n        (\"No Extra Files\", verify_no_extra_files),\n    ]\n    \n    # Run all verification steps\n    all_passed = True\n    for step_name, verify_func in verification_steps:\n        print(f\"\\n--- {step_name} ---\")\n        if not verify_func(test_dir):\n            all_passed = False\n    \n    # Final result\n    print(\"\\n\" + \"=\"*50)\n    if all_passed:\n        print(\"‚úÖ File splitting task completed correctly!\")\n        print(\"üéâ Task verification: PASS\")\n        sys.exit(0)\n    else:\n        print(\"‚ùå Task verification: FAIL\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()"
}