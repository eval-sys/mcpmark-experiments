{
  "task_id": "feature_commit_tracking",
  "task_name": "Feature Commit Tracking",
  "category_id": "claude-code",
  "category_name": "Claude Code",
  "description": "Research development history across branches to track when specific features were introduced and create comprehensive documentation.",
  "author": "Zijian Wu",
  "created_at": "2025-08-15",
  "difficulty": "L3",
  "tags": [
    "repository analysis",
    "release coordination"
  ],
  "mcp": [
    "github"
  ],
  "metadata": {},
  "instruction": "I need you to research the development history of the repository across multiple branches and commits, then create a comprehensive feature tracking document and submit it as a new file to the repository.\n\n**Step 1: Multi-Branch Feature Investigation**\nResearch and identify the exact commit SHAs where these specific features were introduced by analyzing commits across different branches:\n\n1. **Shell Completion Scripts**: Find when shell completion functionality was first added to the repository\n2. **CHANGELOG Version 1.0.65**: Find when the changelog was updated to include version 1.0.65 \n3. **Rust Extraction Improvements**: Find when workflow improvements for Rust code extraction were implemented\n\n**Step 2: Create Feature Tracking Documentation**\nCreate a file called `FEATURE_COMMITS.md` in the repository root with:\n\n- A \"# Feature Development Tracking\" title\n- A \"## Overview\" section explaining this tracks major feature additions across repository branches\n- A \"## Feature Commit History\" section with this exact table format:\n```markdown\n| Feature Name | Commit SHA | Author | Branch | Date | Files Changed | Commit Message |\n|-------------|------------|---------|---------|------|---------------|----------------|\n```\n\nFor each feature, populate the table with:\n- Exact commit SHA (full 40-character hash)\n- GitHub username of the commit author\n- Branch where the commit was made\n- Commit date in YYYY-MM-DD format\n- Number of files changed in that commit\n- First line of the commit message\n\n**Step 3: Commit Documentation to Repository**\nCommit the `FEATURE_COMMITS.md` file to the main branch with:\n- Commit message: \"Add feature development tracking documentation\"\n- Ensure the file is properly formatted markdown\n- Verify all commit SHAs in the table are accurate and verifiable\n\nThe verification process will check that your table contains the correct commit SHAs for each specific feature, along with accurate author, branch, and date information.",
  "verify": "import sys\nimport os\nimport requests\nfrom typing import Dict, List, Optional, Tuple\nimport base64\nimport re\nfrom dotenv import load_dotenv\n\n\ndef _get_github_api(\n    endpoint: str, headers: Dict[str, str], org: str, repo: str = \"claude-code\"\n) -> Tuple[bool, Optional[Dict]]:\n    \"\"\"Make a GET request to GitHub API and return (success, response).\"\"\"\n    url = f\"https://api.github.com/repos/{org}/{repo}/{endpoint}\"\n    try:\n        response = requests.get(url, headers=headers)\n        if response.status_code == 200:\n            return True, response.json()\n        elif response.status_code == 404:\n            return False, None\n        else:\n            print(f\"API error for {endpoint}: {response.status_code}\", file=sys.stderr)\n            return False, None\n    except Exception as e:\n        print(f\"Exception for {endpoint}: {e}\", file=sys.stderr)\n        return False, None\n\n\ndef _get_file_content(\n    file_path: str,\n    headers: Dict[str, str],\n    org: str,\n    repo: str = \"claude-code\",\n    ref: str = \"main\",\n) -> Optional[str]:\n    \"\"\"Get the content of a file from the repository.\"\"\"\n    success, result = _get_github_api(\n        f\"contents/{file_path}?ref={ref}\", headers, org, repo\n    )\n    if not success or not result:\n        return None\n\n    try:\n        content = base64.b64decode(result.get(\"content\", \"\")).decode(\"utf-8\")\n        return content\n    except Exception as e:\n        print(f\"Content decode error for {file_path}: {e}\", file=sys.stderr)\n        return None\n\n\ndef _verify_commit_exists(\n    commit_sha: str, headers: Dict[str, str], org: str, repo: str = \"claude-code\"\n) -> Tuple[bool, Optional[Dict]]:\n    \"\"\"Verify that a commit exists and return its details.\"\"\"\n    success, commit_data = _get_github_api(f\"commits/{commit_sha}\", headers, org, repo)\n    return success, commit_data\n\n\ndef _parse_feature_table(content: str) -> List[Dict]:\n    \"\"\"Parse the feature commit table from markdown content.\"\"\"\n    features = []\n\n    lines = content.split(\"\\n\")\n    in_table = False\n\n    for line in lines:\n        # Look for table header\n        if (\n            \"| Feature Name | Commit SHA | Author | Branch | Date | Files Changed | Commit Message |\"\n            in line\n        ):\n            in_table = True\n            continue\n        if in_table and line.startswith(\"|---\"):\n            continue\n\n        # Parse table rows\n        if in_table and line.startswith(\"|\"):\n            parts = [p.strip() for p in line.split(\"|\")]\n            if len(parts) >= 8:  # Should have 7 columns plus empty parts at start/end\n                feature_name = parts[1].strip()\n                commit_sha = parts[2].strip()\n                author = parts[3].strip()\n                branch = parts[4].strip()\n                date = parts[5].strip()\n                files_changed = parts[6].strip()\n                commit_message = parts[7].strip()\n\n                if feature_name and commit_sha and author and branch and date:\n                    features.append(\n                        {\n                            \"name\": feature_name,\n                            \"sha\": commit_sha,\n                            \"author\": author,\n                            \"branch\": branch,\n                            \"date\": date,\n                            \"files_changed\": files_changed,\n                            \"commit_message\": commit_message,\n                        }\n                    )\n\n        # Stop at end of table section\n        if in_table and line and not line.startswith(\"|\") and \"##\" in line:\n            break\n\n    return features\n\n\ndef verify_task() -> bool:\n    \"\"\"Verify the feature commit tracking task.\"\"\"\n    # Load environment variables from .mcp_env\n    load_dotenv(\".mcp_env\")\n\n    # Get GitHub token and org\n    github_token = os.environ.get(\"MCP_GITHUB_TOKEN\")\n    github_org = os.environ.get(\"GITHUB_EVAL_ORG\")\n\n    if not github_token:\n        print(\"Error: MCP_GITHUB_TOKEN environment variable not set\", file=sys.stderr)\n        return False\n\n    if not github_org:\n        print(\"Error: GITHUB_EVAL_ORG environment variable not set\", file=sys.stderr)\n        return False\n\n    headers = {\n        \"Authorization\": f\"Bearer {github_token}\",\n        \"Accept\": \"application/vnd.github.v3+json\",\n    }\n\n    # Expected feature commits based on exploration\n    expected_features = {\n        \"Shell Completion Scripts\": \"8a0febdd09bda32f38c351c0881784460d69997d\",\n        \"CHANGELOG Version 1.0.65\": \"94dcaca5d71ad82644ae97f3a2b0c5eb8b63eae0\",\n        \"Rust Extraction Improvements\": \"50e58affdf1bfc7d875202bc040ebe0dcfb7d332\",\n    }\n\n    # Expected authors for each commit\n    expected_authors = {\n        \"8a0febdd09bda32f38c351c0881784460d69997d\": \"gitmpr\",\n        \"94dcaca5d71ad82644ae97f3a2b0c5eb8b63eae0\": \"QwertyJack\",\n        \"50e58affdf1bfc7d875202bc040ebe0dcfb7d332\": \"alokdangre\",\n    }\n\n    # Expected commit messages for each commit\n    expected_messages = {\n        \"8a0febdd09bda32f38c351c0881784460d69997d\": \"feat: add shell completions (bash, zsh, fish)\",\n        \"94dcaca5d71ad82644ae97f3a2b0c5eb8b63eae0\": \"Merge branch 'anthropics:main' into main\",\n        \"50e58affdf1bfc7d875202bc040ebe0dcfb7d332\": \"Enhance Rust extraction and output handling in workflows\",\n    }\n\n    # Expected dates for each commit (YYYY-MM-DD format)\n    expected_dates = {\n        \"8a0febdd09bda32f38c351c0881784460d69997d\": \"2025-08-01\",\n        \"94dcaca5d71ad82644ae97f3a2b0c5eb8b63eae0\": \"2025-08-02\",\n        \"50e58affdf1bfc7d875202bc040ebe0dcfb7d332\": \"2025-08-09\",\n    }\n\n    print(\"Verifying feature commit tracking task...\")\n\n    # 1. Check if FEATURE_COMMITS.md exists in main branch\n    print(\"1. Checking if FEATURE_COMMITS.md exists...\")\n    content = _get_file_content(\"FEATURE_COMMITS.md\", headers, github_org)\n    if not content:\n        print(\"Error: FEATURE_COMMITS.md not found in main branch\", file=sys.stderr)\n        return False\n    print(\"✓ FEATURE_COMMITS.md found\")\n\n    # 2. Check required sections exist\n    print(\"2. Checking required sections...\")\n    required_sections = [\n        \"# Feature Development Tracking\",\n        \"## Overview\",\n        \"## Feature Commit History\",\n    ]\n\n    for section in required_sections:\n        if section not in content:\n            print(f\"Error: Missing required section '{section}'\", file=sys.stderr)\n            return False\n    print(\"✓ All required sections present\")\n\n    # 3. Parse and validate feature table\n    print(\"3. Parsing and validating feature table...\")\n    features = _parse_feature_table(content)\n\n    if len(features) < 3:\n        print(\n            f\"Error: Expected at least 3 features, found {len(features)}\",\n            file=sys.stderr,\n        )\n        return False\n\n    # 4. Verify each expected feature is present with correct commit SHA\n    print(\"4. Verifying feature commit SHAs...\")\n    found_features = {}\n    for feature in features:\n        found_features[feature[\"name\"]] = feature[\"sha\"]\n\n    for feature_name, expected_sha in expected_features.items():\n        if feature_name not in found_features:\n            print(\n                f\"Error: Feature '{feature_name}' not found in table\", file=sys.stderr\n            )\n            return False\n\n        actual_sha = found_features[feature_name]\n        if actual_sha != expected_sha:\n            print(\n                f\"Error: Wrong SHA for '{feature_name}'. Expected: {expected_sha}, Got: {actual_sha}\",\n                file=sys.stderr,\n            )\n            return False\n\n    print(\"✓ All feature commit SHAs are correct\")\n\n    # 5. Verify each commit exists and has correct author\n    print(\"5. Verifying commit details...\")\n    for feature in features:\n        if feature[\"sha\"] in expected_features.values():\n            success, commit_data = _verify_commit_exists(\n                feature[\"sha\"], headers, github_org\n            )\n            if not success:\n                print(f\"Error: Commit {feature['sha']} not found\", file=sys.stderr)\n                return False\n\n            # Check author\n            expected_author = expected_authors.get(feature[\"sha\"])\n            if expected_author:\n                actual_author = commit_data.get(\"author\", {}).get(\"login\", \"\")\n                if actual_author != expected_author:\n                    print(\n                        f\"Error: Wrong author for {feature['sha']}. Expected: {expected_author}, Got: {actual_author}\",\n                        file=sys.stderr,\n                    )\n                    return False\n\n            # Check commit message (compare with table entry)\n            expected_message = expected_messages.get(feature[\"sha\"])\n            if expected_message and \"commit_message\" in feature:\n                if feature[\"commit_message\"] != expected_message:\n                    print(\n                        f\"Error: Wrong commit message in table for {feature['sha']}. Expected: '{expected_message}', Got: '{feature['commit_message']}'\",\n                        file=sys.stderr,\n                    )\n                    return False\n\n            # Also verify against actual commit data\n            if expected_message:\n                actual_message = (\n                    commit_data.get(\"commit\", {}).get(\"message\", \"\").split(\"\\n\")[0]\n                )  # First line only\n                if actual_message != expected_message:\n                    print(\n                        f\"Error: Wrong commit message for {feature['sha']}. Expected: '{expected_message}', Got: '{actual_message}'\",\n                        file=sys.stderr,\n                    )\n                    return False\n\n            # Check date format (YYYY-MM-DD)\n            if not re.match(r\"^\\d{4}-\\d{2}-\\d{2}$\", feature[\"date\"]):\n                print(\n                    f\"Error: Invalid date format for {feature['name']}: {feature['date']}\",\n                    file=sys.stderr,\n                )\n                return False\n\n            # Check actual date matches expected\n            expected_date = expected_dates.get(feature[\"sha\"])\n            if expected_date:\n                if feature[\"date\"] != expected_date:\n                    print(\n                        f\"Error: Wrong date for {feature['sha']}. Expected: {expected_date}, Got: {feature['date']}\",\n                        file=sys.stderr,\n                    )\n                    return False\n\n    print(\"✓ All commit details verified\")\n\n    # 6. Verify the table format is correct\n    print(\"6. Verifying table format...\")\n    table_header = \"| Feature Name | Commit SHA | Author | Branch | Date | Files Changed | Commit Message |\"\n    if table_header not in content:\n        print(\"Error: Table header format is incorrect\", file=sys.stderr)\n        return False\n\n    # Check that all features have complete information\n    for feature in features:\n        if not all(\n            [\n                feature[\"name\"],\n                feature[\"sha\"],\n                feature[\"author\"],\n                feature[\"branch\"],\n                feature[\"date\"],\n                feature.get(\"commit_message\", \"\"),\n            ]\n        ):\n            print(\n                f\"Error: Incomplete information for feature: {feature['name']}\",\n                file=sys.stderr,\n            )\n            return False\n\n    print(\"✓ Table format is correct and complete\")\n\n    print(\"\\n✅ All verification checks passed!\")\n    print(\"Feature commit tracking completed successfully:\")\n    print(\"  - File: FEATURE_COMMITS.md created in main branch\")\n    print(f\"  - Features tracked: {len(features)}\")\n    print(\"  - All expected commit SHAs verified\")\n    print(\"  - All commit authors verified\")\n    print(\"  - Analysis summary complete\")\n\n    return True\n\n\nif __name__ == \"__main__\":\n    success = verify_task()\n    sys.exit(0 if success else 1)\n"
}