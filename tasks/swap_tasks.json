{
  "task_id": "swap_tasks",
  "task_name": "Swap Tasks",
  "category_id": "team_projects",
  "category_name": "Team Projects",
  "description": "Find the person responsible for the most and fewest tasks, then swap their assigned tasks.",
  "author": "Xiangyan Liu",
  "created_at": "2025-08-12",
  "difficulty": "L3",
  "tags": [
    "data aggregation",
    "automated migration",
    "conditional filtering"
  ],
  "mcp": [
    "notion"
  ],
  "meta_data": {
    "stateType": "url",
    "stateContent": null,
    "stateUrl": "https://painted-tennis-ebc.notion.site/Team-Projects-24e81626b6d7809c982fdb7a25825898",
    "stateOriginalUrl": "https://www.notion.so/marketplace/templates/gantt-chart"
  },
  "instruction": "Go to the Team Projects page, find the person responsible for the most tasks and the person responsible for the fewest tasks, then swap their assigned tasks.",
  "verify": "import sys\nfrom notion_client import Client\nfrom tasks.utils import notion_utils\n\ndef verify(notion: Client, main_id: str = None) -> bool:\n    \"\"\"\n    Verifies that the task assignees have been swapped correctly.\n    Checks:\n    1. \"Develop a plan for promotion\" and \"Evaluate different third-party services\" have swapped assignees\n    2. The person with most tasks and person with least tasks have swapped all their tasks\n    \"\"\"\n    # Step 1: Find the Team Projects page\n    if main_id:\n        found_id, object_type = notion_utils.find_page_or_database_by_id(notion, main_id)\n        if not found_id or object_type != 'page':\n            print(\"Error: Team Projects page not found.\", file=sys.stderr)\n            return False\n    else:\n        # Try to find the page by searching\n        found_id = notion_utils.find_page(notion, \"Team Projects\")\n        if not found_id:\n            print(\"Error: Team Projects page not found.\", file=sys.stderr)\n            return False\n    \n    # Get all blocks from the page to find database references\n    all_blocks = notion_utils.get_all_blocks_recursively(notion, found_id)\n    \n    # Find Tasks database ID from the page\n    tasks_db_id = None\n    \n    for block in all_blocks:\n        if block and block.get(\"type\") == \"child_database\":\n            db_title = block.get(\"child_database\", {}).get(\"title\", \"\")\n            if \"Tasks\" in db_title:\n                tasks_db_id = block[\"id\"]\n                break\n    \n    if not tasks_db_id:\n        print(\"Error: Tasks database not found.\", file=sys.stderr)\n        return False\n    \n    print(\"\\n📋 Starting verification...\")\n    \n    # Step 2: Query all tasks to analyze assignees\n    \n    try:\n        all_tasks_response = notion.databases.query(\n            database_id=tasks_db_id,\n            page_size=100\n        )\n        \n        if not all_tasks_response.get(\"results\"):\n            print(\"Error: No tasks found in Tasks database.\", file=sys.stderr)\n            return False\n        \n        tasks = all_tasks_response[\"results\"]\n        \n    except Exception as e:\n        print(f\"Error querying Tasks database: {e}\", file=sys.stderr)\n        return False\n    \n    # Step 3: Check specific tasks have swapped assignees\n    \n    develop_plan_task = None\n    evaluate_services_task = None\n    \n    for task in tasks:\n        task_name = task[\"properties\"][\"Name\"][\"title\"][0][\"text\"][\"content\"]\n        if task_name == \"Develop a plan for promotion\":\n            develop_plan_task = task\n        elif task_name == \"Evaluate different third-party services\":\n            evaluate_services_task = task\n    \n    if not develop_plan_task or not evaluate_services_task:\n        print(\"Error: Could not find both required tasks.\", file=sys.stderr)\n        return False\n    \n    # Get assignees for these tasks\n    develop_plan_assignees = develop_plan_task[\"properties\"][\"Assigned\"][\"people\"]\n    evaluate_services_assignees = evaluate_services_task[\"properties\"][\"Assigned\"][\"people\"]\n    \n    if not develop_plan_assignees or not evaluate_services_assignees:\n        print(\"Error: Tasks don't have assignees.\", file=sys.stderr)\n        return False\n    \n    develop_plan_assignee_id = develop_plan_assignees[0][\"id\"]\n    evaluate_services_assignee_id = evaluate_services_assignees[0][\"id\"]\n    \n    # These should be different (swapped)\n    if develop_plan_assignee_id == evaluate_services_assignee_id:\n        print(\"Error: Tasks should have different assignees after swap.\", file=sys.stderr)\n        return False\n    \n    # Step 4: Count tasks per person\n    \n    task_counts = {}\n    unassigned_count = 0\n    \n    for task in tasks:\n        assignees = task[\"properties\"][\"Assigned\"][\"people\"]\n        if assignees:\n            assignee_id = assignees[0][\"id\"]\n            if assignee_id not in task_counts:\n                task_counts[assignee_id] = []\n            task_counts[assignee_id].append(task[\"properties\"][\"Name\"][\"title\"][0][\"text\"][\"content\"])\n        else:\n            unassigned_count += 1\n    \n    # Sort by task count\n    sorted_assignees = sorted(task_counts.items(), key=lambda x: len(x[1]))\n    \n    if len(sorted_assignees) < 2:\n        print(\"Error: Need at least 2 people with tasks to verify swap.\", file=sys.stderr)\n        return False\n    \n    # Get person with least and most tasks\n    person_with_least = sorted_assignees[0]\n    person_with_most = sorted_assignees[-1]\n    \n    least_id, least_tasks = person_with_least\n    most_id, most_tasks = person_with_most\n    \n    # Step 5: Verify the swap pattern\n    \n    # Original distribution (before swap):\n    # - 5ac96c02-49a4-4320-8de6-b663ba83126b had 3 tasks (least)\n    # - ac7a3bd0-c111-4464-8f45-8a857a1abc8a had 10 tasks (most)\n    \n    # After complete swap, we expect:\n    # - 5ac96c02-49a4-4320-8de6-b663ba83126b should have 10 tasks\n    # - ac7a3bd0-c111-4464-8f45-8a857a1abc8a should have 3 tasks\n    \n    original_least_id = \"5ac96c02-49a4-4320-8de6-b663ba83126b\"\n    original_most_id = \"ac7a3bd0-c111-4464-8f45-8a857a1abc8a\"\n    \n    # Check if the swap has been completed\n    swap_completed = False\n    for assignee_id, assignee_tasks in task_counts.items():\n        if assignee_id == original_least_id and len(assignee_tasks) == 10:\n            # Person who had 3 now has 10\n            for other_id, other_tasks in task_counts.items():\n                if other_id == original_most_id and len(other_tasks) == 3:\n                    # Person who had 10 now has 3\n                    swap_completed = True\n                    break\n    \n    # Step 6: Summary\n    print(f\"\\n📊 Task Distribution:\")\n    print(f\"  • Total tasks: {len(tasks)}\")\n    print(f\"  • Assigned tasks: {len(tasks) - unassigned_count}\")\n    print(f\"  • Unassigned tasks: {unassigned_count}\")\n    print(f\"  • People with tasks: {len(task_counts)}\")\n    print(f\"\\n  Task counts by person:\")\n    for assignee_id, assignee_tasks in sorted_assignees:\n        print(f\"    - {assignee_id[:8]}...: {len(assignee_tasks)} tasks\")\n    \n    # Step 7: Final verification\n    print(\"\\n🔍 Verification Results:\")\n    \n    # Check that the swap has created a significant difference\n    if len(most_tasks) - len(least_tasks) < 5:\n        print(f\"Warning: Difference between most and least is only {len(most_tasks) - len(least_tasks)} tasks\", file=sys.stderr)\n    \n    # Verify specific expected outcomes\n    verification_passed = True\n    \n    # Check 1: Specific tasks have been swapped\n    specific_tasks_swapped = develop_plan_assignee_id != evaluate_services_assignee_id\n    if specific_tasks_swapped:\n        print(\"  ✓ Specific tasks have been swapped\")\n    else:\n        print(\"  ✗ Specific tasks were not swapped\", file=sys.stderr)\n        verification_passed = False\n    \n    # Check 2: Task distribution shows a complete swap\n    if swap_completed:\n        print(\"  ✓ Complete task swap verified (3↔10 tasks)\")\n    else:\n        # Show actual distribution for debugging\n        person1_tasks = len(task_counts.get(original_least_id, []))\n        person2_tasks = len(task_counts.get(original_most_id, []))\n        print(f\"  ✗ Swap incomplete! Expected 5ac96c02→10 tasks, ac7a3bd0→3 tasks\", file=sys.stderr)\n        print(f\"    Actual: 5ac96c02→{person1_tasks} tasks, ac7a3bd0→{person2_tasks} tasks\", file=sys.stderr)\n        verification_passed = False\n    \n    # Check 3: Total task count is preserved\n    total_assigned_tasks = sum(len(tasks) for _, tasks in task_counts.items())\n    expected_total = len(tasks) - unassigned_count\n    \n    if total_assigned_tasks == expected_total:\n        print(f\"  ✓ Total task count preserved ({total_assigned_tasks} assigned)\")\n    else:\n        print(f\"  ✗ Task count mismatch: {total_assigned_tasks} vs {expected_total} expected\", file=sys.stderr)\n        verification_passed = False\n    \n    if verification_passed:\n        print(\"\\n✅ All verification checks passed!\")\n        return True\n    else:\n        print(\"\\n❌ Verification failed\", file=sys.stderr)\n        return False\n\ndef main():\n    \"\"\"\n    Executes the verification process and exits with a status code.\n    \"\"\"\n    notion = notion_utils.get_notion_client()\n    main_id = sys.argv[1] if len(sys.argv) > 1 else None\n    if verify(notion, main_id):\n        sys.exit(0)\n    else:\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()"
}