{
  "task_id": "goals_restructure",
  "task_name": "Goals Restructure",
  "category_id": "company_in_a_box",
  "category_name": "Company In A Box",
  "description": "Restructure the Current Goals section on the Company In A Box page by adding a new goal heading and converting all goal headings to toggles with content inside.",
  "author": "Zijian Wu",
  "created_at": "2025-07-27",
  "difficulty": "L3",
  "tags": [
    "content organization",
    "visual formatting"
  ],
  "mcp": [
    "notion"
  ],
  "metadata": {
    "ori_template_url": "https://painted-tennis-ebc.notion.site/Company-In-A-Box-23d81626b6d7800098f3d0e64a706cd8",
    "gt_page_url": "https://www.notion.so/Company-In-A-Box-Goals-Restructure-2442b7e8cebd81f59692d1da4f2fdbc8"
  },
  "instruction": "Please restructure the **Current Goals** section on my **Company In A Box** page as follows:\n\n1. **Add a new goal heading** — create a new `heading_3` block titled:\n   \n   `🔄 Digital Transformation Initiative`\n\n2. **Convert all four goal headings to toggles** — the three existing goals\n   * ⚙️ Expand Operations to LATAM  \n   * 🛠️ Push for Enterprise  \n   * 🩶 Boost Employee Engagement  \n   * 🔄 Digital Transformation Initiative  \n\n3. **Move descriptions inside the toggles** — every paragraph or list that originally sat directly under a goal heading should become a **child block** of that heading after it is made toggleable.\n\n4. **Preserve content & order** — apart from the changes above, do **not** modify the text, formatting, or order of existing goal descriptions.\n\nThe end result should be a clean **Current Goals** section containing four toggleable goal headings, each with its corresponding details tucked inside.",
  "verify": "import sys\nfrom typing import List\nfrom notion_client import Client\nfrom tasks.utils import notion_utils\n\n# Expected new goal heading text (including emoji)\nNEW_GOAL_HEADING = \"🔄 Digital Transformation Initiative\"\n\n# Section title to look for\nGOALS_SECTION_TITLE = \"Current Goals\"\n\n\ndef _plain(block) -> str:\n    \"\"\"Return concatenated plain text of a block.\"\"\"\n    return notion_utils.get_block_plain_text(block)\n\n\n# Some Notion rich-text strings may include non-breaking spaces (\\xa0) after emoji.\n# Normalize them to plain spaces so text matching is robust.\ndef _normalize_string(s: str) -> str:\n    return s.replace(\"\\xa0\", \" \")\n\n\ndef _is_heading(block) -> bool:\n    return block.get(\"type\") in [\"heading_1\", \"heading_2\", \"heading_3\"]\n\n\ndef _is_toggle(block) -> bool:\n    \"\"\"Determine whether a block is a toggle (standard toggle block or toggle-able heading).\"\"\"\n    btype = block.get(\"type\")\n    # In our scenario, goal blocks are headings (usually heading_3) marked as toggleable.\n    if btype in [\"heading_1\", \"heading_2\", \"heading_3\"]:\n        heading_data = block.get(btype, {})\n        return heading_data.get(\"is_toggleable\", False)\n    # Some Notion pages may contain classic toggle blocks (type == \"toggle\"). They are\n    # not expected in this task, but keeping this check allows broader compatibility.\n    return btype == \"toggle\"\n\n\ndef _get_children(notion: Client, block_id: str) -> List[dict]:\n    \"\"\"Retrieve **direct** children of a block (no pagination handling needed for small test pages).\"\"\"\n    try:\n        return notion.blocks.children.list(block_id=block_id).get(\"results\", [])\n    except Exception:\n        return []\n\n\ndef verify(notion: Client, main_id: str = None) -> bool:\n    \"\"\"Verifies that the Company in a Box page has been updated per the task requirements.\"\"\"\n    # 1. Locate the main page\n    page_id = None\n    if main_id:\n        found_id, obj_type = notion_utils.find_page_or_database_by_id(notion, main_id)\n        if found_id and obj_type == \"page\":\n            page_id = found_id\n\n    if not page_id:\n        # Try a few case variations just in case\n        for title in [\n            \"Company In A Box\",\n        ]:\n            page_id = notion_utils.find_page(notion, title)\n            if page_id:\n                break\n\n    if not page_id:\n        print(\"Error: Could not find the 'Company in a Box' page.\", file=sys.stderr)\n        return False\n\n    # 2. Recursively locate the \"Current Goals\" heading and collect its sibling blocks that\n    #     constitute the section.\n\n    def _fetch_children(bid: str) -> List[dict]:\n        try:\n            return notion.blocks.children.list(block_id=bid).get(\"results\", [])\n        except Exception:\n            return []\n\n    goals_section_blocks: List[dict] = []\n\n    # Breadth-first traversal to find the heading\n    queue = [page_id]\n    found_parent = None\n    found_index = None\n\n    while queue and found_parent is None:\n        parent_id = queue.pop(0)\n        children = _fetch_children(parent_id)\n        for idx, child in enumerate(children):\n            if (\n                _is_heading(child)\n                and GOALS_SECTION_TITLE.lower()\n                in _normalize_string(_plain(child)).lower()\n            ):\n                found_parent = parent_id\n                found_index = idx\n                break\n        # enqueue grandchildren for further search\n        for ch in children:\n            if ch.get(\"has_children\"):\n                queue.append(ch[\"id\"])\n\n    if found_parent is None:\n        print(\n            \"Error: Could not find the 'Current Goals' heading anywhere in the page.\",\n            file=sys.stderr,\n        )\n        return False\n\n    # Retrieve siblings once more to get the final list and slice after heading.\n    siblings = _fetch_children(found_parent)\n    if found_index is None or found_index >= len(siblings):\n        print(\n            \"Error: Internal logic issue when locating Current Goals section.\",\n            file=sys.stderr,\n        )\n        return False\n\n    goals_section_blocks = siblings[found_index + 1 :]\n\n    if not goals_section_blocks:\n        print(\"Error: 'Current Goals' section appears to be empty.\", file=sys.stderr)\n        return False\n\n    # 3. Identify toggle blocks that represent goals\n    toggle_blocks = [b for b in goals_section_blocks if _is_toggle(b)]\n\n    if len(toggle_blocks) != 4:\n        print(\n            f\"Error: Expected 4 toggle blocks for goals, found {len(toggle_blocks)}.\",\n            file=sys.stderr,\n        )\n        return False\n\n    # 4. Ensure the new goal heading exists among the toggles\n    found_new_goal = False\n    for tb in toggle_blocks:\n        if (\n            _normalize_string(NEW_GOAL_HEADING).lower()\n            in _normalize_string(_plain(tb)).lower()\n        ):\n            found_new_goal = True\n            break\n    if not found_new_goal:\n        print(\n            f\"Error: Did not find a toggle block with heading '{NEW_GOAL_HEADING}'.\",\n            file=sys.stderr,\n        )\n        return False\n\n    # 5. Validate that each toggle has at least one child paragraph/description\n    for tb in toggle_blocks:\n        if not tb.get(\"has_children\", False):\n            print(\n                f\"Error: Toggle '{_normalize_string(_plain(tb))}' has no child blocks (description not moved).\",\n                file=sys.stderr,\n            )\n            return False\n        children = _get_children(notion, tb[\"id\"])\n        # Ensure there is at least one content child (paragraph, list item, etc.)\n        content_types = {\n            \"paragraph\",\n            \"bulleted_list_item\",\n            \"numbered_list_item\",\n            \"to_do\",\n            \"callout\",\n            \"quote\",\n        }\n        if not any(c.get(\"type\") in content_types for c in children):\n            print(\n                f\"Error: Toggle '{_normalize_string(_plain(tb))}' seems to lack any description/content inside it.\",\n                file=sys.stderr,\n            )\n            return False\n\n    # 6. Confirm that there are **no** residual heading_3 blocks (non-toggle) for the goals\n    non_toggle_headings = [\n        b\n        for b in goals_section_blocks\n        if b.get(\"type\") == \"heading_3\" and not _is_toggle(b)\n    ]\n    if non_toggle_headings:\n        titles = [_normalize_string(_plain(b)) for b in non_toggle_headings]\n        print(\n            f\"Error: Found heading_3 blocks that were not converted to toggles: {titles}.\",\n            file=sys.stderr,\n        )\n        return False\n\n    print(\n        \"Success: Verified goal restructuring with new toggle blocks and descriptions.\"\n    )\n    return True\n\n\ndef main():\n    notion = notion_utils.get_notion_client()\n    main_id = sys.argv[1] if len(sys.argv) > 1 else None\n    if verify(notion, main_id):\n        sys.exit(0)\n    else:\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()\n",
  "model_results": {
    "k2": 0,
    "gpt-5": 0,
    "grok-4": 0,
    "gpt-4-1": 0,
    "gemini-2-5-flash": 0,
    "gemini-2-5-pro": 0,
    "gpt-5-mini": 0,
    "deepseek-chat": 0,
    "gpt-4-1-mini": 0,
    "claude-4-sonnet": 0,
    "gpt-5-nano": 0,
    "o3": 0
  }
}