{
  "task_id": "performance_regression_investigation",
  "task_name": "Performance Regression Investigation",
  "category_id": "easyr1",
  "category_name": "EasyR1",
  "description": "Create systematic investigation workflow for performance regressions with tracking issues, investigation branches, and sub-issues.",
  "author": "Xiangyan Liu",
  "created_at": "2025-08-15",
  "difficulty": "L3",
  "tags": [
    "issue management",
    "repository analysis"
  ],
  "mcp": [
    "github"
  ],
  "metadata": {},
  "instruction": "In the EasyR1 repo, I've discovered that the recent commit `098931530606d22f867fd121b1dcb3225a43661f` (which fixed data proto) may have introduced performance regressions based on user reports in issues #39 and #41. I need you to create a systematic investigation workflow:\n\n**Step 1: Create Main Tracking Issue**\nCreate a main issue with the exact title \"Performance Regression Analysis: Data Protocol Changes\" and add these 3 labels: \"bug\", \"performance\", \"investigation\".\n\n**Step 2: Create Investigation Branches** \nCreate exactly 3 feature branches from main for different investigation tracks:\n- `investigate-protocol-changes` - for testing protocol-related performance issues\n- `investigate-batch-processing` - for testing batch processing performance issues  \n- `investigate-memory-usage` - for testing memory utilization performance issues\n\n**Step 3: Create Sub-Issues**\nCreate 3 sub-issues and link them to the main tracking issue using sub-issue functionality:\n- \"Test Performance Impact: fix multi modal data oom\" \n- \"Test Performance Impact: upgrade vllm to 0.10\"\n- \"Test Performance Impact: non blocking false by default\"\n\n**Step 4: Document Changes**\nAdd at least 2 comments to the main tracking issue documenting the specific file changes from commit `098931530606d22f867fd121b1dcb3225a43661f`. Reference the exact files `verl/protocol.py` and `examples/config.yaml` with their commit SHA.\n\n**Step 5: Create Analysis PR**\nCreate a pull request from the `investigate-protocol-changes` branch to main with the exact title \"Performance Analysis: Protocol Changes Investigation\".",
  "verify": "import sys\nimport os\nimport requests\nfrom typing import Dict, List, Optional, Tuple\nfrom dotenv import load_dotenv\n\nload_dotenv(\".mcp_env\")\n\n\ndef _get_github_api(\n    endpoint: str, headers: Dict[str, str]\n) -> Tuple[bool, Optional[Dict]]:\n    \"\"\"Make a GET request to GitHub API and return (success, response).\"\"\"\n    github_org = os.environ.get(\"GITHUB_EVAL_ORG\")\n    url = f\"https://api.github.com/repos/{github_org}/EasyR1/{endpoint}\"\n    try:\n        response = requests.get(url, headers=headers)\n        if response.status_code == 200:\n            return True, response.json()\n        elif response.status_code == 404:\n            return False, None\n        else:\n            print(f\"API error for {endpoint}: {response.status_code}\", file=sys.stderr)\n            return False, None\n    except Exception as e:\n        print(f\"Exception for {endpoint}: {e}\", file=sys.stderr)\n        return False, None\n\n\ndef _find_main_tracking_issue(headers: Dict[str, str]) -> Optional[Dict]:\n    \"\"\"Find the main tracking issue with exact title and required labels.\"\"\"\n    success, issues = _get_github_api(\"issues?state=open&per_page=50\", headers)\n    if not success or not issues:\n        return None\n\n    for issue in issues:\n        title = issue.get(\"title\", \"\")\n        if title == \"Performance Regression Analysis: Data Protocol Changes\":\n            # Check labels\n            labels = [label.get(\"name\", \"\") for label in issue.get(\"labels\", [])]\n            required_labels = {\"bug\", \"performance\", \"investigation\"}\n            if required_labels.issubset(set(labels)):\n                return issue\n    return None\n\n\ndef _check_branches_exist(branch_names: List[str], headers: Dict[str, str]) -> bool:\n    \"\"\"Check if all required branches exist.\"\"\"\n    for branch_name in branch_names:\n        success, _ = _get_github_api(f\"branches/{branch_name}\", headers)\n        if not success:\n            print(f\"Error: Branch '{branch_name}' not found\", file=sys.stderr)\n            return False\n    return True\n\n\ndef _check_sub_issues(\n    main_issue_number: int, expected_titles: List[str], headers: Dict[str, str]\n) -> bool:\n    \"\"\"Check if sub-issues are created and linked to main issue.\"\"\"\n    success, sub_issues = _get_github_api(\n        f\"issues/{main_issue_number}/sub_issues\", headers\n    )\n    if not success:\n        # If sub_issues endpoint doesn't exist, check for issues mentioning the main issue\n        success, all_issues = _get_github_api(\"issues?state=open&per_page=100\", headers)\n        if not success:\n            return False\n\n        sub_issues = []\n        for issue in all_issues:\n            body = issue.get(\"body\", \"\")\n            title = issue.get(\"title\", \"\")\n            # Check if issue references main issue or has expected title pattern\n            if f\"#{main_issue_number}\" in body or any(\n                expected_title in title for expected_title in expected_titles\n            ):\n                sub_issues.append(issue)\n\n    if not sub_issues or len(sub_issues) < 3:\n        print(\n            f\"Error: Expected 3 sub-issues linked to main issue #{main_issue_number}\",\n            file=sys.stderr,\n        )\n        return False\n\n    # Check if sub-issues have expected titles\n    found_titles = [issue.get(\"title\", \"\") for issue in sub_issues]\n    for expected_title in expected_titles:\n        if not any(expected_title in title for title in found_titles):\n            print(\n                f\"Error: Sub-issue with title containing '{expected_title}' not found\",\n                file=sys.stderr,\n            )\n            return False\n\n    return True\n\n\ndef _check_issue_comments(issue_number: int, headers: Dict[str, str]) -> bool:\n    \"\"\"Check if main issue has at least 2 comments with file references.\"\"\"\n    success, comments = _get_github_api(f\"issues/{issue_number}/comments\", headers)\n    if not success or not comments:\n        print(f\"Error: No comments found on issue #{issue_number}\", file=sys.stderr)\n        return False\n\n    if len(comments) < 2:\n        print(\n            f\"Error: Expected at least 2 comments on issue #{issue_number}\",\n            file=sys.stderr,\n        )\n        return False\n\n    # Check if comments reference specific files and commit\n    required_refs = [\n        \"verl/protocol.py\",\n        \"examples/config.yaml\",\n        \"0989315\",\n    ]\n    comment_text = \" \".join([comment.get(\"body\", \"\") for comment in comments])\n\n    for ref in required_refs:\n        if ref not in comment_text:\n            print(f\"Error: Comments missing reference to '{ref}'\", file=sys.stderr)\n            return False\n\n    return True\n\n\ndef _find_analysis_pr(headers: Dict[str, str]) -> Optional[Dict]:\n    \"\"\"Find the analysis PR with exact title from specific branch.\"\"\"\n    success, prs = _get_github_api(\"pulls?state=open&per_page=50\", headers)\n    if not success or not prs:\n        return None\n\n    expected_title = \"Performance Analysis: Protocol Changes Investigation\"\n    expected_head = \"investigate-protocol-changes\"\n\n    for pr in prs:\n        title = pr.get(\"title\", \"\")\n        head_ref = pr.get(\"head\", {}).get(\"ref\", \"\")\n\n        if title == expected_title and head_ref == expected_head:\n            return pr\n\n    return None\n\n\ndef verify() -> bool:\n    \"\"\"\n    Programmatically verify that the performance regression investigation workflow meets the\n    requirements described in description.md.\n    \"\"\"\n    # Get GitHub token\n    github_token = os.environ.get(\"MCP_GITHUB_TOKEN\")\n    if not github_token:\n        print(\"Error: MCP_GITHUB_TOKEN environment variable not set\", file=sys.stderr)\n        return False\n\n    headers = {\n        \"Authorization\": f\"token {github_token}\",\n        \"Accept\": \"application/vnd.github.v3+json\",\n    }\n\n    # Run verification checks\n    print(\"Verifying performance regression investigation workflow completion...\")\n\n    # 1. Check main tracking issue exists with exact title and labels\n    print(\"1. Checking main tracking issue with required title and labels...\")\n    main_issue = _find_main_tracking_issue(headers)\n    if not main_issue:\n        print(\n            \"Error: Main tracking issue not found with exact title 'Performance Regression Analysis: Data Protocol Changes' and labels 'bug', 'performance', 'investigation'\",\n            file=sys.stderr,\n        )\n        return False\n\n    main_issue_number = main_issue.get(\"number\")\n    print(f\"Found main tracking issue #{main_issue_number}\")\n\n    # 2. Check that all 3 investigation branches exist\n    print(\"2. Checking investigation branches exist...\")\n    required_branches = [\n        \"investigate-protocol-changes\",\n        \"investigate-batch-processing\",\n        \"investigate-memory-usage\",\n    ]\n    if not _check_branches_exist(required_branches, headers):\n        return False\n\n    # 3. Check sub-issues are created and linked\n    print(\"3. Checking sub-issues are created and linked...\")\n    expected_sub_titles = [\n        \"Test Performance Impact: fix multi modal data oom\",\n        \"Test Performance Impact: upgrade vllm to 0.10\",\n        \"Test Performance Impact: non blocking false by default\",\n    ]\n    if not _check_sub_issues(main_issue_number, expected_sub_titles, headers):\n        return False\n\n    # 4. Check issue comments document file changes\n    print(\"4. Checking issue comments document file changes...\")\n    if not _check_issue_comments(main_issue_number, headers):\n        return False\n\n    # 5. Check analysis PR exists with exact title from correct branch\n    print(\"5. Checking analysis PR exists with exact title and branch...\")\n    analysis_pr = _find_analysis_pr(headers)\n    if not analysis_pr:\n        print(\n            \"Error: Analysis PR not found with title 'Performance Analysis: Protocol Changes Investigation' from branch 'investigate-protocol-changes'\",\n            file=sys.stderr,\n        )\n        return False\n\n    print(f\"Found analysis PR #{analysis_pr.get('number')}\")\n\n    print(\"\\n✓ Task completed successfully!\")\n    print(\n        f\"Main tracking issue #{main_issue_number} created with proper labels and documentation\"\n    )\n    print(\"All 3 investigation branches created for different investigation tracks\")\n    print(\"3 sub-issues created and linked to main tracking issue\")\n    print(\"Issue comments document file changes with commit SHA references\")\n    print(f\"Analysis PR #{analysis_pr.get('number')} created from correct branch\")\n    return True\n\n\nif __name__ == \"__main__\":\n    success = verify()\n    sys.exit(0 if success else 1)\n"
}