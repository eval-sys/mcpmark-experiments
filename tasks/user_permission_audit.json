{
  "task_id": "user_permission_audit",
  "task_name": "User Permission Audit",
  "category_id": "security",
  "category_name": "Security",
  "description": "Conduct comprehensive security audit identifying users with insufficient or dangling permissions in business database environment.",
  "author": "Fanshi Zhang",
  "created_at": "2025-08-17",
  "difficulty": "L3",
  "tags": [
    "security and access control",
    "audit and compliance"
  ],
  "mcp": [
    "postgres"
  ],
  "meta_data": {
    "stateType": "text",
    "stateContent": "Table \"user_profiles\" {\n  \"user_id\" int4 [pk, not null, increment]\n  \"username\" varchar(50) [unique, not null]\n  \"email\" varchar(100) [unique, not null]\n  \"first_name\" varchar(50) [not null]\n  \"last_name\" varchar(50) [not null]\n  \"phone\" varchar(20)\n  \"address\" text\n  \"city\" varchar(50)\n  \"state\" varchar(2)\n  \"zip_code\" varchar(10)\n  \"date_created\" timestamp [default: `CURRENT_TIMESTAMP`]\n  \"last_updated\" timestamp [default: `CURRENT_TIMESTAMP`]\n  \"is_active\" bool [default: true]\n  \"profile_picture_url\" text\n  \"bio\" text\n}\n\nTable \"user_credentials\" {\n  \"credential_id\" int4 [pk, not null, increment]\n  \"user_id\" int4\n  \"password_hash\" varchar(255) [not null]\n  \"salt\" varchar(100) [not null]\n  \"login_attempts\" int4 [default: 0]\n  \"last_login\" timestamp\n  \"password_created\" timestamp [default: `CURRENT_TIMESTAMP`]\n  \"password_expires\" timestamp\n  \"is_locked\" bool [default: false]\n  \"two_factor_enabled\" bool [default: false]\n  \"two_factor_secret\" varchar(32)\n  \"backup_codes\" \"text[]\"\n  \"security_questions\" jsonb\n}\n\nTable \"user_stat_analysis\" {\n  \"analysis_id\" int4 [pk, not null, increment]\n  \"user_id\" int4\n  \"session_id\" varchar(100)\n  \"page_views\" int4 [default: 0]\n  \"time_spent_minutes\" int4 [default: 0]\n  \"actions_performed\" jsonb\n  \"device_info\" jsonb\n  \"ip_address\" inet\n  \"location_data\" jsonb\n  \"referrer_url\" text\n  \"conversion_events\" jsonb\n  \"analysis_date\" date [default: `CURRENT_DATE`]\n  \"created_at\" timestamp [default: `CURRENT_TIMESTAMP`]\n}\n\nTable \"product_catalog\" {\n  \"product_id\" int4 [pk, not null, increment]\n  \"product_name\" varchar(100) [not null]\n  \"description\" text\n  \"category\" varchar(50)\n  \"price\" numeric(10,2) [not null]\n  \"cost\" numeric(10,2)\n  \"sku\" varchar(50) [unique]\n  \"inventory_count\" int4 [default: 0]\n  \"is_active\" bool [default: true]\n  \"created_at\" timestamp [default: `CURRENT_TIMESTAMP`]\n  \"updated_at\" timestamp [default: `CURRENT_TIMESTAMP`]\n  \"supplier_info\" jsonb\n  \"weight_kg\" numeric(6,2)\n  \"dimensions\" jsonb\n}\n\nTable \"order_management\" {\n  \"order_id\" int4 [pk, not null, increment]\n  \"user_id\" int4\n  \"order_number\" varchar(50) [unique, not null]\n  \"order_status\" varchar(20) [default: 'pending']\n  \"total_amount\" numeric(12,2) [not null]\n  \"tax_amount\" numeric(12,2)\n  \"shipping_amount\" numeric(12,2)\n  \"discount_amount\" numeric(12,2) [default: 0]\n  \"payment_method\" varchar(50)\n  \"payment_status\" varchar(20) [default: 'pending']\n  \"shipping_address\" jsonb\n  \"billing_address\" jsonb\n  \"order_date\" timestamp [default: `CURRENT_TIMESTAMP`]\n  \"shipped_date\" timestamp\n  \"delivered_date\" timestamp\n  \"tracking_number\" varchar(100)\n}\n\nTable \"financial_transactions\" {\n  \"transaction_id\" int4 [pk, not null, increment]\n  \"order_id\" int4\n  \"user_id\" int4\n  \"transaction_type\" varchar(20) [not null]\n  \"amount\" numeric(12,2) [not null]\n  \"currency\" varchar(3) [default: 'USD']\n  \"payment_gateway\" varchar(50)\n  \"gateway_transaction_id\" varchar(100)\n  \"credit_card_last_four\" bpchar(4)\n  \"bank_account_last_four\" bpchar(4)\n  \"transaction_status\" varchar(20) [default: 'pending']\n  \"processed_at\" timestamp\n  \"created_at\" timestamp [default: `CURRENT_TIMESTAMP`]\n  \"fee_amount\" numeric(8,2)\n  \"refund_amount\" numeric(12,2) [default: 0]\n  \"notes\" text\n}\n\nTable \"audit_logs\" {\n  \"log_id\" int4 [pk, not null, increment]\n  \"user_id\" int4\n  \"action_type\" varchar(50) [not null]\n  \"table_name\" varchar(50)\n  \"record_id\" int4\n  \"old_values\" jsonb\n  \"new_values\" jsonb\n  \"ip_address\" inet\n  \"user_agent\" text\n  \"session_id\" varchar(100)\n  \"timestamp\" timestamp [default: `CURRENT_TIMESTAMP`]\n  \"success\" bool [default: true]\n  \"error_message\" text\n}\n\nRef \"audit_logs_user_id_fkey\":\"user_profiles\".\"user_id\" < \"audit_logs\".\"user_id\"\n\nRef \"financial_transactions_order_id_fkey\":\"order_management\".\"order_id\" < \"financial_transactions\".\"order_id\"\n\nRef \"financial_transactions_user_id_fkey\":\"user_profiles\".\"user_id\" < \"financial_transactions\".\"user_id\"\n\nRef \"order_management_user_id_fkey\":\"user_profiles\".\"user_id\" < \"order_management\".\"user_id\"\n\nRef \"user_credentials_user_id_fkey\":\"user_profiles\".\"user_id\" < \"user_credentials\".\"user_id\" [delete: cascade]\n\nRef \"user_stat_analysis_user_id_fkey\":\"user_profiles\".\"user_id\" < \"user_stat_analysis\".\"user_id\" [delete: cascade]\n",
    "stateUrl": null,
    "stateOriginalUrl": null
  },
  "instruction": "Conduct a comprehensive security audit to identify PostgreSQL users with insufficient or dangling permissions in a business database environment.\n\n## Your Mission:\n\nYou've been hired as a security consultant to audit the PostgreSQL database permissions for a growing e-commerce company. The company has experienced rapid growth and multiple teams have been granted database access over time. However, there's concern about permission inconsistencies and security gaps.\n\n## Security Audit Requirements:\n\n1. **Discover the database structure**: Identify all business tables and their purposes\n2. **Catalog all database users and roles**: Use `pg_user`, `pg_roles`, and `pg_auth_members` to find all accounts\n3. **Analyze current permissions**: Use `information_schema.table_privileges` to map permissions\n4. **Identify security issues**:\n   - **Dangling users**: Inactive accounts that should be removed\n   - **Missing permissions**: Users lacking permissions required for their business role\n   - **Excessive permissions**: Users with unnecessary permissions that should be revoked\n\n## Expected permissions by role (what they SHOULD have)\n\n```python\n# users's role\nUSER_ROLE = {\n    # Active functional users\n    'analytics_user': 'Analytics Team',\n    'marketing_user': 'Marketing Department',\n    'customer_service': 'Customer Service',\n    'finance_user': 'Finance Team',\n    'product_manager': 'Product Management',\n    'security_auditor': 'Security Team',\n    'developer_user': 'Development Team',\n    'backup_user': 'Backup Service',\n}\n\n# each role has its permissions\nROLE_EXPECTED_PERMISSIONS = {\n    'Analytics Team': [\n        ('user_profiles', 'SELECT'),\n        ('user_stat_analysis', 'SELECT'),\n        ('product_catalog', 'SELECT'),\n        ('order_management', 'SELECT'),\n    ],\n    'Marketing Department': [\n        ('user_profiles', 'SELECT'),\n        ('user_stat_analysis', 'SELECT'),\n        ('product_catalog', 'SELECT'),\n    ],\n    'Customer Service': [\n        ('user_profiles', 'SELECT'),\n        ('user_profiles', 'UPDATE'),\n        ('order_management', 'SELECT'),\n        ('order_management', 'INSERT'),\n        ('order_management', 'UPDATE'),\n        ('product_catalog', 'SELECT'),\n    ],\n    'Finance Team': [\n        ('financial_transactions', 'SELECT'),\n        ('order_management', 'SELECT'),\n        ('user_profiles', 'SELECT'),\n    ],\n    'Product Management': [\n        ('product_catalog', 'SELECT'),\n        ('product_catalog', 'INSERT'),\n        ('product_catalog', 'UPDATE'),\n        ('product_catalog', 'DELETE'),\n        ('order_management', 'SELECT'),\n        ('user_stat_analysis', 'SELECT'),\n    ],\n    'Security Team': [\n        ('audit_logs', 'SELECT'),\n        ('user_credentials', 'SELECT'),\n        ('user_profiles', 'SELECT'),\n    ],\n    'Development Team': [\n        ('user_profiles', 'SELECT'),\n        ('product_catalog', 'SELECT'),\n    ],\n    'Backup Service': [\n        ('user_profiles', 'SELECT'),\n        ('product_catalog', 'SELECT'),\n        ('order_management', 'SELECT'),\n        ('financial_transactions', 'SELECT'),\n        ('user_stat_analysis', 'SELECT'),\n        ('audit_logs', 'SELECT'),\n        ('user_credentials', 'SELECT'),\n    ]\n}\n```\n\n## Expected Deliverables:\n\nYour audit must produce findings in a structured format that can be verified. Create two tables to store your audit results:\n\n**1. Summary Table:**\n```sql\nCREATE TABLE security_audit_results (\n    audit_id SERIAL PRIMARY KEY,\n    audit_type VARCHAR(50) NOT NULL, -- 'DANGLING_USERS', 'MISSING_PERMISSIONS', 'EXCESSIVE_PERMISSIONS'\n    total_issues INTEGER NOT NULL,\n    users_affected INTEGER NOT NULL,\n    tables_affected INTEGER NOT NULL\n);\n```\n\n**2. Detailed Findings Table:**\n```sql\nCREATE TABLE security_audit_details (\n    detail_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) NOT NULL,\n    issue_type VARCHAR(50) NOT NULL, -- 'DANGLING_USER', 'MISSING_PERMISSION', 'EXCESSIVE_PERMISSION'\n    table_name VARCHAR(50), -- NULL for dangling users\n    permission_type VARCHAR(20), -- 'SELECT', 'INSERT', 'UPDATE', 'DELETE', NULL for dangling users\n    expected_access BOOLEAN NOT NULL -- TRUE if user should have access, FALSE if should not\n);\n```\n\n## Success Criteria:\n\nYour audit should populate both tables with:\n- **Summary data**: High-level counts of different types of security issues\n- **Detailed findings**: Specific permission gaps for each user and table combination\n\n## Business Role Expectations\n\nAnalyze usernames and infer their intended business roles based on naming patterns:\n\n- **analytics_user** â†’ Analytics Team (needs user behavior and statistics data)\n- **marketing_user** â†’ Marketing Department (needs customer and product data for campaigns)  \n- **customer_service** â†’ Customer Service (needs user profiles and order management)\n- **finance_user** â†’ Finance Team (needs financial and order data)\n- **product_manager** â†’ Product Management (needs full product catalog access)\n- **security_auditor** â†’ Security Team (needs audit logs and credential data)\n- **developer_user** â†’ Development Team (needs limited access for testing)\n- **backup_user** â†’ Backup Service (needs read-only access to all business data)\n- **temp_contractor, old_employee, test_account** â†’ Inactive/Temporary (should have NO permissions)\n\nThe verification process will check that your findings correctly identify the actual permission gaps in the system by comparing against expected results.\n",
  "verify": "import os\nimport psycopg2\nimport sys\n\n\ndef verify_security_audit():\n    \"\"\"\n    Verify that the security audit correctly identified all permission issues.\n    \"\"\"\n\n    # Database connection parameters from environment\n    db_params = {\n        'host': os.getenv('POSTGRES_HOST', 'localhost'),\n        'port': os.getenv('POSTGRES_PORT', '5432'),\n        'user': os.getenv('POSTGRES_USERNAME', 'postgres'),\n        'password': os.getenv('POSTGRES_PASSWORD', 'password'),\n        'database': os.getenv('POSTGRES_DATABASE', 'postgres')\n    }\n\n    try:\n        conn = psycopg2.connect(**db_params)\n        cur = conn.cursor()\n\n        print(\"| Verifying security audit findings...\")\n\n        # Check if security_audit_results table exists\n        cur.execute(\"\"\"\n            SELECT EXISTS (\n                SELECT FROM information_schema.tables\n                WHERE table_name = 'security_audit_results'\n            );\n        \"\"\")\n\n        if not cur.fetchone()[0]:\n            print(\"FAIL: security_audit_results table not found\")\n            return False\n\n        # Check if security_audit_details table exists\n        cur.execute(\"\"\"\n            SELECT EXISTS (\n                SELECT FROM information_schema.tables\n                WHERE table_name = 'security_audit_details'\n            );\n        \"\"\")\n\n        if not cur.fetchone()[0]:\n            print(\"FAIL: security_audit_details table not found\")\n            return False\n\n        # Get all detailed findings\n        cur.execute(\"SELECT * FROM security_audit_details ORDER BY detail_id;\")\n        findings = cur.fetchall()\n\n        if not findings:\n            print(\"FAIL: No findings in security_audit_details table\")\n            return False\n\n        print(f\"| Found {len(findings)} audit findings\")\n\n        # Expected findings based on the ground truth:\n        expected_findings = {\n            # Expected dangling users\n            'dangling_users': {'temp_contractor', 'old_employee', 'test_account'},\n\n            # Expected missing permissions (should be granted)\n            'missing_permissions': {\n                ('analytics_user', 'user_profiles', 'SELECT'),\n                ('analytics_user', 'product_catalog', 'SELECT'),\n                ('analytics_user', 'order_management', 'SELECT'),\n                ('marketing_user', 'product_catalog', 'SELECT'),\n                ('customer_service', 'product_catalog', 'SELECT'),\n                ('finance_user', 'user_profiles', 'SELECT'),\n                ('product_manager', 'user_stat_analysis', 'SELECT'),\n                ('security_auditor', 'audit_logs', 'SELECT'),\n                ('developer_user', 'product_catalog', 'SELECT'),\n                ('backup_user', 'order_management', 'SELECT'),\n                ('backup_user', 'financial_transactions', 'SELECT'),\n                ('backup_user', 'user_stat_analysis', 'SELECT'),\n                ('backup_user', 'user_credentials', 'SELECT')\n            },\n\n            # Expected excessive permissions (should be revoked)\n            'excessive_permissions': {\n                ('analytics_user', 'financial_transactions', 'SELECT'),\n                ('marketing_user', 'financial_transactions', 'SELECT'),\n                ('customer_service', 'user_credentials', 'SELECT'),\n                ('product_manager', 'financial_transactions', 'SELECT'),\n                ('security_auditor', 'financial_transactions', 'UPDATE'),\n                ('developer_user', 'user_credentials', 'SELECT'),\n                ('developer_user', 'order_management', 'UPDATE'),\n                ('backup_user', 'product_catalog', 'DELETE'),\n                ('temp_contractor', 'product_catalog', 'SELECT'),\n                ('temp_contractor', 'user_profiles', 'SELECT'),\n                ('old_employee', 'audit_logs', 'SELECT'),\n                ('old_employee', 'user_stat_analysis', 'UPDATE'),\n                ('test_account', 'user_profiles', 'SELECT')\n            }\n        }\n\n        found_dangling = set()\n        found_missing_permissions = set()\n        found_excessive_permissions = set()\n\n        # Analyze findings (detail_id, username, issue_type, table_name, permission_type, expected_access)\n        for finding in findings:\n            username = finding[1]\n            issue_type = finding[2]\n            table_name = finding[3]\n            permission_type = finding[4]\n            expected_access = finding[5]\n\n            if issue_type == 'DANGLING_USER':\n                found_dangling.add(username)\n            elif issue_type == 'MISSING_PERMISSION' and expected_access:\n                if table_name and permission_type:\n                    found_missing_permissions.add((username, table_name, permission_type))\n            elif issue_type == 'EXCESSIVE_PERMISSION' and not expected_access:\n                if table_name and permission_type:\n                    found_excessive_permissions.add((username, table_name, permission_type))\n\n        # Verify dangling users\n        missing_dangling = expected_findings['dangling_users'] - found_dangling\n        extra_dangling = found_dangling - expected_findings['dangling_users']\n\n        # Verify missing permissions\n        missing_missing_perms = expected_findings['missing_permissions'] - found_missing_permissions\n        extra_missing_perms = found_missing_permissions - expected_findings['missing_permissions']\n\n        # Verify excessive permissions\n        missing_excessive_perms = expected_findings['excessive_permissions'] - found_excessive_permissions\n        extra_excessive_perms = found_excessive_permissions - expected_findings['excessive_permissions']\n\n        # Validate structure\n        structure_valid = True\n        for i, finding in enumerate(findings):\n            if len(finding) != 6:  # Should have 6 columns\n                print(f\"| FAIL: Finding {i + 1} has wrong number of columns (expected 6, got {len(finding)})\")\n                structure_valid = False\n                continue\n\n            detail_id, username, issue_type, table_name, permission_type, expected_access = finding\n\n            if not username:\n                print(f\"| FAIL: Finding {i + 1} missing username\")\n                structure_valid = False\n\n            if issue_type not in ['DANGLING_USER', 'MISSING_PERMISSION', 'EXCESSIVE_PERMISSION']:\n                print(f\"| FAIL: Finding {i + 1} invalid issue_type: {issue_type}\")\n                structure_valid = False\n\n            if expected_access not in [True, False]:\n                print(f\"| FAIL: Finding {i + 1} invalid expected_access: {expected_access}\")\n                structure_valid = False\n\n        if structure_valid:\n            print(f\"| âœ“ structure is valid\")\n\n        # Check for missing findings\n        all_correct = True\n\n        print(f\"| Expected dangling users: {expected_findings['dangling_users']} Found: {found_dangling}\")\n        if missing_dangling:\n            print(f\"| Missing dangling users: {missing_dangling}\")\n            all_correct = False\n\n        print(\n            f\"| Expected missing permissions: {len(expected_findings['missing_permissions'])} Found: {len(found_missing_permissions)} Missing: {len(missing_missing_perms)}\")\n        if missing_missing_perms:\n            print(f\"| Missing 'missing permission' findings:\")\n            for perm in sorted(missing_missing_perms):\n                print(f\"|   - {perm[0]} should be granted {perm[2]} on {perm[1]}\")\n            all_correct = False\n\n        print(\n            f\"| Expected excessive permissions: {len(expected_findings['excessive_permissions'])} Found: {len(found_excessive_permissions)} Missing: {len(missing_excessive_perms)}\")\n        if missing_excessive_perms:\n            print(f\"| Missing 'excessive permission' findings:\")\n            for perm in sorted(missing_excessive_perms):\n                print(f\"|   - {perm[0]} should have {perm[2]} revoked on {perm[1]}\")\n            all_correct = False\n\n        # Check audit summary table\n        cur.execute(\n            \"SELECT audit_type, total_issues, users_affected, tables_affected FROM security_audit_results ORDER BY audit_type;\")\n        summary_results = cur.fetchall()\n\n        # Expected summary numbers based on ground truth\n        expected_summary = {\n            'DANGLING_USERS': (3, 3, 0),          # 3 issues, 3 users affected, 0 tables affected\n            'EXCESSIVE_PERMISSIONS': (13, 10, 7), # 13 issues, 10 users affected, 7 tables affected\n            'MISSING_PERMISSIONS': (13, 8, 7)     # 13 issues, 8 users affected, 7 tables affected\n        }\n\n        summary_correct = True\n        for result in summary_results:\n            audit_type, total_issues, users_affected, tables_affected = result\n            print(f\"| Summary result: [{audit_type}] {total_issues} issues, {users_affected} users affected, {tables_affected} tables affected\")\n            \n            if audit_type in expected_summary:\n                expected = expected_summary[audit_type]\n                if (total_issues, users_affected, tables_affected) != expected:\n                    print(f\"| FAIL: {audit_type} summary mismatch - Expected: {expected}, Got: ({total_issues}, {users_affected}, {tables_affected})\")\n                    summary_correct = False\n                else:\n                    print(f\"| âœ“ {audit_type} summary matches expected values\")\n\n        # Assert exact counts match expected\n        assert len(found_dangling) == 3, f\"Expected 3 dangling users, found {len(found_dangling)}\"\n        assert len(found_missing_permissions) == 13, f\"Expected 13 missing permissions, found {len(found_missing_permissions)}\"\n        assert len(found_excessive_permissions) == 13, f\"Expected 13 excessive permissions, found {len(found_excessive_permissions)}\"\n\n        if all_correct and structure_valid and summary_correct:\n            print(\"| âœ“ All assertions passed\")\n            return True\n        else:\n            return False\n\n    except Exception as e:\n        print(f\"FAIL: Error during verification: {e}\")\n        return False\n    finally:\n        if 'cur' in locals():\n            cur.close()\n        if 'conn' in locals():\n            conn.close()\n\n\nif __name__ == \"__main__\":\n    success = verify_security_audit()\n    sys.exit(0 if success else 1)\n"
}