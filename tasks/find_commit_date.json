{
  "task_id": "find_commit_date",
  "task_name": "Find Commit Date",
  "category_id": "build_your_own_x",
  "category_name": "Build Your Own X",
  "description": "Find when Voxel Engine entries were first created by Daniel Stefanovic and document the date.",
  "author": "Xiangyan Liu",
  "created_at": "2025-08-15",
  "difficulty": "L3",
  "tags": [
    "repository analysis"
  ],
  "mcp": [
    "github"
  ],
  "metadata": {},
  "instruction": "Find out when the entries in the Voxel Engine section were first created by Daniel Stefanovic. After finding this information, create an ANSWER.md file in the repository with the content being the date in [YYYY]-[MM]-[DD] format (e.g., 2000-06-02).",
  "verify": "import sys\nimport os\nimport requests\nfrom typing import Dict, Optional, Tuple\nimport base64\nfrom dotenv import load_dotenv\n\n\ndef _get_github_api(\n    endpoint: str, headers: Dict[str, str], org: str, repo: str = \"build-your-own-x\"\n) -> Tuple[bool, Optional[Dict]]:\n    \"\"\"Make a GET request to GitHub API and return (success, response).\"\"\"\n    url = f\"https://api.github.com/repos/{org}/{repo}/{endpoint}\"\n    try:\n        response = requests.get(url, headers=headers)\n        if response.status_code == 200:\n            return True, response.json()\n        elif response.status_code == 404:\n            return False, None\n        else:\n            print(f\"API error for {endpoint}: {response.status_code}\", file=sys.stderr)\n            return False, None\n    except Exception as e:\n        print(f\"Exception for {endpoint}: {e}\", file=sys.stderr)\n        return False, None\n\n\ndef _get_file_content(\n    file_path: str,\n    headers: Dict[str, str],\n    org: str,\n    repo: str = \"build-your-own-x\",\n    ref: str = \"master\",\n) -> Optional[str]:\n    \"\"\"Get the content of a file from the repository.\"\"\"\n    success, result = _get_github_api(\n        f\"contents/{file_path}?ref={ref}\", headers, org, repo\n    )\n    if not success or not result:\n        return None\n\n    try:\n        content = base64.b64decode(result.get(\"content\", \"\")).decode(\"utf-8\")\n        return content\n    except Exception as e:\n        print(f\"Content decode error for {file_path}: {e}\", file=sys.stderr)\n        return None\n\n\ndef verify_task() -> bool:\n    \"\"\"Verify the find commit data task for Voxel Engine entries.\"\"\"\n    # Load environment variables from .mcp_env\n    load_dotenv(\".mcp_env\")\n\n    # Get GitHub token and org\n    github_token = os.environ.get(\"MCP_GITHUB_TOKEN\")\n    github_org = os.environ.get(\"GITHUB_EVAL_ORG\")\n\n    if not github_token:\n        print(\"Error: MCP_GITHUB_TOKEN environment variable not set\", file=sys.stderr)\n        return False\n\n    if not github_org:\n        print(\"Error: GITHUB_EVAL_ORG environment variable not set\", file=sys.stderr)\n        return False\n\n    headers = {\n        \"Authorization\": f\"Bearer {github_token}\",\n        \"Accept\": \"application/vnd.github.v3+json\",\n    }\n\n    print(\"Verifying Voxel Engine commit date task...\")\n\n    # 1. Check if ANSWER.md exists in the repository\n    print(\"1. Checking if ANSWER.md exists...\")\n    content = _get_file_content(\"ANSWER.md\", headers, github_org)\n    if not content:\n        print(\"Error: ANSWER.md not found in repository\", file=sys.stderr)\n        return False\n    print(\"✓ ANSWER.md found\")\n\n    # 2. Check the content format\n    print(\"2. Checking content format...\")\n    content = content.strip()\n    \n    # The expected date when Daniel Stefanovic added Voxel Engine entries\n    # Based on historical records, this should be 2018-07-07\n    expected_date = \"2018-07-07\"\n    \n    # Check if the content matches the expected date format (YYYY-MM-DD)\n    import re\n    date_pattern = r'^\\d{4}-\\d{2}-\\d{2}$'\n    if not re.match(date_pattern, content):\n        print(f\"Error: Invalid date format. Expected YYYY-MM-DD, got: {content}\", file=sys.stderr)\n        return False\n    print(\"✓ Date format is correct\")\n\n    # 3. Verify the date is correct\n    print(\"3. Verifying the date...\")\n    if content != expected_date:\n        print(f\"Error: Incorrect date. Expected {expected_date}, got: {content}\", file=sys.stderr)\n        return False\n    print(f\"✓ Date is correct: {content}\")\n\n    # 4. Verify README.md contains Voxel Engine section\n    print(\"4. Checking if README.md contains Voxel Engine section...\")\n    readme_content = _get_file_content(\"README.md\", headers, github_org)\n    if not readme_content:\n        print(\"Error: README.md not found in repository\", file=sys.stderr)\n        return False\n    \n    if \"Voxel Engine\" not in readme_content:\n        print(\"Error: Voxel Engine section not found in README.md\", file=sys.stderr)\n        return False\n    \n    # Check for specific Voxel Engine entries\n    voxel_entries = [\n        \"Let's Make a Voxel Engine\",\n        \"Java Voxel Engine Tutorial\"\n    ]\n    \n    for entry in voxel_entries:\n        if entry not in readme_content:\n            print(f\"Warning: Voxel Engine entry '{entry}' not found in README.md\", file=sys.stderr)\n    \n    print(\"✓ Voxel Engine section found in README.md\")\n\n    print(\"\\n✅ All verification checks passed!\")\n    print(\"Task completed successfully:\")\n    print(f\"  - ANSWER.md created with date: {content}\")\n    print(\"  - Date format is correct (YYYY-MM-DD)\")\n    print(\"  - Date matches expected creation date for Voxel Engine entries by Daniel Stefanovic\")\n    print(\"  - Voxel Engine section exists in README.md\")\n\n    return True\n\n\nif __name__ == \"__main__\":\n    success = verify_task()\n    sys.exit(0 if success else 1)"
}