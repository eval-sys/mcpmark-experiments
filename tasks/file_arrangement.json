{
  "task_id": "file_arrangement",
  "task_name": "File Arrangement",
  "category_id": "desktop_template",
  "category_name": "Desktop Template",
  "description": "Classify and organize desktop files into appropriate categories following specified classification rules and naming convention standards.",
  "author": "Lingjun Chen",
  "created_at": "2025-08-14",
  "difficulty": "L3",
  "tags": [
    "file organization"
  ],
  "mcp": [
    "filesystem"
  ],
  "meta_data": {
    "stateType": "text",
    "stateContent": "desktop_template/\n    ├── Archives/\n    │       ├── backup_contacts.csv\n    │       └── tax_documents_2022.csv\n    ├── Desktop/\n    │       └── contacts.csv\n    ├── Documents/\n    │       ├── Personal/\n    │       │       └── tax_info_2023.csv\n    │       ├── Projects/\n    │       │       └── budget_tracker.csv\n    │       ├── Work/\n    │       │       ├── client_list.csv\n    │       │       └── timesheet.csv\n    │       ├── budget.csv\n    │       └── important_dates.csv\n    ├── Downloads/\n    │       ├── expenses.csv\n    │       ├── fitness_log.csv\n    │       └── price_comparisons.csv\n    ├── Temp/\n    │       └── test_data.csv\n    ├── book_list.txt\n    ├── bookmark_export.txt\n    ├── calculations.txt\n    ├── correspondence_2023.txt\n    ├── draft_letter.txt\n    ├── emergency_contacts.txt\n    ├── example.txt\n    └── experiment_results.txt\n",
    "stateUrl": "https://storage.mcpmark.ai/filesystem/desktop_template.zip",
    "stateOriginalUrl": null
  },
  "instruction": "Please use FileSystem tools to finish the following task:\n\n### Task Description\n\nYou are tasked with organizing files on an AI researcher's desktop into a structured folder system. You need to create specific folders and move files to their designated locations according to the provided organization scheme.\n\n### Task Objectives\n\n1. **Create the following folder structure** in the main directory:\n\n   - `work/` - for work, research and projects related files\n   - `life/` - for personal life related files\n   - `archives/` - for archived files or files with past dates in its file names\n   - `temp/` - for temporary files, drafts\n   - `others/` - for files that cannot be classified elsewhere\n\n### Important Notes\n\n- All files must be moved from their current locations to the specified folders\n- The `others/` folder is for files that don't fit the other categories\n- Do not modify the contents of any files, only move them to the correct locations\n- If you are not sure about which folder it should belongs to, you can read the context in the files before making decisions\n- **Do not change files' name**\n",
  "verify": "#!/usr/bin/env python3\n\"\"\"\nVerification script for Desktop File Organization Task\n\"\"\"\n\nimport sys\nfrom pathlib import Path\nimport os\n\ndef get_test_directory() -> Path:\n    \"\"\"Get the test directory from FILESYSTEM_TEST_DIR env var.\"\"\"\n    test_root = os.environ.get(\"FILESYSTEM_TEST_DIR\")\n    if not test_root:\n        raise ValueError(\"FILESYSTEM_TEST_DIR environment variable is required\")\n    return Path(test_root)\n\ndef verify_folder_structure(test_dir: Path) -> bool:\n    \"\"\"Verify that all required folders exist.\"\"\"\n    required_folders = [\"work\", \"life\", \"archives\", \"temp\", \"others\"]\n    missing_folders = []\n    \n    for folder in required_folders:\n        folder_path = test_dir / folder\n        if not folder_path.exists() or not folder_path.is_dir():\n            missing_folders.append(folder)\n    \n    if missing_folders:\n        print(f\"❌ Missing required folders: {missing_folders}\")\n        return False\n    \n    print(\"✅ All required folders exist\")\n    return True\n\ndef verify_work_folder_files(test_dir: Path) -> bool:\n    \"\"\"Verify that work folder contains the required files.\"\"\"\n    work_dir = test_dir / \"work\"\n    required_files = [\n        \"client_list.csv\",\n        \"timesheet.csv\", \n        \"experiment_results.txt\",\n        \"budget_tracker.csv\"\n    ]\n    \n    missing_files = []\n    for file_name in required_files:\n        file_path = work_dir / file_name\n        if not file_path.exists():\n            missing_files.append(file_name)\n    \n    if missing_files:\n        print(f\"❌ Missing required files in work/ folder: {missing_files}\")\n        return False\n    \n    # Count total files in work folder for info\n    total_files = len([f for f in work_dir.iterdir() if f.is_file()])\n    print(f\"✅ All required files found in work/ folder (total: {total_files} files)\")\n    return True\n\ndef verify_life_folder_files(test_dir: Path) -> bool:\n    \"\"\"Verify that life folder contains the required files.\"\"\"\n    life_dir = test_dir / \"life\"\n    required_files = [\n        \"contacts.csv\",\n        \"budget.csv\",\n        \"important_dates.csv\",\n        \"expenses.csv\",\n        \"fitness_log.csv\",\n        \"price_comparisons.csv\",\n        \"book_list.txt\",\n        \"bookmark_export.txt\",\n        \"emergency_contacts.txt\"\n    ]\n    \n    missing_files = []\n    for file_name in required_files:\n        file_path = life_dir / file_name\n        if not file_path.exists():\n            missing_files.append(file_name)\n    \n    if missing_files:\n        print(f\"❌ Missing required files in life/ folder: {missing_files}\")\n        return False\n    \n    # Count total files in life folder for info\n    total_files = len([f for f in life_dir.iterdir() if f.is_file()])\n    print(f\"✅ All required files found in life/ folder (total: {total_files} files)\")\n    return True\n\ndef verify_archives_folder_files(test_dir: Path) -> bool:\n    \"\"\"Verify that archives folder contains the required files.\"\"\"\n    archives_dir = test_dir / \"archives\"\n    required_files = [\n        \"backup_contacts.csv\",\n        \"tax_documents_2022.csv\",\n        \"correspondence_2023.txt\",\n        \"tax_info_2023.csv\"\n    ]\n    \n    missing_files = []\n    for file_name in required_files:\n        file_path = archives_dir / file_name\n        if not file_path.exists():\n            missing_files.append(file_name)\n    \n    if missing_files:\n        print(f\"❌ Missing required files in archives/ folder: {missing_files}\")\n        return False\n    \n    # Count total files in archives folder for info\n    total_files = len([f for f in archives_dir.iterdir() if f.is_file()])\n    print(f\"✅ All required files found in archives/ folder (total: {total_files} files)\")\n    return True\n\ndef verify_temp_folder_files(test_dir: Path) -> bool:\n    \"\"\"Verify that temp folder contains the required files.\"\"\"\n    temp_dir = test_dir / \"temp\"\n    required_files = [\n        \"test_data.csv\",\n        \"draft_letter.txt\"\n    ]\n    \n    missing_files = []\n    for file_name in required_files:\n        file_path = temp_dir / file_name\n        if not file_path.exists():\n            missing_files.append(file_name)\n    \n    if missing_files:\n        print(f\"❌ Missing required files in temp/ folder: {missing_files}\")\n        return False\n    \n    # Count total files in temp folder for info\n    total_files = len([f for f in temp_dir.iterdir() if f.is_file()])\n    print(f\"✅ All required files found in temp/ folder (total: {total_files} files)\")\n    return True\n\ndef verify_others_folder_files(test_dir: Path) -> bool:\n    \"\"\"Verify that others folder exists and can contain any files.\"\"\"\n    others_dir = test_dir / \"others\"\n    \n    if not others_dir.exists() or not others_dir.is_dir():\n        print(\"❌ others/ folder not found\")\n        return False\n    \n    # Count files in others folder for info\n    total_files = len([f for f in others_dir.iterdir() if f.is_file()])\n    print(f\"✅ others/ folder exists (contains {total_files} files)\")\n    return True\n\ndef verify_required_files_in_correct_folders(test_dir: Path) -> bool:\n    \"\"\"Verify that all 19 required files are in their correct designated folders.\"\"\"\n    # Define the mapping of required files to their correct folders\n    required_file_mapping = {\n        \"work\": [\n            \"client_list.csv\",\n            \"timesheet.csv\", \n            \"experiment_results.txt\",\n            \"budget_tracker.csv\"\n        ],\n        \"life\": [\n            \"contacts.csv\",\n            \"budget.csv\",\n            \"important_dates.csv\",\n            \"expenses.csv\",\n            \"fitness_log.csv\",\n            \"price_comparisons.csv\",\n            \"book_list.txt\",\n            \"bookmark_export.txt\",\n            \"emergency_contacts.txt\"\n        ],\n        \"archives\": [\n            \"backup_contacts.csv\",\n            \"tax_documents_2022.csv\",\n            \"correspondence_2023.txt\",\n            \"tax_info_2023.csv\"\n        ],\n        \"temp\": [\n            \"test_data.csv\",\n            \"draft_letter.txt\"\n        ]\n    }\n    \n    missing_files = []\n    \n    # Check each required file is in its correct folder\n    for folder, files in required_file_mapping.items():\n        folder_path = test_dir / folder\n        for file_name in files:\n            file_path = folder_path / file_name\n            if not file_path.exists():\n                missing_files.append(f\"{folder}/{file_name}\")\n    \n    if missing_files:\n        print(f\"❌ Missing required files: {missing_files}\")\n        return False\n    \n    print(\"✅ All 19 required files are in their correct designated folders\")\n    return True\n\ndef verify_no_duplicate_required_files(test_dir: Path) -> bool:\n    \"\"\"Verify that the 19 required files are not duplicated across folders.\"\"\"\n    required_files = [\n        \"client_list.csv\", \"timesheet.csv\", \"experiment_results.txt\", \"budget_tracker.csv\",\n        \"contacts.csv\", \"budget.csv\", \"important_dates.csv\", \"expenses.csv\", \"fitness_log.csv\",\n        \"price_comparisons.csv\", \"book_list.txt\", \"bookmark_export.txt\", \"emergency_contacts.txt\",\n        \"backup_contacts.csv\", \"tax_documents_2022.csv\", \"correspondence_2023.txt\", \"tax_info_2023.csv\",\n        \"test_data.csv\", \"draft_letter.txt\"\n    ]\n    \n    # Check for duplicates of required files\n    file_locations = {}\n    duplicates = []\n    \n    for folder in [\"work\", \"life\", \"archives\", \"temp\", \"others\"]:\n        folder_path = test_dir / folder\n        if folder_path.exists() and folder_path.is_dir():\n            for file_path in folder_path.iterdir():\n                if file_path.is_file() and file_path.name in required_files:\n                    if file_path.name in file_locations:\n                        duplicates.append(f\"{file_path.name} (in {file_locations[file_path.name]} and {folder}/)\")\n                    else:\n                        file_locations[file_path.name] = f\"{folder}/\"\n    \n    if duplicates:\n        print(f\"❌ Duplicate required files found: {duplicates}\")\n        return False\n    \n    print(\"✅ No duplicate required files found\")\n    return True\n\ndef main():\n    \"\"\"Main verification function.\"\"\"\n    test_dir = get_test_directory()\n    print(\"🔍 Verifying Desktop File Organization Task...\")\n    \n    # Define verification steps\n    verification_steps = [\n        (\"Folder Structure\", verify_folder_structure),\n        (\"Required Files in Work Folder\", verify_work_folder_files),\n        (\"Required Files in Life Folder\", verify_life_folder_files),\n        (\"Required Files in Archives Folder\", verify_archives_folder_files),\n        (\"Required Files in Temp Folder\", verify_temp_folder_files),\n        (\"Others Folder Exists\", verify_others_folder_files),\n        (\"All Required Files in Correct Folders\", verify_required_files_in_correct_folders),\n        (\"No Duplicate Required Files\", verify_no_duplicate_required_files),\n    ]\n    \n    # Run all verification steps\n    all_passed = True\n    for step_name, verify_func in verification_steps:\n        print(f\"\\n--- {step_name} ---\")\n        if not verify_func(test_dir):\n            all_passed = False\n    \n    # Final result\n    print(\"\\n\" + \"=\"*50)\n    if all_passed:\n        print(\"✅ Desktop file organization task completed successfully!\")\n        print(\"🎉 All 19 required files are correctly placed in their designated folders\")\n        print(\"📊 Summary:\")\n        print(\"   - work/ folder: 4 required files\")\n        print(\"   - life/ folder: 9 required files\") \n        print(\"   - archives/ folder: 4 required files\")\n        print(\"   - temp/ folder: 2 required files\")\n        print(\"   - others/ folder: can contain any files\")\n        print(\"   - Total required files: 19\")\n        print(\"   - Note: Other files can be placed in any folder\")\n        sys.exit(0)\n    else:\n        print(\"❌ Desktop file organization task verification: FAIL\")\n        print(\"Please check the errors above and ensure all 19 required files are in their correct locations\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()"
}