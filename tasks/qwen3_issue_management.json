{
  "task_id": "qwen3_issue_management",
  "task_name": "Qwen3 Issue Management",
  "category_id": "easyr1",
  "category_name": "EasyR1",
  "description": "Find and reopen all closed Qwen3-related issues with proper tagging for continued tracking and investigation.",
  "author": "Zijian Wu",
  "created_at": "2025-08-15",
  "difficulty": "L3",
  "tags": [
    "issue management"
  ],
  "mcp": [
    "github"
  ],
  "metadata": {},
  "instruction": "The EasyR1 repository has several Qwen3-related issues that were closed but need to be reopened for further investigation. Qwen3 is an important model variant that requires continued attention. I need you to find and reopen all closed issues related to Qwen3 and properly tag them for tracking.\n\n**Step 1: Find All Closed Qwen3 Issues**\nSearch for ALL closed issues that mention 'qwen3' (case-insensitive) in either the title or body. Make note of each issue number and title.\n\n**Step 2: Reopen Each Qwen3 Issue**\nFor every closed issue that contains 'qwen3' (regardless of when it was closed or any other factors), reopen it by changing its state from closed to open.\n\n**Step 3: Add Tracking Label**\nAfter reopening each issue, add the label `qwen3-related` to it. This will help track all Qwen3-related issues in the future.\n\n**Step 4: Create Summary Issue**\nCreate a new issue titled \"Reopened Qwen3 Issues Summary\" with the following content in the body:\n```\n# Qwen3 Issues Reopened\n\nThe following closed issues containing 'qwen3' have been reopened:\n\n[List each reopened issue as: - #NUMBER: TITLE]\n\nTotal issues reopened: [NUMBER]\n\nAll reopened issues have been tagged with the `qwen3-related` label for easy tracking.\n```\n\nAdd the label `qwen3-related` to this summary issue as well.\n\nThis straightforward workflow ensures all Qwen3-related closed issues are reopened and properly tagged for visibility.",
  "verify": "import sys\nimport os\nimport requests\nfrom typing import Dict, List, Optional, Tuple\nfrom dotenv import load_dotenv\n\nload_dotenv(\".mcp_env\")\n\n\ndef _get_github_api(\n    endpoint: str, headers: Dict[str, str]\n) -> Tuple[bool, Optional[Dict]]:\n    \"\"\"Make a GET request to GitHub API and return (success, response).\"\"\"\n    github_org = os.environ.get(\"GITHUB_EVAL_ORG\")\n    url = f\"https://api.github.com/repos/{github_org}/EasyR1/{endpoint}\"\n    try:\n        response = requests.get(url, headers=headers)\n        if response.status_code == 200:\n            return True, response.json()\n        elif response.status_code == 404:\n            return False, None\n        else:\n            print(f\"API error for {endpoint}: {response.status_code}\", file=sys.stderr)\n            return False, None\n    except Exception as e:\n        print(f\"Exception for {endpoint}: {e}\", file=sys.stderr)\n        return False, None\n\n\ndef _search_github_issues(\n    query: str, headers: Dict[str, str]\n) -> Tuple[bool, Optional[List]]:\n    \"\"\"Search GitHub issues using the search API.\"\"\"\n    url = f\"https://api.github.com/search/issues?q={query}&per_page=100\"\n    try:\n        response = requests.get(url, headers=headers)\n        if response.status_code == 200:\n            data = response.json()\n            return True, data.get(\"items\", [])\n        else:\n            print(f\"Search API error: {response.status_code}\", file=sys.stderr)\n            return False, None\n    except Exception as e:\n        print(f\"Search exception: {e}\", file=sys.stderr)\n        return False, None\n\n\ndef _check_qwen3_issues_reopened(headers: Dict[str, str]) -> Tuple[bool, List]:\n    \"\"\"Check if all Qwen3 issues have been reopened and tagged.\"\"\"\n    # Search for all issues mentioning qwen3 (both open and closed)\n    github_org = os.environ.get(\"GITHUB_EVAL_ORG\")\n    success, all_qwen3_issues = _search_github_issues(\n        f\"repo:{github_org}/EasyR1 qwen3\", headers\n    )\n\n    if not success or not all_qwen3_issues:\n        print(\"Error: Could not search for Qwen3 issues\", file=sys.stderr)\n        return False, []\n\n    reopened_issues = []\n    issues_not_reopened = []\n    issues_not_tagged = []\n\n    for issue in all_qwen3_issues:\n        issue_number = issue.get(\"number\")\n        issue_state = issue.get(\"state\")\n        issue_title = issue.get(\"title\", \"\")\n\n        # Check if the issue is open (should be reopened)\n        if issue_state == \"closed\":\n            issues_not_reopened.append(f\"#{issue_number}: {issue_title}\")\n            continue\n\n        # Check if issue has qwen3-related label\n        labels = [label.get(\"name\") for label in issue.get(\"labels\", [])]\n        if \"qwen3-related\" not in labels:\n            issues_not_tagged.append(f\"#{issue_number}: {issue_title}\")\n        else:\n            reopened_issues.append(issue)\n\n    # Report any issues not properly processed\n    if issues_not_reopened:\n        print(\"Error: The following Qwen3 issues are still closed:\", file=sys.stderr)\n        for issue in issues_not_reopened:\n            print(f\"  - {issue}\", file=sys.stderr)\n        return False, []\n\n    if issues_not_tagged:\n        print(\n            \"Error: The following reopened issues are missing 'qwen3-related' label:\",\n            file=sys.stderr,\n        )\n        for issue in issues_not_tagged:\n            print(f\"  - {issue}\", file=sys.stderr)\n        return False, reopened_issues\n\n    return True, reopened_issues\n\n\ndef _check_summary_issue(\n    headers: Dict[str, str], reopened_issues: List\n) -> Optional[Dict]:\n    \"\"\"Check if the summary issue exists with proper content.\"\"\"\n    success, issues = _get_github_api(\"issues?state=all\", headers)\n    if not success or not issues:\n        print(\"Error: Could not fetch issues for summary check\", file=sys.stderr)\n        return None\n\n    expected_title = \"Reopened Qwen3 Issues Summary\"\n\n    for issue in issues:\n        title = issue.get(\"title\", \"\")\n        if title == expected_title:\n            body = issue.get(\"body\", \"\")\n\n            # Check for required content\n            if \"# Qwen3 Issues Reopened\" not in body:\n                print(\"Error: Summary issue missing header\", file=sys.stderr)\n                return None\n\n            if (\n                \"The following closed issues containing 'qwen3' have been reopened:\"\n                not in body\n            ):\n                print(\"Error: Summary issue missing description\", file=sys.stderr)\n                return None\n\n            if \"Total issues reopened:\" not in body:\n                print(\"Error: Summary issue missing total count\", file=sys.stderr)\n                return None\n\n            if (\n                \"All reopened issues have been tagged with the `qwen3-related` label\"\n                not in body\n            ):\n                print(\"Error: Summary issue missing tagging note\", file=sys.stderr)\n                return None\n\n            # Check if all reopened issues are listed\n            for reopened_issue in reopened_issues:\n                issue_num = reopened_issue.get(\"number\")\n                if f\"#{issue_num}\" not in body:\n                    print(\n                        f\"Error: Summary issue missing reference to issue #{issue_num}\",\n                        file=sys.stderr,\n                    )\n                    return None\n\n            # Check if summary issue has the label\n            labels = [label.get(\"name\") for label in issue.get(\"labels\", [])]\n            if \"qwen3-related\" not in labels:\n                print(\n                    \"Error: Summary issue missing 'qwen3-related' label\",\n                    file=sys.stderr,\n                )\n                return None\n\n            return issue\n\n    print(\n        \"Error: Summary issue 'Reopened Qwen3 Issues Summary' not found\",\n        file=sys.stderr,\n    )\n    return None\n\n\ndef verify() -> bool:\n    \"\"\"\n    Verify that all Qwen3-related closed issues have been reopened and tagged.\n    \"\"\"\n    # Get GitHub token\n    github_token = os.environ.get(\"MCP_GITHUB_TOKEN\")\n    if not github_token:\n        print(\"Error: MCP_GITHUB_TOKEN environment variable not set\", file=sys.stderr)\n        return False\n\n    headers = {\n        \"Authorization\": f\"token {github_token}\",\n        \"Accept\": \"application/vnd.github.v3+json\",\n    }\n\n    print(\"Verifying Qwen3 issue reopening workflow...\")\n\n    # 1. Check if all Qwen3 issues have been reopened and tagged\n    print(\"1. Checking if Qwen3 issues are reopened and tagged...\")\n    all_reopened, reopened_issues = _check_qwen3_issues_reopened(headers)\n\n    if not all_reopened:\n        return False\n\n    if not reopened_issues:\n        print(\"Error: No Qwen3 issues found or reopened\", file=sys.stderr)\n        return False\n\n    # 2. Check if summary issue exists\n    print(\"2. Checking summary issue...\")\n    summary_issue = _check_summary_issue(headers, reopened_issues)\n    if not summary_issue:\n        return False\n\n    print(\"\\n✓ Qwen3 issue reopening workflow successfully completed!\")\n    print(f\"✓ Reopened Issues: {len(reopened_issues)} Qwen3-related issues reopened\")\n    print(\"✓ Tagging: All reopened issues tagged with 'qwen3-related' label\")\n    print(\n        f\"✓ Summary: Issue #{summary_issue.get('number')} created with complete list of reopened issues\"\n    )\n    print(\"\\nAll Qwen3-related closed issues have been reopened and properly tagged!\")\n    return True\n\n\nif __name__ == \"__main__\":\n    success = verify()\n    sys.exit(0 if success else 1)\n",
  "model_results": {
    "gemini-2-5-pro": 0,
    "gpt-4-1-mini": 0,
    "claude-4-sonnet": 0,
    "gpt-5": 0,
    "k2": 0,
    "gpt-5-mini": 0,
    "gemini-2-5-flash": 0,
    "gpt-5-nano": 0,
    "gpt-4-1": 0,
    "o3": 0
  }
}