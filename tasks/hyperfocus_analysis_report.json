{
  "task_id": "hyperfocus_analysis_report",
  "task_name": "Hyperfocus Analysis Report",
  "category_id": "self_assessment",
  "category_name": "Self Assessment",
  "description": "Create a hyperfocus analysis report by analyzing high-productivity sessions with challenges.",
  "author": "Xiangyan Liu",
  "created_at": "2025-07-27",
  "difficulty": "L3",
  "tags": [
    "conditional filtering",
    "data aggregation",
    "report generation",
    "visual formatting"
  ],
  "mcp": [
    "notion"
  ],
  "metadata": {
    "ori_template_url": "https://painted-tennis-ebc.notion.site/Self-Assessment-24381626b6d780fe9f56c2ba14ea042d",
    "gt_page_url": "https://www.notion.so/Self-Assessment-Hyperfocus-Analysis-Report-2442b7e8cebd802aa345d8a2d24f3101"
  },
  "instruction": "Go to my Self Assessment page, and then create a hyperfocus analysis report by analyzing sessions with high productivity but significant challenges.\n\n**Task Requirements:**\n1. Create a new page titled \"Hyperfocus Analysis Report\" as a child of the Self Assessment page. The new page should be located between 'Why Use the Term \"Hyperfocus\"?' callout and the following divider line.\n2. Query the \"Hyperfocus Self-Assessment Worksheet\" database to find all sessions where:\n   - Work Completion Rate is greater than 80% (0.8)\n   - At least one challenge is present in the Challenges field\n3. For each qualifying session, create a section with:\n   - A heading showing the date and activity type (format: YYYY-MM-DD Activity)\n   - A bullet list containing:\n     - Focus factors used (e.g., Focus factors: XXX, YYY)\n     - Energy level and mood (format: \"Energy: X/10, Mood: Y/10\")\n     - Challenges faced (e.g., Challenges: XXX, YYY)\n     - Strategies that helped overcome challenges (e.g., Strategies: XXX, YYY)\n     - Work completion rate (format: \"Completion: XX%\")\n4. At the top of the page, add a callout block (type: \"info\") with:\n   - Title: \"Top 2 Most Effective Strategies\"\n   - Content: List the 2 most frequently used strategies from all sessions, each on a new line with format \"â€¢ Strategy Name (used in X sessions)\"\n\n**Structure Requirements:**\n- The page must have the exact title \"Hyperfocus Analysis Report\"\n- Each session section must start with a level 2 heading\n- All session details must be in bullet point format\n- The summary callout must be at the top of the page before any session details",
  "verify": "import sys\nimport re\nfrom notion_client import Client\nfrom tasks.utils import notion_utils\nfrom collections import Counter\n\n\ndef validate_comma_separated(text: str, expected_items: list) -> bool:\n    \"\"\"\n    Validates that a comma-separated list contains expected items (case-insensitive).\n    \"\"\"\n    if not text or not expected_items:\n        return False\n\n    # Extract items from text\n    items = [item.strip().lower() for item in text.split(\",\")]\n    expected_lower = [item.lower() for item in expected_items]\n\n    # Check if all expected items are present\n    for expected in expected_lower:\n        if not any(expected in item or item in expected for item in items):\n            return False\n    return True\n\n\ndef verify(notion: Client, main_id: str = None) -> bool:\n    \"\"\"\n    Verifies that the Hyperfocus Analysis Report has been created correctly.\n    \"\"\"\n    # Find the Self Assessment page\n    self_assessment_page_id = main_id\n    if main_id:\n        found_id, object_type = notion_utils.find_page_or_database_by_id(\n            notion, main_id\n        )\n        if found_id and object_type == \"page\":\n            self_assessment_page_id = found_id\n\n    if not self_assessment_page_id:\n        # Try to find by name\n        self_assessment_page_id = notion_utils.find_page(notion, \"Self Assessment\")\n\n    if not self_assessment_page_id:\n        print(\"Error: Self Assessment page not found.\", file=sys.stderr)\n        return False\n\n    # Find the Hyperfocus Analysis Report page\n    report_page_id = None\n    report_position = -1\n    callout_position = -1\n    divider_position = -1\n    children = notion.blocks.children.list(block_id=self_assessment_page_id).get(\n        \"results\", []\n    )\n    for i, child in enumerate(children):\n        # Track position of callout with \"Why Use the Term\"\n        if child.get(\"type\") == \"callout\":\n            callout_text = notion_utils.get_block_plain_text(child)\n            if \"Why Use the Term\" in callout_text and \"Hyperfocus\" in callout_text:\n                callout_position = i\n\n        # Track position of divider\n        elif child.get(\"type\") == \"divider\":\n            if callout_position != -1 and divider_position == -1:\n                divider_position = i\n\n        # Find the report page\n        elif child.get(\"type\") == \"child_page\":\n            page_data = notion.pages.retrieve(page_id=child[\"id\"])\n            title_prop = (\n                page_data.get(\"properties\", {}).get(\"title\", {}).get(\"title\", [])\n            )\n            if (\n                title_prop\n                and title_prop[0].get(\"plain_text\") == \"Hyperfocus Analysis Report\"\n            ):\n                report_page_id = child[\"id\"]\n                report_position = i\n\n    if not report_page_id:\n        print(\"Error: 'Hyperfocus Analysis Report' page not found.\", file=sys.stderr)\n        return False\n\n    # Verify position\n    if callout_position == -1:\n        print(\n            \"Error: Could not find 'Why Use the Term \\\"Hyperfocus\\\"?' callout.\",\n            file=sys.stderr,\n        )\n        return False\n\n    if divider_position == -1:\n        print(\"Error: Could not find divider after the callout.\", file=sys.stderr)\n        return False\n\n    if not (callout_position < report_position < divider_position):\n        print(\n            f\"Error: Report page is not positioned between callout and divider. Positions: callout={callout_position}, report={report_position}, divider={divider_position}\",\n            file=sys.stderr,\n        )\n        return False\n\n    # Get all blocks from the report page\n    all_blocks = notion_utils.get_all_blocks_recursively(notion, report_page_id)\n\n    # Find the database in the Self Assessment page\n    database_id = None\n    for block in notion_utils.get_all_blocks_recursively(\n        notion, self_assessment_page_id\n    ):\n        if block.get(\"type\") == \"child_database\":\n            db_data = notion.databases.retrieve(database_id=block[\"id\"])\n            db_title = \"\".join(\n                [t.get(\"plain_text\", \"\") for t in db_data.get(\"title\", [])]\n            )\n            if \"Hyperfocus Self-Assessment Worksheet\" in db_title:\n                database_id = block[\"id\"]\n                break\n\n    if not database_id:\n        print(\n            \"Error: Database 'Hyperfocus Self-Assessment Worksheet' not found.\",\n            file=sys.stderr,\n        )\n        return False\n\n    # Query database for sessions with >80% completion rate and challenges\n    query_results = notion.databases.query(\n        database_id=database_id,\n        filter={\n            \"and\": [\n                {\"property\": \"Work Completion Rate\", \"number\": {\"greater_than\": 0.8}},\n                {\"property\": \"Challenges\", \"multi_select\": {\"is_not_empty\": True}},\n            ]\n        },\n    ).get(\"results\", [])\n\n    if not query_results:\n        print(\n            \"Warning: No sessions found with >80% completion rate and challenges.\",\n            file=sys.stderr,\n        )\n        # Still check if the page structure is correct\n\n    # Verify page structure\n    has_callout = False\n    has_top_strategies = False\n    session_count = 0\n    found_sessions = {}  # Track sessions by date for validation\n\n    # Track strategies for validation - count from ALL sessions\n    all_sessions = notion.databases.query(database_id=database_id).get(\"results\", [])\n    all_strategies = []\n    for session in all_sessions:\n        strategies = (\n            session.get(\"properties\", {})\n            .get(\"Key Strategies Used\", {})\n            .get(\"multi_select\", [])\n        )\n        all_strategies.extend([s.get(\"name\") for s in strategies])\n\n    strategy_counts = Counter(all_strategies)\n    top_2_strategies = strategy_counts.most_common(2)\n\n    # Build expected sessions from query results with all data\n    expected_sessions = {}\n    for result in query_results:\n        date_prop = result.get(\"properties\", {}).get(\"Date\", {}).get(\"date\", {})\n        activity_prop = (\n            result.get(\"properties\", {}).get(\"Activity\", {}).get(\"select\", {})\n        )\n        if date_prop and date_prop.get(\"start\") and activity_prop:\n            date_str = date_prop[\"start\"]\n            activity_name = activity_prop.get(\"name\", \"\")\n\n            # Extract all session data for validation\n            focus_factors = [\n                f.get(\"name\", \"\")\n                for f in result.get(\"properties\", {})\n                .get(\"Focus Factors\", {})\n                .get(\"multi_select\", [])\n            ]\n            challenges = [\n                c.get(\"name\", \"\")\n                for c in result.get(\"properties\", {})\n                .get(\"Challenges\", {})\n                .get(\"multi_select\", [])\n            ]\n            strategies = [\n                s.get(\"name\", \"\")\n                for s in result.get(\"properties\", {})\n                .get(\"Key Strategies Used\", {})\n                .get(\"multi_select\", [])\n            ]\n            energy = result.get(\"properties\", {}).get(\"Energy Level\", {}).get(\"number\")\n            mood = result.get(\"properties\", {}).get(\"Mood\", {}).get(\"number\")\n            completion = (\n                result.get(\"properties\", {})\n                .get(\"Work Completion Rate\", {})\n                .get(\"number\")\n            )\n\n            expected_sessions[date_str] = {\n                \"activity\": activity_name,\n                \"focus_factors\": focus_factors,\n                \"challenges\": challenges,\n                \"strategies\": strategies,\n                \"energy\": energy,\n                \"mood\": mood,\n                \"completion\": completion,\n            }\n\n    current_session_date = None\n    current_session_data = None\n    session_bullet_points = {}  # Track bullet points for each session\n\n    for i, block in enumerate(all_blocks):\n        block_type = block.get(\"type\")\n\n        # Check for callout at the top\n        if block_type == \"callout\" and i < 5:  # Should be near the top\n            callout_text = notion_utils.get_block_plain_text(block)\n            if \"Top 2 Most Effective Strategies\" in callout_text:\n                has_callout = True\n                # Check if it contains strategy information\n                s1, n1 = top_2_strategies[0]\n                s2, n2 = top_2_strategies[1]\n                t1 = f\"{s1} (used in {n1} sessions)\"\n                t2 = f\"{s2} (used in {n2} sessions)\"\n\n                if t1 in callout_text and t2 in callout_text:\n                    has_top_strategies = True\n                    break\n\n        # Check for session headings with format YYYY-MM-DD Activity\n        if block_type == \"heading_2\":\n            heading_text = notion_utils.get_block_plain_text(block)\n            # Check if heading matches expected format\n            for date_str, session_data in expected_sessions.items():\n                activity = session_data[\"activity\"]\n                expected_heading = f\"{date_str} {activity}\"\n                if expected_heading in heading_text:\n                    found_sessions[date_str] = session_data\n                    session_count += 1\n                    current_session_date = date_str\n                    current_session_data = session_data\n                    session_bullet_points[date_str] = []\n                    break\n\n        # Check for bullet points with session details\n        if block_type == \"bulleted_list_item\" and current_session_data:\n            bullet_text = notion_utils.get_block_plain_text(block)\n\n            # Track bullet points for current session\n            if current_session_date:\n                session_bullet_points[current_session_date].append(bullet_text)\n\n            # Validate specific bullet point content\n            if bullet_text.startswith(\"Focus factors\"):\n                content = bullet_text.split(\":\", 1)[1].strip()\n                expected_factors = current_session_data.get(\"focus_factors\", [])\n                if not validate_comma_separated(content, expected_factors):\n                    print(\n                        f\"Error: Focus factors mismatch for {current_session_date}. Expected: {expected_factors}, Found: {content}\",\n                        file=sys.stderr,\n                    )\n                    return False\n\n            elif \"Energy\" in bullet_text and \"Mood\" in bullet_text:\n                # Extract energy and mood values\n                energy_match = re.search(r\"Energy:\\s*(\\d+)/10\", bullet_text)\n                mood_match = re.search(r\"Mood:\\s*(\\d+)/10\", bullet_text)\n\n                if energy_match and mood_match:\n                    found_energy = int(energy_match.group(1))\n                    found_mood = int(mood_match.group(1))\n                    expected_energy = current_session_data.get(\"energy\")\n                    expected_mood = current_session_data.get(\"mood\")\n\n                    if found_energy != expected_energy or found_mood != expected_mood:\n                        print(\n                            f\"Error: Energy/Mood mismatch for {current_session_date}. Expected: Energy: {expected_energy}/10, Mood: {expected_mood}/10\",\n                            file=sys.stderr,\n                        )\n                        return False\n                else:\n                    print(\n                        f\"Error: Invalid Energy/Mood format for {current_session_date}\",\n                        file=sys.stderr,\n                    )\n                    return False\n\n            elif bullet_text.startswith(\"Challenges\"):\n                content = bullet_text.split(\":\", 1)[1].strip()\n                expected_challenges = current_session_data.get(\"challenges\", [])\n                if not validate_comma_separated(content, expected_challenges):\n                    print(\n                        f\"Error: Challenges mismatch for {current_session_date}. Expected: {expected_challenges}, Found: {content}\",\n                        file=sys.stderr,\n                    )\n                    return False\n\n            elif bullet_text.startswith(\"Strategies\"):\n                content = bullet_text.split(\":\", 1)[1].strip()\n                expected_strategies = current_session_data.get(\"strategies\", [])\n                if len(expected_strategies) > 0 and not validate_comma_separated(\n                    content, expected_strategies\n                ):\n                    print(\n                        f\"Error: Strategies mismatch for {current_session_date}. Expected: {expected_strategies}, Found: {content}\",\n                        file=sys.stderr,\n                    )\n                    return False\n\n            elif bullet_text.startswith(\"Completion\"):\n                # Extract completion percentage\n                completion_match = re.search(r\"Completion:\\s*(\\d+)%\", bullet_text)\n\n                if completion_match:\n                    found_completion = int(completion_match.group(1))\n                    expected_completion = int(\n                        current_session_data.get(\"completion\", 0) * 100\n                    )\n\n                    if found_completion != expected_completion:\n                        print(\n                            f\"Error: Completion rate mismatch for {current_session_date}. Expected: {expected_completion}%, Found: {found_completion}%\",\n                            file=sys.stderr,\n                        )\n                        return False\n                else:\n                    print(\n                        f\"Error: Invalid completion format for {current_session_date}\",\n                        file=sys.stderr,\n                    )\n                    return False\n\n    # Verify all sessions have complete bullet points\n    for date_str, bullets in session_bullet_points.items():\n        bullets_text = \" \".join(bullets)\n        required_items = [\n            \"Focus factors\",\n            \"Energy:\",\n            \"Mood:\",\n            \"Challenges\",\n            \"Strategies\",\n            \"Completion\",\n        ]\n        missing_items = []\n\n        for item in required_items:\n            if item not in bullets_text:\n                missing_items.append(item)\n\n        if missing_items:\n            print(\n                f\"Error: Missing bullet points for session {date_str}: {', '.join(missing_items)}\",\n                file=sys.stderr,\n            )\n            return False\n\n    # Verify all requirements\n    if not has_callout:\n        print(\n            \"Error: Missing callout block with 'Top 2 Most Effective Strategies'.\",\n            file=sys.stderr,\n        )\n        return False\n\n    if not has_top_strategies and len(top_2_strategies) > 0:\n        print(\"Error: Callout doesn't contain strategy information.\", file=sys.stderr)\n        return False\n\n    if query_results and session_count == 0:\n        print(\"Error: No session sections found with proper headings.\", file=sys.stderr)\n        return False\n\n    # Check if all expected sessions are present\n    missing_sessions = []\n    for date_str in expected_sessions.keys():\n        if date_str not in found_sessions:\n            missing_sessions.append(date_str)\n\n    if missing_sessions:\n        print(\n            f\"Error: Missing session sections for dates: {', '.join(missing_sessions)}\",\n            file=sys.stderr,\n        )\n        return False\n\n    if query_results and session_count < len(query_results):\n        print(\n            f\"Warning: Found {session_count} session sections but expected {len(query_results)}.\",\n            file=sys.stderr,\n        )\n\n    print(\n        \"Success: Hyperfocus Analysis Report created with proper structure and content.\"\n    )\n    return True\n\n\ndef main():\n    \"\"\"\n    Executes the verification process and exits with a status code.\n    \"\"\"\n    notion = notion_utils.get_notion_client()\n    main_id = sys.argv[1] if len(sys.argv) > 1 else None\n    if verify(notion, main_id):\n        sys.exit(0)\n    else:\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()\n"
}