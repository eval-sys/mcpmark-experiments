{
  "task_id": "find_rag_commit",
  "task_name": "Find Rag Commit",
  "category_id": "build_your_own_x",
  "category_name": "Build Your Own X",
  "description": "Identify the specific commit SHA that added the RAG for Document Search entry to the repository.",
  "author": "Xiangyan Liu",
  "created_at": "2025-08-15",
  "difficulty": "L3",
  "tags": [
    "repository analysis"
  ],
  "mcp": [
    "github"
  ],
  "meta_data": {
    "stateType": "url",
    "stateContent": null,
    "stateUrl": "https://github.com/mcpmark-source/build-your-own-x",
    "stateOriginalUrl": "https://github.com/codecrafters-io/build-your-own-x"
  },
  "instruction": "Find out the specific commit SHA of adding an entry about \"RAG for Document Search\". After finding this information, create an ANSWER.md file in the repository with the content being the commit SHA (e.g., 023dfa35694db2709057488ad338afdbc89fb226).\n\nHint: It should be in an \"AI model\" section I think.",
  "verify": "import sys\nimport os\nimport requests\nfrom typing import Dict, Optional, Tuple\nimport base64\nfrom dotenv import load_dotenv\n\n\ndef _get_github_api(\n    endpoint: str, headers: Dict[str, str], org: str, repo: str = \"build-your-own-x\"\n) -> Tuple[bool, Optional[Dict]]:\n    \"\"\"Make a GET request to GitHub API and return (success, response).\"\"\"\n    url = f\"https://api.github.com/repos/{org}/{repo}/{endpoint}\"\n    try:\n        response = requests.get(url, headers=headers)\n        if response.status_code == 200:\n            return True, response.json()\n        elif response.status_code == 404:\n            return False, None\n        else:\n            print(f\"API error for {endpoint}: {response.status_code}\", file=sys.stderr)\n            return False, None\n    except Exception as e:\n        print(f\"Exception for {endpoint}: {e}\", file=sys.stderr)\n        return False, None\n\n\ndef _get_file_content(\n    file_path: str,\n    headers: Dict[str, str],\n    org: str,\n    repo: str = \"build-your-own-x\",\n    ref: str = \"master\",\n) -> Optional[str]:\n    \"\"\"Get the content of a file from the repository.\"\"\"\n    success, result = _get_github_api(\n        f\"contents/{file_path}?ref={ref}\", headers, org, repo\n    )\n    if not success or not result:\n        return None\n\n    try:\n        content = base64.b64decode(result.get(\"content\", \"\")).decode(\"utf-8\")\n        return content\n    except Exception as e:\n        print(f\"Content decode error for {file_path}: {e}\", file=sys.stderr)\n        return None\n\n\ndef verify_task() -> bool:\n    \"\"\"Verify the find RAG commit SHA task.\"\"\"\n    # Load environment variables from .mcp_env\n    load_dotenv(\".mcp_env\")\n\n    # Get GitHub token and org\n    github_token = os.environ.get(\"MCP_GITHUB_TOKEN\")\n    github_org = os.environ.get(\"GITHUB_EVAL_ORG\")\n\n    if not github_token:\n        print(\"Error: MCP_GITHUB_TOKEN environment variable not set\", file=sys.stderr)\n        return False\n\n    if not github_org:\n        print(\"Error: GITHUB_EVAL_ORG environment variable not set\", file=sys.stderr)\n        return False\n\n    headers = {\n        \"Authorization\": f\"Bearer {github_token}\",\n        \"Accept\": \"application/vnd.github.v3+json\",\n    }\n\n    print(\"Verifying RAG commit SHA task...\")\n\n    # Expected commit SHA for RAG for Document Search\n    expected_sha = \"048cd3b3de70e4b429057891576ea394a50cdf48\"\n\n    # 1. Check if ANSWER.md exists in the repository\n    print(\"1. Checking if ANSWER.md exists...\")\n    content = _get_file_content(\"ANSWER.md\", headers, github_org)\n    if not content:\n        print(\"Error: ANSWER.md not found in repository\", file=sys.stderr)\n        return False\n    print(\"✓ ANSWER.md found\")\n\n    # 2. Check the content matches expected SHA\n    print(\"2. Checking commit SHA...\")\n    content = content.strip()\n    \n    if content != expected_sha:\n        print(f\"Error: Incorrect commit SHA. Expected {expected_sha}, got: {content}\", file=sys.stderr)\n        return False\n    print(\"✓ Commit SHA is correct\")\n\n    # 3. Verify the commit exists\n    print(\"3. Verifying the commit exists...\")\n    success, commit_data = _get_github_api(f\"commits/{content}\", headers, github_org)\n    if not success or not commit_data:\n        print(f\"Error: Commit {content} not found in repository\", file=sys.stderr)\n        return False\n    print(f\"✓ Commit {content} exists\")\n\n    print(\"\\n✅ All verification checks passed!\")\n    print(\"Task completed successfully:\")\n    print(f\"  - ANSWER.md created with correct commit SHA: {content}\")\n    print(f\"  - Commit exists in the repository\")\n    print(f\"  - Commit message: {commit_data.get('commit', {}).get('message', '')}\")\n\n    return True\n\n\nif __name__ == \"__main__\":\n    success = verify_task()\n    sys.exit(0 if success else 1)"
}