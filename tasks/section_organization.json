{
  "task_id": "section_organization",
  "task_name": "Section Organization",
  "category_id": "standard_operating_procedure",
  "category_name": "Standard Operating Procedure",
  "description": "Reorganize the Standard Operating Procedure page by swapping sections and creating a column layout.",
  "author": "Xiangyan Liu",
  "created_at": "2025-08-11",
  "difficulty": "L3",
  "tags": [
    "content organization",
    "cross-reference linking",
    "visual formatting"
  ],
  "mcp": [
    "notion"
  ],
  "meta_data": {
    "stateType": "url",
    "stateContent": null,
    "stateUrl": "https://painted-tennis-ebc.notion.site/Standard-Operating-Procedure-24381626b6d780a8b678f9e62ae5b152",
    "stateOriginalUrl": "https://www.notion.so/marketplace/templates/standard-operating-procedure"
  },
  "instruction": "# Task: Reorganize Standard Operating Procedure Page Sections\n\n## Objective\nModify the structure of the Standard Operating Procedure page in Notion by reorganizing sections through swapping and creating a column layout.\n\n## Requirements\n\n### Step 1: Swap Sections\n- Navigate to the Standard Operating Procedure page\n- Swap the positions of the \"Terminologies\" and \"Roles & responsibilities\" sections\n- Preserve all content within each section exactly as is\n- Maintain the original formatting and structure of each section\n\n### Step 2: Create Column Layout\n- After swapping, arrange the \"Tools\" section and the section immediately below it (\"Terminologies\") into a 2-column layout\n- Position the \"Tools\" section in the left column\n- Position the \"Terminologies\" section in the right column\n- In the \"Tools\" column, add links to the Notion and Figma pages using appropriate reference blocks\n- Preserve the original child pages from the \"Tools\" section in a toggle block placed below the column layout, with the toggle titled \"original pages\"",
  "verify": "import sys\nfrom notion_client import Client\nfrom tasks.utils import notion_utils\n\ndef verify(notion: Client, main_id: str = None) -> bool:\n    \"\"\"\n    Verifies that the Standard Operating Procedure page has been reorganized correctly.\n    \"\"\"\n    # Step 1: Find the Standard Operating Procedure page\n    if main_id:\n        found_id, object_type = notion_utils.find_page_or_database_by_id(notion, main_id)\n        if not found_id or object_type != 'page':\n            print(\"Error: Standard Operating Procedure page not found.\", file=sys.stderr)\n            return False\n    else:\n        # Try to find the page by searching\n        found_id = notion_utils.find_page(notion, \"Standard Operating Procedure\")\n        if not found_id:\n            print(\"Error: Standard Operating Procedure page not found.\", file=sys.stderr)\n            return False\n    \n    print(f\"Found Standard Operating Procedure page: {found_id}\")\n    \n    # Get all blocks from the page\n    all_blocks = notion_utils.get_all_blocks_recursively(notion, found_id)\n    print(f\"Found {len(all_blocks)} blocks\")\n    \n    print(\"Starting verification...\")\n    \n    # Step 2: Verify the structure and section order\n    print(\"2. Checking page structure and section order...\")\n    \n    # Expected structure after the initial content and dividers\n    # We'll look for main sections by their headings\n    roles_index = None\n    tools_column_index = None\n    toggle_index = None\n    procedure_index = None\n    \n    for i, block in enumerate(all_blocks):\n        if block.get(\"type\") == \"heading_2\":\n            heading_text = \"\"\n            rich_text = block.get(\"heading_2\", {}).get(\"rich_text\", [])\n            if rich_text:\n                heading_text = rich_text[0].get(\"text\", {}).get(\"content\", \"\")\n            \n            if heading_text == \"Roles & responsibilities\":\n                roles_index = i\n                print(f\"✓ Found 'Roles & responsibilities' section at index {i}\")\n            elif heading_text == \"Procedure\":\n                procedure_index = i\n                print(f\"✓ Found 'Procedure' section at index {i}\")\n    \n    # Check for column_list (containing Tools and Terminologies)\n    for i, block in enumerate(all_blocks):\n        if block.get(\"type\") == \"column_list\":\n            # Check if this is the right column_list (should be after Roles & responsibilities)\n            if roles_index and i > roles_index:\n                tools_column_index = i\n                print(f\"✓ Found column_list at index {i}\")\n                break\n    \n    # Check for toggle block with \"original pages\"\n    for i, block in enumerate(all_blocks):\n        if block.get(\"type\") == \"toggle\":\n            toggle_text = \"\"\n            rich_text = block.get(\"toggle\", {}).get(\"rich_text\", [])\n            if rich_text:\n                toggle_text = rich_text[0].get(\"text\", {}).get(\"content\", \"\")\n            \n            if toggle_text.lower() == \"original pages\":\n                toggle_index = i\n                print(f\"✓ Found 'original pages' toggle at index {i}\")\n                break\n    \n    # Step 3: Verify section order\n    print(\"3. Verifying section order...\")\n    \n    if roles_index is None:\n        print(\"Error: 'Roles & responsibilities' section not found.\", file=sys.stderr)\n        return False\n    \n    if tools_column_index is None:\n        print(\"Error: Column layout not found.\", file=sys.stderr)\n        return False\n    \n    if toggle_index is None:\n        print(\"Error: 'original pages' toggle not found.\", file=sys.stderr)\n        return False\n    \n    if procedure_index is None:\n        print(\"Error: 'Procedure' section not found.\", file=sys.stderr)\n        return False\n    \n    # Verify order: Roles & responsibilities < column_list < toggle < Procedure\n    if not (roles_index < tools_column_index < toggle_index < procedure_index):\n        print(\"Error: Sections are not in the correct order.\", file=sys.stderr)\n        print(f\"  Expected order: Roles & responsibilities ({roles_index}) < column_list ({tools_column_index}) < toggle ({toggle_index}) < Procedure ({procedure_index})\", file=sys.stderr)\n        return False\n    \n    print(\"✓ Sections are in the correct order\")\n    \n    # Step 4: Verify column_list structure\n    print(\"4. Verifying column layout structure...\")\n    \n    column_list_block = all_blocks[tools_column_index]\n    column_list_id = column_list_block.get(\"id\")\n    \n    # Get direct children of column_list (should be columns only)\n    try:\n        column_response = notion.blocks.children.list(block_id=column_list_id)\n        column_children = column_response.get(\"results\", [])\n    except Exception as e:\n        print(f\"Error getting column children: {e}\", file=sys.stderr)\n        return False\n    \n    if len(column_children) < 2:\n        print(f\"Error: Column list should have at least 2 columns, found {len(column_children)}.\", file=sys.stderr)\n        return False\n    \n    # Verify left column (Tools)\n    left_column = column_children[0]\n    if left_column.get(\"type\") != \"column\":\n        print(\"Error: First child of column_list should be a column.\", file=sys.stderr)\n        return False\n    \n    left_column_id = left_column.get(\"id\")\n    left_column_blocks = notion_utils.get_all_blocks_recursively(notion, left_column_id)\n    \n    # Check for Tools heading and link_to_page blocks in left column\n    tools_heading_found = False\n    link_to_page_count = 0\n    for block in left_column_blocks:\n        if block.get(\"type\") == \"heading_2\":\n            heading_text = block.get(\"heading_2\", {}).get(\"rich_text\", [{}])[0].get(\"text\", {}).get(\"content\", \"\")\n            if heading_text == \"Tools\":\n                tools_heading_found = True\n                print(\"✓ Found 'Tools' heading in left column\")\n        elif block.get(\"type\") == \"link_to_page\":\n            link_to_page_count += 1\n    \n    if not tools_heading_found:\n        print(\"Error: 'Tools' heading not found in left column.\", file=sys.stderr)\n        return False\n    \n    # Check for link_to_page blocks in Tools column\n    if link_to_page_count < 2:\n        print(f\"Error: Tools column should have at least 2 link_to_page blocks, found {link_to_page_count}.\", file=sys.stderr)\n        return False\n    \n    print(f\"✓ Found {link_to_page_count} link_to_page blocks in Tools column\")\n    \n    # Verify right column (Terminologies)\n    right_column = column_children[1]\n    if right_column.get(\"type\") != \"column\":\n        print(\"Error: Second child of column_list should be a column.\", file=sys.stderr)\n        return False\n    \n    right_column_id = right_column.get(\"id\")\n    right_column_blocks = notion_utils.get_all_blocks_recursively(notion, right_column_id)\n    \n    # Check for Terminologies heading in right column\n    terminologies_heading_found = False\n    for block in right_column_blocks:\n        if block.get(\"type\") == \"heading_2\":\n            heading_text = block.get(\"heading_2\", {}).get(\"rich_text\", [{}])[0].get(\"text\", {}).get(\"content\", \"\")\n            if heading_text == \"Terminologies\":\n                terminologies_heading_found = True\n                print(\"✓ Found 'Terminologies' heading in right column\")\n                break\n    \n    if not terminologies_heading_found:\n        print(\"Error: 'Terminologies' heading not found in right column.\", file=sys.stderr)\n        return False\n    \n    # Step 5: Verify toggle block content\n    print(\"5. Verifying toggle block content...\")\n    \n    toggle_block = all_blocks[toggle_index]\n    toggle_id = toggle_block.get(\"id\")\n    \n    # Get direct children of toggle\n    try:\n        toggle_response = notion.blocks.children.list(block_id=toggle_id)\n        toggle_children = toggle_response.get(\"results\", [])\n    except Exception as e:\n        print(f\"Error getting toggle children: {e}\", file=sys.stderr)\n        return False\n    \n    # Check for child_page blocks (Notion and Figma)\n    notion_page_found = False\n    figma_page_found = False\n    \n    for block in toggle_children:\n        if block.get(\"type\") == \"child_page\":\n            title = block.get(\"child_page\", {}).get(\"title\", \"\")\n            if title == \"Notion\":\n                notion_page_found = True\n                print(\"✓ Found 'Notion' child page in toggle\")\n            elif title == \"Figma\":\n                figma_page_found = True\n                print(\"✓ Found 'Figma' child page in toggle\")\n    \n    if not notion_page_found:\n        print(\"Error: 'Notion' child page not found in toggle block.\", file=sys.stderr)\n        return False\n    \n    if not figma_page_found:\n        print(\"Error: 'Figma' child page not found in toggle block.\", file=sys.stderr)\n        return False\n    \n    # Step 6: Verify that original sections no longer exist at top level\n    print(\"6. Verifying original sections have been removed from top level...\")\n    \n    # Check that there's no standalone \"Terminologies\" heading before \"Roles & responsibilities\"\n    for i in range(0, roles_index if roles_index else len(all_blocks)):\n        block = all_blocks[i]\n        if block.get(\"type\") == \"heading_2\":\n            heading_text = block.get(\"heading_2\", {}).get(\"rich_text\", [{}])[0].get(\"text\", {}).get(\"content\", \"\")\n            if heading_text == \"Terminologies\":\n                print(\"Error: 'Terminologies' section found before 'Roles & responsibilities'.\", file=sys.stderr)\n                return False\n    \n    # Check that there's no standalone \"Tools\" heading outside the column\n    tools_outside_column = False\n    for i, block in enumerate(all_blocks):\n        if i == tools_column_index:\n            continue  # Skip the column_list itself\n        if block.get(\"type\") == \"heading_2\":\n            heading_text = block.get(\"heading_2\", {}).get(\"rich_text\", [{}])[0].get(\"text\", {}).get(\"content\", \"\")\n            if heading_text == \"Tools\" and i != tools_column_index:\n                # Check if this is NOT inside the column\n                parent_id = block.get(\"parent\", {}).get(\"block_id\")\n                if parent_id != left_column_id:\n                    tools_outside_column = True\n                    break\n    \n    if tools_outside_column:\n        print(\"Error: Standalone 'Tools' section found outside column layout.\", file=sys.stderr)\n        return False\n    \n    print(\"✓ Original sections have been properly reorganized\")\n    \n    # Step 7: Final summary\n    print(\"\\n7. Final verification summary:\")\n    print(\"✓ 'Roles & responsibilities' and 'Terminologies' sections have been swapped\")\n    print(\"✓ 'Tools' and 'Terminologies' are in a 2-column layout\")\n    print(\"✓ Links to Notion and Figma pages are in the Tools column\")\n    print(\"✓ Original child pages are preserved in 'original pages' toggle\")\n    print(\"✓ Page structure is correct\")\n    \n    print(\"\\n✅ All verification checks passed!\")\n    return True\n\ndef main():\n    \"\"\"\n    Executes the verification process and exits with a status code.\n    \"\"\"\n    notion = notion_utils.get_notion_client()\n    main_id = sys.argv[1] if len(sys.argv) > 1 else None\n    if verify(notion, main_id):\n        sys.exit(0)\n    else:\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()"
}