{
  "task_id": "employee_project_tracking",
  "task_name": "Employee Project Tracking",
  "category_id": "employees",
  "category_name": "Employees",
  "description": "Build project tracking system from scratch with tables for projects, assignments, milestones, and performance indexes.",
  "author": "Lingxiao Du",
  "created_at": "2025-08-14",
  "difficulty": "L3",
  "tags": [
    "schema design",
    "data migration",
    "data integrity enforcement"
  ],
  "mcp": [
    "postgres"
  ],
  "metadata": {},
  "instruction": "Create and manage a comprehensive employee project tracking system using database schema design and data manipulation operations. The IT team needs you to build the database structure from scratch and populate it with specific initial data to support project management workflows.\n\n## Your Tasks:\n\n1. **Create the project tracking tables** — build three new tables in the `employees` schema:\n   \n   **Table 1: `employee_projects`**\n   * `project_id` (integer, primary key, auto-increment)\n   * `project_name` (varchar(100), not null)\n   * `start_date` (date, not null)\n   * `end_date` (date)\n   * `budget` (decimal(10,2))\n   * `status` (varchar(20), default 'active')\n\n   **Table 2: `project_assignments`**\n   * `assignment_id` (integer, primary key, auto-increment)\n   * `employee_id` (bigint, not null)\n   * `project_id` (integer, not null)\n   * `role` (varchar(50), not null)\n   * `allocation_percentage` (integer, check constraint: between 1 and 100)\n   * `assigned_date` (date, not null)\n\n   **Table 3: `project_milestones`**\n   * `milestone_id` (integer, primary key, auto-increment)\n   * `project_id` (integer, not null)\n   * `milestone_name` (varchar(100), not null)\n   * `due_date` (date, not null)\n   * `completed` (boolean, default false)\n\n2. **Add foreign key relationships**:\n   * `project_assignments.employee_id` → `employees.employee.id`\n   * `project_assignments.project_id` → `employees.employee_projects.project_id`\n   * `project_milestones.project_id` → `employees.employee_projects.project_id`\n\n3. **Create performance indexes**:\n   * Index named `idx_projects_status` on `employee_projects.status`\n   * Composite index named `idx_assignments_emp_proj` on `project_assignments(employee_id, project_id)`\n   * Index named `idx_milestones_due_date` on `project_milestones.due_date`\n\n4. **Insert exactly this initial data**:\n   \n   **Into `employee_projects`:**\n   * Project 1: name='Database Modernization', start_date='2024-01-15', end_date='2024-06-30', budget=250000.00, status='active'\n   * Project 2: name='Employee Portal Upgrade', start_date='2024-02-01', end_date='2024-05-15', budget=180000.00, status='active'  \n   * Project 3: name='HR Analytics Dashboard', start_date='2023-11-01', end_date='2024-01-31', budget=120000.00, status='active'\n\n   **Into `project_assignments` (assign ALL current employees):**\n   * All employees from Development department → Project 1 ('Database Modernization'), role='Developer', allocation=80%\n   * All employees from Human Resources department → Project 2 ('Employee Portal Upgrade'), role='Business Analyst', allocation=60%\n   * All employees from Marketing department → Project 3 ('HR Analytics Dashboard'), role='Marketing Specialist', allocation=40%\n   * All employees from Finance department → Project 1 ('Database Modernization'), role='Financial Analyst', allocation=30%\n   * All employees from Sales department → Project 2 ('Employee Portal Upgrade'), role='Sales Representative', allocation=50%\n   * All employees from Research department → Project 3 ('HR Analytics Dashboard'), role='Research Analyst', allocation=70%\n   * All employees from Production department → Project 1 ('Database Modernization'), role='Production Coordinator', allocation=45%\n   * All employees from Quality Management department → Project 2 ('Employee Portal Upgrade'), role='QA Specialist', allocation=85%\n   * All employees from Customer Service department → Project 3 ('HR Analytics Dashboard'), role='Customer Success', allocation=35%\n   * All employees should have assigned_date='2024-01-01'\n\n   **Into `project_milestones`:**\n   * Project 1: 'Design Phase Complete' due '2024-03-01', 'Implementation Complete' due '2024-05-15'\n   * Project 2: 'UI/UX Approval' due '2024-03-15', 'Beta Testing' due '2024-04-30'\n   * Project 3: 'Data Collection' due '2023-12-15', 'Dashboard Launch' due '2024-01-25'\n\n5. **Perform these exact data updates**:\n   * Update Project 3 ('HR Analytics Dashboard') status to 'completed'\n   * Increase budget by 15% for all projects with status 'active'\n   * Mark the milestone 'Data Collection' as completed (set completed = true)\n\n6. **Add new column to `employee_projects`**:\n   * Add `priority` column (varchar(10)) with check constraint allowing only 'low', 'medium', 'high'\n   * Update all existing projects: set priority='high' for 'Database Modernization', priority='medium' for others\n",
  "verify": "\"\"\"\nVerification script for PostgreSQL Task 5: Database Schema and Data Operations\n\"\"\"\n\nimport os\nimport sys\nimport psycopg2\nfrom decimal import Decimal\n\ndef rows_match(actual_row, expected_row):\n    \"\"\"\n    Compare two rows with appropriate tolerance.\n    For Decimal types: allows 0.1 tolerance\n    For date types: convert to string for comparison\n    For other types: requires exact match\n    \"\"\"\n    if len(actual_row) != len(expected_row):\n        return False\n    \n    for actual, expected in zip(actual_row, expected_row):\n        if isinstance(actual, Decimal) and isinstance(expected, (Decimal, float, int)):\n            if abs(float(actual) - float(expected)) > 0.1:\n                return False\n        elif hasattr(actual, 'strftime'):  # datetime.date or datetime.datetime\n            if str(actual) != str(expected):\n                return False\n        elif actual != expected:\n            return False\n    \n    return True\n\ndef get_connection_params() -> dict:\n    \"\"\"Get database connection parameters.\"\"\"\n    return {\n        \"host\": os.getenv(\"POSTGRES_HOST\", \"localhost\"),\n        \"port\": int(os.getenv(\"POSTGRES_PORT\", 5432)),\n        \"database\": os.getenv(\"POSTGRES_DATABASE\"),\n        \"user\": os.getenv(\"POSTGRES_USERNAME\"),\n        \"password\": os.getenv(\"POSTGRES_PASSWORD\")\n    }\n\ndef verify_table_structures(conn) -> bool:\n    \"\"\"Verify that all three tables were created with correct structure.\"\"\"\n    with conn.cursor() as cur:\n        # Check if tables exist\n        cur.execute(\"\"\"\n            SELECT table_name FROM information_schema.tables \n            WHERE table_schema = 'employees' \n            AND table_name IN ('employee_projects', 'project_assignments', 'project_milestones')\n            ORDER BY table_name\n        \"\"\")\n        tables = [row[0] for row in cur.fetchall()]\n        \n        if len(tables) != 3:\n            print(f\"❌ Expected 3 tables, found {len(tables)}: {tables}\")\n            return False\n            \n        # Check foreign key constraints exist\n        cur.execute(\"\"\"\n            SELECT COUNT(*) FROM information_schema.table_constraints \n            WHERE table_schema = 'employees' \n            AND constraint_type = 'FOREIGN KEY'\n            AND table_name IN ('project_assignments', 'project_milestones')\n        \"\"\")\n        fkey_count = cur.fetchone()[0]\n        \n        if fkey_count != 3:\n            print(f\"❌ Expected 3 foreign key constraints, found {fkey_count}\")\n            return False\n            \n        # Check if priority column exists (added in step 6)\n        cur.execute(\"\"\"\n            SELECT COUNT(*) FROM information_schema.columns \n            WHERE table_schema = 'employees' AND table_name = 'employee_projects'\n            AND column_name = 'priority'\n        \"\"\")\n        priority_exists = cur.fetchone()[0]\n        \n        if priority_exists == 0:\n            print(\"❌ Priority column was not added to employee_projects table\")\n            return False\n            \n        print(\"✅ Table structures are correct\")\n        return True\n\ndef verify_indexes(conn) -> bool:\n    \"\"\"Verify that required indexes were created.\"\"\"\n    with conn.cursor() as cur:\n        # Check for specific indexes\n        cur.execute(\"\"\"\n            SELECT COUNT(*) \n            FROM pg_indexes \n            WHERE schemaname = 'employees' \n            AND indexname IN ('idx_projects_status', 'idx_assignments_emp_proj', 'idx_milestones_due_date')\n        \"\"\")\n        index_count = cur.fetchone()[0]\n        \n        if index_count != 3:\n            print(f\"❌ Expected 3 required indexes, got {index_count}\")\n            return False\n                \n        print(\"✅ All required indexes are present\")\n        return True\n\ndef verify_project_data(conn) -> bool:\n    \"\"\"Verify that project data was inserted and updated correctly.\"\"\"\n    with conn.cursor() as cur:\n        # Check project data after updates\n        cur.execute(\"\"\"\n            SELECT project_name, start_date, end_date, budget, status, priority\n            FROM employees.employee_projects\n            ORDER BY project_name\n        \"\"\")\n        projects = cur.fetchall()\n        \n        if len(projects) != 3:\n            print(f\"❌ Expected 3 projects, found {len(projects)}\")\n            return False\n            \n        # Expected final state after all updates\n        expected = {\n            'Database Modernization': ('2024-01-15', '2024-06-30', 287500.00, 'active', 'high'),\n            'Employee Portal Upgrade': ('2024-02-01', '2024-05-15', 207000.00, 'active', 'medium'),\n            'HR Analytics Dashboard': ('2023-11-01', '2024-01-31', 120000.00, 'completed', 'medium')\n        }\n        \n        for project in projects:\n            name = project[0]\n            if name not in expected:\n                print(f\"❌ Unexpected project: {name}\")\n                return False\n                \n            exp = expected[name]\n            # Use rows_match for comparison\n            expected_row = (name,) + exp\n            if not rows_match(project, expected_row):\n                print(f\"❌ Project {name} data mismatch: expected {expected_row}, got {project}\")\n                return False\n                \n        print(\"✅ Project data is correct\")\n        return True\n\ndef verify_assignment_data(conn) -> bool:\n    \"\"\"Verify that all current employees were assigned to projects by department.\"\"\"\n    with conn.cursor() as cur:\n        # Check total assignment count matches current employee count\n        cur.execute(\"\"\"\n            SELECT COUNT(*) FROM employees.project_assignments\n        \"\"\")\n        assignment_count = cur.fetchone()[0]\n        \n        cur.execute(\"\"\"\n            SELECT COUNT(DISTINCT de.employee_id) \n            FROM employees.department_employee de\n            WHERE de.to_date = '9999-01-01'\n        \"\"\")\n        current_employee_count = cur.fetchone()[0]\n        \n        if assignment_count != current_employee_count:\n            print(f\"❌ Expected {current_employee_count} assignments, found {assignment_count}\")\n            return False\n            \n        # Check department-project mapping\n        cur.execute(\"\"\"\n            SELECT d.dept_name, pa.project_id, pa.role, pa.allocation_percentage, COUNT(*)\n            FROM employees.project_assignments pa\n            JOIN employees.department_employee de ON pa.employee_id = de.employee_id AND de.to_date = '9999-01-01'\n            JOIN employees.department d ON de.department_id = d.id\n            JOIN employees.employee_projects ep ON pa.project_id = ep.project_id\n            GROUP BY d.dept_name, pa.project_id, pa.role, pa.allocation_percentage\n            ORDER BY d.dept_name\n        \"\"\")\n        dept_assignments = cur.fetchall()\n        \n        # Expected department-project mappings\n        expected_mappings = {\n            'Development': (1, 'Developer', 80),\n            'Human Resources': (2, 'Business Analyst', 60),\n            'Marketing': (3, 'Marketing Specialist', 40),\n            'Finance': (1, 'Financial Analyst', 30),\n            'Sales': (2, 'Sales Representative', 50),\n            'Research': (3, 'Research Analyst', 70),\n            'Production': (1, 'Production Coordinator', 45),\n            'Quality Management': (2, 'QA Specialist', 85),\n            'Customer Service': (3, 'Customer Success', 35)\n        }\n        \n        dept_found = {}\n        for assignment in dept_assignments:\n            dept_name, project_id, role, allocation, _ = assignment  # Ignore count\n            if dept_name in dept_found:\n                print(f\"❌ Department {dept_name} has multiple assignments\")\n                return False\n            dept_found[dept_name] = (project_id, role, allocation)\n            \n        for dept, expected in expected_mappings.items():\n            if dept not in dept_found:\n                print(f\"❌ Department {dept} has no assignments\")\n                return False\n            if dept_found[dept] != expected:\n                print(f\"❌ Department {dept} assignment mismatch: expected {expected}, got {dept_found[dept]}\")\n                return False\n                \n        # Check that all assignments have correct assigned_date\n        cur.execute(\"\"\"\n            SELECT COUNT(*) FROM employees.project_assignments \n            WHERE assigned_date != '2024-01-01'\n        \"\"\")\n        wrong_date_count = cur.fetchone()[0]\n        \n        if wrong_date_count > 0:\n            print(f\"❌ {wrong_date_count} assignments have incorrect assigned_date\")\n            return False\n                \n        print(\"✅ Assignment data is correct\")\n        return True\n\ndef verify_milestone_data(conn) -> bool:\n    \"\"\"Verify that milestone data was inserted and updated correctly.\"\"\"\n    with conn.cursor() as cur:\n        cur.execute(\"\"\"\n            SELECT project_id, milestone_name, due_date, completed\n            FROM employees.project_milestones\n            ORDER BY project_id, milestone_name\n        \"\"\")\n        milestones = cur.fetchall()\n        \n        if len(milestones) != 6:\n            print(f\"❌ Expected 6 milestones, found {len(milestones)}\")\n            return False\n            \n        # Expected milestones\n        expected_milestones = {\n            (1, 'Design Phase Complete'): ('2024-03-01', False),\n            (1, 'Implementation Complete'): ('2024-05-15', False),\n            (2, 'UI/UX Approval'): ('2024-03-15', False),\n            (2, 'Beta Testing'): ('2024-04-30', False),\n            (3, 'Data Collection'): ('2023-12-15', True),  # Should be completed\n            (3, 'Dashboard Launch'): ('2024-01-25', False)\n        }\n        \n        for milestone in milestones:\n            project_id, name, due_date, completed = milestone\n            key = (project_id, name)\n            \n            if key not in expected_milestones:\n                print(f\"❌ Unexpected milestone: {key}\")\n                return False\n                \n            expected_due, expected_completed = expected_milestones[key]\n            if str(due_date) != expected_due or completed != expected_completed:\n                print(f\"❌ Milestone {name} mismatch: expected ({expected_due}, {expected_completed}), got ({due_date}, {completed})\")\n                return False\n                \n        print(\"✅ Milestone data is correct\")\n        return True\n\ndef main():\n    \"\"\"Main verification function.\"\"\"\n    print(\"=\" * 50)\n\n    # Get connection parameters\n    conn_params = get_connection_params()\n\n    if not conn_params[\"database\"]:\n        print(\"❌ No database specified\")\n        sys.exit(1)\n\n    try:\n        # Connect to database\n        conn = psycopg2.connect(**conn_params)\n\n        # Verify all components\n        success = (\n            verify_table_structures(conn) and \n            verify_indexes(conn) and\n            verify_project_data(conn) and\n            verify_assignment_data(conn) and\n            verify_milestone_data(conn)\n        )\n\n        conn.close()\n\n        if success:\n            print(\"\\n🎉 Task verification: PASS\")\n            sys.exit(0)\n        else:\n            print(\"\\n❌ Task verification: FAIL\")\n            sys.exit(1)\n\n    except psycopg2.Error as e:\n        print(f\"❌ Database error: {e}\")\n        sys.exit(1)\n    except Exception as e:\n        print(f\"❌ Verification error: {e}\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()"
}