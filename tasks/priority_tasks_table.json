{
  "task_id": "priority_tasks_table",
  "task_name": "Priority Tasks Table",
  "category_id": "team_projects",
  "category_name": "Team Projects",
  "description": "Create a five-column table listing tasks with 50% or less progress or P0 priority tasks not completed.",
  "author": "Zijian Wu",
  "created_at": "2025-08-12",
  "difficulty": "L3",
  "tags": [
    "conditional filtering",
    "database manipulation",
    "data aggregation",
    "visual formatting"
  ],
  "mcp": [
    "notion"
  ],
  "meta_data": {
    "stateType": "url",
    "stateContent": null,
    "stateUrl": "https://painted-tennis-ebc.notion.site/Team-Projects-24e81626b6d7809c982fdb7a25825898",
    "stateOriginalUrl": "https://www.notion.so/marketplace/templates/gantt-chart"
  },
  "instruction": "Hi! In my Team Projects page, please create a five-column table block that lists all tasks meeting either of the following conditions:\n\t1.\tThe progress is 50% or less, or\n\t2.\tThe task has priority P0 but is not yet completed (i.e., progress not at 100%).\n\nYou should query this information from the existing “Projects” database.\n\nIn the newly created table, each row should represent one task, and all information should be stored as plain text (not relations, formulas, or linked properties).\n\nIn the newly created table:\n\t•\tEach row should represent one task\n\t•\tAll fields should be stored as plain text (not relations, formulas, or linked properties)\n\t•\tThe table should be sorted by expected end date (End Date) in ascending order, so that the first entry is the one with the earliest end date\n\nThe table should include the following headers:\n\t•\tProject\n\t•\tEng Hours\n\t•\tProgress\n\t•\tStart Date\n\t•\tEnd Date\n\nPlease make sure all relevant tasks are included. Thank you!",
  "verify": "import sys\nfrom datetime import datetime\nfrom notion_client import Client\nfrom tasks.utils import notion_utils\n\nEXPECTED_HEADERS = [\"Project\", \"Eng Hours\", \"Progress\", \"Start Date\", \"End Date\"]\n\nEXPECTED_ROWS = [\n    {\n        \"Project\": \"Improve response times for support requests\",\n        \"Eng Hours\": 100,\n        \"Progress\": 0.33,  # 33%\n        \"Start Date\": \"2024-10-30\",\n        \"End Date\": \"2024-11-17\",\n    },\n    {\n        \"Project\": \"Add a new social media integration\",\n        \"Eng Hours\": 200,\n        \"Progress\": 0.40,  # 40%\n        \"Start Date\": \"2024-11-07\",\n        \"End Date\": \"2024-11-25\",\n    },\n    {\n        \"Project\": \"Integrate with a popular third-party service\",\n        \"Eng Hours\": 250,\n        \"Progress\": 0.20,  # 20%\n        \"Start Date\": \"2024-11-10\",\n        \"End Date\": \"2024-11-18\",\n    },\n    {\n        \"Project\": \"Create customer knowledge base\",\n        \"Eng Hours\": 150,\n        \"Progress\": 0.40,  # 40%\n        \"Start Date\": \"2024-11-19\",\n        \"End Date\": \"2024-11-25\",\n    },\n    {\n        \"Project\": \"Redesign the onboarding process\",\n        \"Eng Hours\": 300,\n        \"Progress\": 0.75,  # 75%\n        \"Start Date\": \"2024-11-20\",\n        \"End Date\": \"2024-12-04\",\n    },\n    {\n        \"Project\": \"Publish support knowledge base\",\n        \"Eng Hours\": None,  # N/A\n        \"Progress\": 0.0,  # 0%\n        \"Start Date\": \"2024-11-27\",\n        \"End Date\": \"2024-11-29\",\n    },\n]\n\n# Sort the expected rows by End Date so we can directly compare order\nEXPECTED_ROWS.sort(key=lambda r: r[\"End Date\"])\n\n\ndef _plain_text_from_cell(cell):\n    \"\"\"Concatenate plain_text from a single cell (list of rich_text).\"\"\"\n    return \"\".join(rt.get(\"plain_text\", \"\") for rt in cell).strip()\n\n\ndef _parse_progress(value: str):\n    \"\"\"Convert a progress string like '40%', '40.0 %', '0.4' to float in range 0-1.\"\"\"\n    value = value.strip()\n    if not value:\n        return None\n\n    has_percent = \"%\" in value\n    # Remove percent sign and any spaces\n    value = value.replace(\"%\", \"\").strip()\n    try:\n        num = float(value)\n        if has_percent or num > 1:\n            num /= 100.0\n        return num\n    except ValueError:\n        return None\n\n\ndef _parse_eng_hours(value: str):\n    value = value.strip().lower()\n    if value in {\"n/a\", \"na\", \"\", \"—\", \"-\"}:\n        return None\n    try:\n        return float(value)\n    except ValueError:\n        return None\n\n\ndef _parse_date(value: str):\n    value = value.strip()\n    try:\n        return datetime.strptime(value, \"%Y-%m-%d\").date()\n    except ValueError:\n        return None\n\n\ndef verify(notion: Client, main_id: str = None) -> bool:\n    \"\"\"Verify that the last table in the 'Team Projects' page matches EXPECTED_ROWS and headers.\"\"\"\n    page_id = None\n    if main_id:\n        found_id, object_type = notion_utils.find_page_or_database_by_id(notion, main_id)\n        if found_id and object_type == 'page':\n            page_id = found_id\n    \n    if not page_id:\n        page_id = notion_utils.find_page(notion, \"Team Projects\")\n    if not page_id:\n        print(\"Error: Page 'Team Projects' not found.\", file=sys.stderr)\n        return False\n\n    # Fetch all blocks to locate table blocks\n    blocks = notion_utils.get_all_blocks_recursively(notion, page_id)\n    table_blocks = [b for b in blocks if b.get(\"type\") == \"table\"]\n    if not table_blocks:\n        print(\"Error: No table blocks found in 'Team Projects' page.\", file=sys.stderr)\n        return False\n\n    table_block = table_blocks[-1]  # Use the last table block\n    table_id = table_block[\"id\"]\n\n    # Retrieve table rows\n    rows = notion.blocks.children.list(block_id=table_id).get(\"results\", [])\n    if not rows:\n        print(\"Error: Table block has no rows.\", file=sys.stderr)\n        return False\n\n    # Validate headers\n    header_cells = rows[0].get(\"table_row\", {}).get(\"cells\", [])\n    headers = [_plain_text_from_cell(c) for c in header_cells]\n    if headers != EXPECTED_HEADERS:\n        print(f\"Error: Table headers mismatch. Found {headers}, expected {EXPECTED_HEADERS}.\", file=sys.stderr)\n        return False\n\n    # Parse data rows\n    data_rows = []\n    for r in rows[1:]:\n        cells = r.get(\"table_row\", {}).get(\"cells\", [])\n        if len(cells) < 5:\n            continue  # Skip malformed rows\n        project = _plain_text_from_cell(cells[0])\n        eng_hours_raw = _plain_text_from_cell(cells[1])\n        progress_raw = _plain_text_from_cell(cells[2])\n        start_raw = _plain_text_from_cell(cells[3])\n        end_raw = _plain_text_from_cell(cells[4])\n\n        row_dict = {\n            \"Project\": project,\n            \"Eng Hours\": _parse_eng_hours(eng_hours_raw),\n            \"Progress\": _parse_progress(progress_raw),\n            \"Start Date\": start_raw.strip(),\n            \"End Date\": end_raw.strip(),\n        }\n        data_rows.append(row_dict)\n\n    if len(data_rows) != len(EXPECTED_ROWS):\n        print(f\"Error: Expected {len(EXPECTED_ROWS)} data rows, found {len(data_rows)}.\", file=sys.stderr)\n        return False\n\n    # Verify sorting by End Date ascending\n    parsed_end_dates = [_parse_date(r[\"End Date\"]) for r in data_rows]\n    if any(d is None for d in parsed_end_dates):\n        print(\"Error: One or more End Date values could not be parsed.\", file=sys.stderr)\n        return False\n    if parsed_end_dates != sorted(parsed_end_dates):\n        print(\"Error: Table is not sorted by End Date ascending.\", file=sys.stderr)\n        return False\n\n    # Create mapping from project -> row for comparison\n    data_map = {r[\"Project\"]: r for r in data_rows}\n\n    for expected in EXPECTED_ROWS:\n        proj = expected[\"Project\"]\n        if proj not in data_map:\n            print(f\"Error: Project '{proj}' not found in table.\", file=sys.stderr)\n            return False\n        actual = data_map[proj]\n\n        # Compare Eng Hours\n        expected_hours = expected[\"Eng Hours\"]\n        actual_hours = actual[\"Eng Hours\"]\n        if expected_hours is None:\n            if actual_hours is not None:\n                print(f\"Error: Eng Hours for '{proj}' expected to be empty/N\\u204aA but found '{actual_hours}'.\", file=sys.stderr)\n                return False\n        else:\n            if actual_hours is None or abs(actual_hours - expected_hours) > 1e-2:\n                print(f\"Error: Eng Hours for '{proj}' mismatch. Expected {expected_hours}, found {actual_hours}.\", file=sys.stderr)\n                return False\n\n        # Compare Progress with tolerance\n        expected_progress = expected[\"Progress\"]\n        actual_progress = actual[\"Progress\"]\n        if actual_progress is None or abs(actual_progress - expected_progress) > 1e-2:\n            print(f\"Error: Progress for '{proj}' mismatch. Expected {expected_progress}, found {actual_progress}.\", file=sys.stderr)\n            return False\n\n        # Compare Start and End Dates (string equality)\n        if actual[\"Start Date\"] != expected[\"Start Date\"]:\n            print(f\"Error: Start Date for '{proj}' mismatch. Expected {expected['Start Date']}, found {actual['Start Date']}.\", file=sys.stderr)\n            return False\n        if actual[\"End Date\"] != expected[\"End Date\"]:\n            print(f\"Error: End Date for '{proj}' mismatch. Expected {expected['End Date']}, found {actual['End Date']}.\", file=sys.stderr)\n            return False\n\n    print(\"Success: Verified table block contents and order successfully.\")\n    return True\n\n\ndef main():\n    \"\"\"Execute verification and exit with status code.\"\"\"\n    notion = notion_utils.get_notion_client()\n    main_id = sys.argv[1] if len(sys.argv) > 1 else None\n    if verify(notion, main_id):\n        sys.exit(0)\n    else:\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main() "
}