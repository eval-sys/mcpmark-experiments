{
  "task_id": "asset_retirement_migration",
  "task_name": "Asset Retirement Migration",
  "category_id": "it_trouble_shooting_hub",
  "category_name": "IT Trouble Shooting Hub",
  "description": "Restructure the IT Inventory database by migrating expired assets to a new IT Asset Retirement Queue database.",
  "author": "Zijian Wu",
  "created_at": "2025-07-27",
  "difficulty": "L3",
  "tags": [
    "database manipulation",
    "automated migration",
    "conditional filtering",
    "data aggregation",
    "report generation"
  ],
  "mcp": [
    "notion"
  ],
  "meta_data": {
    "stateType": "url",
    "stateContent": null,
    "stateUrl": "https://painted-tennis-ebc.notion.site/It-Trouble-Shooting-Hub-23e81626b6d78020aba7eb65ae1cc2d5",
    "stateOriginalUrl": "https://www.notion.so/marketplace/templates/it-trouble-shooting-hub"
  },
  "instruction": "Please restructure the **IT Inventory** database as described below. Your automation will be checked by an automated script, so follow every detail exactly.\n\n---\nTask Steps\n1. Inside the **IT Trouble Shooting Hub** page, locate the database named **IT Inventory**.\n2. Query this database and collect every page whose **Status** property is **Expired** or **To be returned**.\n3. Create a **new full-page database** directly under the same IT Trouble Shooting Hub page called **IT Asset Retirement Queue**.\n4. Configure this new database so that it contains **exactly** the following properties (spellings and types must match):\n   • Serial – title  \n   • Tags – multi_select  \n   • Status – select  \n   • Vendor – select  \n   • Expiration date – date  \n   • Retirement Reason – select with option set { **Expired License**, **Hardware Obsolete**, **Security Risk**, **User Offboarding** }\n5. For every inventory item gathered in step2:\n   a. Create a corresponding page in **IT Asset Retirement Queue** and copy over the values of the Serial, Tags, Status, Vendor and Expiration date properties.  \n   b. Set **Retirement Reason** to one of the four options above (choose the most appropriate).  \n   c. Archive the original inventory page **after** the new page has been created.\n6. After all items are migrated:\n   a. Update the **description** of the **IT Asset Retirement Queue** database so it is **exactly** `AUTO-GENERATED MIGRATION COMPLETED` (no additional text).\n   b. Create a new page under **IT Trouble Shooting Hub** titled **Retirement Migration Log**. Inside this page, add a **callout block** whose text follows the exact pattern:\n\n      `Successfully migrated <N> assets to the retirement queue on 2025-03-24.`\n\n      • `<N>` is the total number of items moved.",
  "verify": "import sys\nfrom typing import Dict, Set\nfrom notion_client import Client\nfrom tasks.utils import notion_utils\n\n\ndef _get_database(root_page_id: str, notion: Client, name: str) -> str | None:\n    \"\"\"Helper that finds a child database by title inside a page.\"\"\"\n    return notion_utils.find_database_in_block(notion, root_page_id, name)\n\n\ndef _check_property(props: Dict, name: str, expected_type: str) -> bool:\n    if name not in props:\n        print(f\"Error: Property '{name}' missing in database.\", file=sys.stderr)\n        return False\n    if props[name][\"type\"] != expected_type:\n        print(\n            f\"Error: Property '{name}' expected type '{expected_type}', found '{props[name]['type']}'.\",\n            file=sys.stderr,\n        )\n        return False\n    return True\n\n\ndef verify(notion: Client, main_id: str | None = None) -> bool:\n    \"\"\"Verifies that the IT Asset Retirement Queue was created and populated correctly.\"\"\"\n\n    # -------------------------------------------------------------------------\n    # Resolve the root IT Trouble Shooting Hub page\n    # -------------------------------------------------------------------------\n    root_page_id = None\n    if main_id:\n        found_id, obj_type = notion_utils.find_page_or_database_by_id(notion, main_id)\n        if found_id and obj_type == \"page\":\n            root_page_id = found_id\n\n    if not root_page_id:\n        root_page_id = notion_utils.find_page(notion, \"IT Trouble Shooting Hub\")\n    if not root_page_id:\n        print(\n            \"Error: Could not locate the 'IT Trouble Shooting Hub' page.\",\n            file=sys.stderr,\n        )\n        return False\n\n    # -------------------------------------------------------------------------\n    # Locate the original and new databases\n    # -------------------------------------------------------------------------\n    inventory_db_id = _get_database(root_page_id, notion, \"IT Inventory\")\n    if not inventory_db_id:\n        print(\"Error: 'IT Inventory' database not found.\", file=sys.stderr)\n        return False\n\n    retirement_db_id = _get_database(root_page_id, notion, \"IT Asset Retirement Queue\")\n    if not retirement_db_id:\n        print(\"Error: 'IT Asset Retirement Queue' database not found.\", file=sys.stderr)\n        return False\n\n    # -------------------------------------------------------------------------\n    # Validate schema of the retirement queue database\n    # -------------------------------------------------------------------------\n    retirement_db = notion.databases.retrieve(database_id=retirement_db_id)\n    r_props = retirement_db[\"properties\"]\n\n    required_schema = {\n        \"Serial\": \"title\",\n        \"Tags\": \"multi_select\",\n        \"Status\": \"select\",\n        \"Vendor\": \"select\",\n        \"Expiration date\": \"date\",\n        \"Retirement Reason\": \"select\",\n    }\n\n    for pname, ptype in required_schema.items():\n        if not _check_property(r_props, pname, ptype):\n            return False\n\n    # Check Retirement Reason options\n    expected_reason_options: Set[str] = {\n        \"Expired License\",\n        \"Hardware Obsolete\",\n        \"Security Risk\",\n        \"User Offboarding\",\n    }\n    actual_options = {\n        opt[\"name\"] for opt in r_props[\"Retirement Reason\"][\"select\"][\"options\"]\n    }\n    if actual_options != expected_reason_options:\n        print(\n            \"Error: 'Retirement Reason' select options mismatch.\\n\"\n            f\"Expected: {sorted(expected_reason_options)}\\n\"\n            f\"Found: {sorted(actual_options)}\",\n            file=sys.stderr,\n        )\n        return False\n\n    # ---------------------------------------------------------------\n    # Validate database description starts with required phrase\n    # ---------------------------------------------------------------\n    desc_rich = retirement_db.get(\"description\", [])\n    desc_text = \"\".join([t.get(\"plain_text\", \"\") for t in desc_rich])\n    required_desc = \"AUTO-GENERATED MIGRATION COMPLETED\"\n    if desc_text.strip() != required_desc:\n        print(\n            f\"Error: Retirement database description must be exactly '{required_desc}'.\",\n            file=sys.stderr,\n        )\n        return False\n\n    # -------------------------------------------------------------------------\n    # Validate that inventory items are moved & archived\n    # -------------------------------------------------------------------------\n    expired_filter = {\n        \"property\": \"Status\",\n        \"select\": {\"equals\": \"Expired\"},\n    }\n    to_return_filter = {\n        \"property\": \"Status\",\n        \"select\": {\"equals\": \"To be returned\"},\n    }\n    compound_filter = {\"or\": [expired_filter, to_return_filter]}\n\n    # Query for any *active* items that still match these statuses\n    remaining_items = notion.databases.query(\n        database_id=inventory_db_id,\n        filter=compound_filter,\n        archived=False,\n    ).get(\"results\", [])\n\n    if remaining_items:\n        print(\n            f\"Error: {len(remaining_items)} 'Expired' / 'To be returned' items still present in IT Inventory.\",\n            file=sys.stderr,\n        )\n        return False\n\n    # There should be at least one entry in the retirement queue\n    retirement_pages = notion.databases.query(database_id=retirement_db_id).get(\n        \"results\", []\n    )\n    expected_serials = {\"65XYQ/GB\", \"36x10PIQ\"}\n    if len(retirement_pages) != len(expected_serials):\n        print(\n            f\"Error: Expected {len(expected_serials)} retirement pages, found {len(retirement_pages)}.\",\n            file=sys.stderr,\n        )\n        return False\n\n    # Each retirement page must have a Retirement Reason\n    serials_seen = set()\n    for page in retirement_pages:\n        props = page[\"properties\"]\n        reason = props.get(\"Retirement Reason\", {}).get(\"select\", {})\n        if not reason or reason.get(\"name\") not in expected_reason_options:\n            print(\n                f\"Error: Page {page['id']} missing valid 'Retirement Reason'.\",\n                file=sys.stderr,\n            )\n            return False\n\n        # Collect Serial title\n        title_rich = props.get(\"Serial\", {}).get(\"title\", [])\n        serial_val = \"\".join([t.get(\"plain_text\", \"\") for t in title_rich]).strip()\n        serials_seen.add(serial_val)\n\n    if serials_seen != expected_serials:\n        print(\n            f\"Error: Serial values mismatch. Expected {sorted(expected_serials)}, found {sorted(serials_seen)}.\",\n            file=sys.stderr,\n        )\n        return False\n\n    # -----------------------------------------------------------------\n    # Verify the migration log page and callout block contents\n    # -----------------------------------------------------------------\n    log_page_title = \"Retirement Migration Log\"\n    log_page_id = notion_utils.find_page(notion, log_page_title)\n    if not log_page_id:\n        print(f\"Error: Page '{log_page_title}' not found.\", file=sys.stderr)\n        return False\n\n    # Search for a callout block with required pattern\n    import re\n\n    callout_pattern = re.compile(\n        r\"Successfully migrated (\\d+) assets to the retirement queue on 2025-03-24\\.\"\n    )\n    blocks = notion_utils.get_all_blocks_recursively(notion, log_page_id)\n    match_found = False\n    for blk in blocks:\n        if blk.get(\"type\") == \"callout\":\n            text = notion_utils.get_block_plain_text(blk)\n            m = callout_pattern.search(text)\n            if m:\n                migrated_num = int(m.group(1))\n                if migrated_num == len(expected_serials):\n                    match_found = True\n                else:\n                    print(\n                        f\"Error: Callout reports {migrated_num} assets, but {len(retirement_pages)} retirement pages found.\",\n                        file=sys.stderr,\n                    )\n                    return False\n                break\n    if not match_found:\n        print(\n            \"Error: Required callout block not found in migration log page.\",\n            file=sys.stderr,\n        )\n        return False\n\n    print(\"Success: All verification criteria satisfied.\")\n    return True\n\n\ndef main():\n    notion = notion_utils.get_notion_client()\n    main_id = sys.argv[1] if len(sys.argv) > 1 else None\n    if verify(notion, main_id):\n        sys.exit(0)\n    else:\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()\n"
}