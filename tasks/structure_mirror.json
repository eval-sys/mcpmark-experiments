{
  "task_id": "structure_mirror",
  "task_name": "Structure Mirror",
  "category_id": "folder_structure",
  "category_name": "Folder Structure",
  "description": "Create an exact mirror copy of the folder structure in a target location while applying specified transformation rules.",
  "author": "Lingjun Chen",
  "created_at": "2025-08-08",
  "difficulty": "L3",
  "tags": [
    "file organization",
    "content transformation"
  ],
  "mcp": [
    "filesystem"
  ],
  "metadata": {},
  "instruction": "# Directory Structure Mirroring with Smart Placeholders\n\n## Task\n\nCopy the entire directory structure of `complex_structure/` to `complex_structure_mirror/` without copying any file contents. Do not use python code.\n\n## Requirements\n\n- Create the entire directory structure in `complex_structure_mirror/`\n- Do not copy any file contents, only create directories\n- In each empty directory, create a `placeholder.txt` file containing the absolute path of that directory\n- Handle nested directories of any depth\n- You should also follow 2 rules:\n- **1 Discard any directory that directly contains more than 2 files (only count the immediate folder).**\n- **2 If a directory name contains numbers, append \"_processed\" to the mirror directory name**\n",
  "verify": "#!/usr/bin/env python3\n\"\"\"\nVerification script for Directory Structure Mirroring with Smart Placeholders Task\n\"\"\"\n\nimport sys\nfrom pathlib import Path\nimport os\n\ndef get_test_directory() -> Path:\n    \"\"\"Get the test directory from FILESYSTEM_TEST_DIR env var.\"\"\"\n    test_root = os.environ.get(\"FILESYSTEM_TEST_DIR\")\n    if not test_root:\n        raise ValueError(\"FILESYSTEM_TEST_DIR environment variable is required\")\n    return Path(test_root)\n\ndef verify_mirror_directory_exists(test_dir: Path, mirror_path: Path) -> bool:\n    \"\"\"Verify that a mirror directory exists.\"\"\"\n    if not mirror_path.exists():\n        print(f\"‚ùå Mirror directory not found: {mirror_path.relative_to(test_dir)}\")\n        return False\n    \n    if not mirror_path.is_dir():\n        print(f\"‚ùå Mirror path exists but is not a directory: {mirror_path.relative_to(test_dir)}\")\n        return False\n    \n    print(f\"‚úÖ Mirror directory exists: {mirror_path.relative_to(test_dir)}\")\n    return True\n\ndef verify_placeholder_file_exists(mirror_path: Path, test_dir: Path) -> bool:\n    \"\"\"Verify that placeholder.txt exists in the mirror directory.\"\"\"\n    placeholder_file = mirror_path / \"placeholder.txt\"\n    \n    if not placeholder_file.exists():\n        print(f\"‚ùå placeholder.txt not found in: {mirror_path.relative_to(test_dir)}\")\n        return False\n    \n    if not placeholder_file.is_file():\n        print(f\"‚ùå placeholder.txt exists but is not a file in: {mirror_path.relative_to(test_dir)}\")\n        return False\n    \n    print(f\"‚úÖ placeholder.txt exists in: {mirror_path.relative_to(test_dir)}\")\n    return True\n\ndef verify_placeholder_content(mirror_path: Path, test_dir: Path) -> bool:\n    \"\"\"Verify that placeholder.txt contains the correct path ending with complex_structure_mirror/...\"\"\"\n    placeholder_file = mirror_path / \"placeholder.txt\"\n    \n    try:\n        content = placeholder_file.read_text().strip()\n        \n        # Check if content is not empty\n        if not content:\n            print(f\"‚ùå placeholder.txt is empty in: {mirror_path.relative_to(test_dir)}\")\n            return False\n        \n        # Check if it contains the correct path ending with complex_structure_mirror/...\n        expected_ending = f\"complex_structure_mirror/{mirror_path.relative_to(test_dir / 'complex_structure_mirror')}\"\n        if not content.endswith(expected_ending):\n            print(f\"‚ùå placeholder.txt content incorrect in: {mirror_path.relative_to(test_dir)}\")\n            print(f\"   Expected ending: {expected_ending}\")\n            print(f\"   Found: {content}\")\n            return False\n        \n        print(f\"‚úÖ placeholder.txt content is correct in: {mirror_path.relative_to(test_dir)}\")\n        return True\n        \n    except Exception as e:\n        print(f\"‚ùå Error reading placeholder.txt in {mirror_path.relative_to(test_dir)}: {e}\")\n        return False\n\ndef verify_no_files_copied(test_dir: Path) -> bool:\n    \"\"\"Verify that no file contents were copied, only directory structure.\"\"\"\n    source_dir = test_dir / \"complex_structure\"\n    mirror_dir = test_dir / \"complex_structure_mirror\"\n    \n    if not mirror_dir.exists():\n        print(\"‚ùå Mirror directory 'complex_structure_mirror' not found\")\n        return False\n    \n    # Check that no files from source were copied (except placeholder.txt files)\n    for source_file in source_dir.rglob(\"*\"):\n        if source_file.is_file():\n            # Calculate the corresponding mirror path\n            relative_path = source_file.relative_to(source_dir)\n            mirror_file = mirror_dir / relative_path\n            \n            # Skip if this would be a placeholder.txt file\n            if mirror_file.name == \"placeholder.txt\":\n                continue\n            \n            if mirror_file.exists():\n                print(f\"‚ùå File was copied when it shouldn't be: {relative_path}\")\n                return False\n    \n    print(\"‚úÖ No file contents were copied, only directory structure\")\n    return True\n\ndef verify_mirror_structure_completeness(test_dir: Path) -> bool:\n    \"\"\"Verify that the mirror structure is complete and matches expected structure.\"\"\"\n    mirror_dir = test_dir / \"complex_structure_mirror\"\n    \n    if not mirror_dir.exists():\n        print(\"‚ùå Mirror directory 'complex_structure_mirror' not found\")\n        return False\n    \n    # Define expected directories that should exist (based on backup structure)\n    expected_dirs = [\n        \"deeply\",\n        \"deeply/nested\",\n        \"deeply/nested/folder\",\n        \"deeply/nested/folder/structure\",\n        \"empty_folder\", \n        \"folder_lxkHt_0_1_processed\",\n        \"folder_QdTAj_0_2_processed\",\n        \"folder_xtgyi_0_0_processed\",\n        \"mixed_content\",\n        \"mixed_content/images_and_text\",\n        \"project\",\n        \"project/docs\",\n        \"project/docs/archive\",\n        \"project/docs/archive/2023_processed\",\n        \"project/src\",\n        \"project/src/main\",\n        \"project/src/main/resources\"\n    ]\n    \n    # Define which directories should have placeholder.txt files\n    placeholder_dirs = [\n        \"deeply/nested/folder/structure\",\n        \"empty_folder\", \n        \"folder_lxkHt_0_1_processed\",\n        \"folder_QdTAj_0_2_processed\",\n        \"folder_xtgyi_0_0_processed\",\n        \"mixed_content/images_and_text\",\n        \"project/docs/archive/2023_processed\",\n        \"project/src/main/resources\"\n    ]\n    \n    all_passed = True\n    \n    # Check that all expected directories exist\n    for expected_dir in expected_dirs:\n        mirror_path = mirror_dir / expected_dir\n        if not verify_mirror_directory_exists(test_dir, mirror_path):\n            all_passed = False\n        elif expected_dir in placeholder_dirs:\n            # Check placeholder.txt for directories that should have it\n            if not verify_placeholder_file_exists(mirror_path, test_dir):\n                all_passed = False\n            elif not verify_placeholder_content(mirror_path, test_dir):\n                all_passed = False\n    \n    # Check that no unexpected directories exist\n    for mirror_subdir in mirror_dir.rglob(\"*\"):\n        if mirror_subdir.is_dir():\n            relative_path = mirror_subdir.relative_to(mirror_dir)\n            if str(relative_path) not in expected_dirs and str(relative_path) != \".\":\n                print(f\"‚ùå Unexpected directory found: {relative_path}\")\n                all_passed = False\n    \n    return all_passed\n\ndef main():\n    \"\"\"Main verification function.\"\"\"\n    try:\n        test_dir = get_test_directory()\n        print(f\"üîç Verifying Directory Structure Mirroring with Smart Placeholders in: {test_dir}\")\n        \n        # Define verification steps\n        verification_steps = [\n            (\"No files copied\", verify_no_files_copied),\n            (\"Mirror structure completeness\", verify_mirror_structure_completeness),\n        ]\n        \n        # Run all verification steps\n        all_passed = True\n        for step_name, verify_func in verification_steps:\n            print(f\"\\nüìã Checking: {step_name}\")\n            if not verify_func(test_dir):\n                all_passed = False\n        \n        # Final result\n        print(\"\\n\" + \"=\"*50)\n        if all_passed:\n            print(\"‚úÖ Directory structure mirroring completed correctly!\")\n            print(\"üéâ Structure Mirror verification: PASS\")\n            sys.exit(0)\n        else:\n            print(\"‚ùå Structure Mirror verification: FAIL\")\n            sys.exit(1)\n            \n    except Exception as e:\n        print(f\"‚ùå Verification failed with error: {e}\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()",
  "model_results": {
    "gemini-2-5-pro": 0,
    "deepseek-chat": 0,
    "qwen-3-coder": 0,
    "o3": 0,
    "gpt-5": 0,
    "k2": 1,
    "claude-4-sonnet": 1
  }
}