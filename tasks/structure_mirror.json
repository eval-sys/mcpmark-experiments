{
  "task_id": "structure_mirror",
  "task_name": "Structure Mirror",
  "category_id": "folder_structure",
  "category_name": "Folder Structure",
  "description": "Create an exact mirror copy of the folder structure in a target location while applying specified transformation rules.",
  "author": "Lingjun Chen",
  "created_at": "2025-08-08",
  "difficulty": "L3",
  "tags": [
    "file organization",
    "content transformation"
  ],
  "mcp": [
    "filesystem"
  ],
  "meta_data": {
    "stateType": "text",
    "stateContent": "folder_structure/\n    └── complex_structure/\n            ├── deeply/\n            │       └── nested/\n            │               └── folder/\n            │                       └── structure/\n            ├── empty_folder/\n            ├── folder_lxkHt_0_1/\n            │       └── file_PeLzC_0.txt\n            ├── folder_QdTAj_0_2/\n            │       ├── folder_eXccj_1_0/\n            │       │       ├── folder_Mqlwh_2_1/\n            │       │       │       ├── folder_cKxcP_3_3/\n            │       │       │       │       ├── folder_BPTMK_4_1/\n            │       │       │       │       │       └── file_RHtBP_0.txt\n            │       │       │       │       ├── folder_QNqjq_4_0/\n            │       │       │       │       │       ├── folder_gRwPE_5_1/\n            │       │       │       │       │       │       ├── file_jVlpp_0.txt\n            │       │       │       │       │       │       └── file_vJuHz_1.txt\n            │       │       │       │       │       ├── folder_XdXYJ_5_0/\n            │       │       │       │       │       │       └── file_KvkKi_0.txt\n            │       │       │       │       │       ├── file_gGxLG_2.txt\n            │       │       │       │       │       ├── file_Hzkxo_0.txt\n            │       │       │       │       │       └── file_XRjeh_1.txt\n            │       │       │       │       ├── folder_vIBIt_4_2/\n            │       │       │       │       │       ├── folder_kRDNS_5_0/\n            │       │       │       │       │       │       └── file_wFSjJ_0.txt\n            │       │       │       │       │       └── file_NyBSO_0.txt\n            │       │       │       │       ├── file_EOCNf_1.txt\n            │       │       │       │       └── file_gmrXA_0.txt\n            │       │       │       ├── folder_NcruA_3_1/\n            │       │       │       │       ├── file_bLWDj_1.txt\n            │       │       │       │       └── file_WAftR_0.txt\n            │       │       │       ├── folder_qCDFI_3_2/\n            │       │       │       │       ├── file_eSMOJ_0.txt\n            │       │       │       │       ├── file_oxADy_2.txt\n            │       │       │       │       └── file_RTbbc_1.txt\n            │       │       │       ├── folder_QVHUU_3_0/\n            │       │       │       │       ├── folder_FEPTK_4_1/\n            │       │       │       │       │       ├── folder_GHoMC_5_1/\n            │       │       │       │       │       │       └── file_rAMYd_0.txt\n            │       │       │       │       │       ├── folder_iBDUY_5_0/\n            │       │       │       │       │       │       └── file_IJCaw_0.txt\n            │       │       │       │       │       ├── folder_VRXgp_5_2/\n            │       │       │       │       │       │       └── file_hkUmS_0.txt\n            │       │       │       │       │       ├── file_nqLAf_1.txt\n            │       │       │       │       │       └── file_XflmA_0.txt\n            │       │       │       │       ├── folder_FlPoK_4_3/\n            │       │       │       │       │       ├── folder_hSVNm_5_3/\n            │       │       │       │       │       │       └── file_klnbn_0.txt\n            │       │       │       │       │       ├── folder_iZuEl_5_0/\n            │       │       │       │       │       │       └── file_LqAmy_0.txt\n            │       │       │       │       │       ├── folder_LcURj_5_2/\n            │       │       │       │       │       │       ├── file_RgwOS_1.txt\n            │       │       │       │       │       │       └── file_ZHnYb_0.txt\n            │       │       │       │       │       ├── folder_tuZQJ_5_1/\n            │       │       │       │       │       │       └── file_LHuIx_0.txt\n            │       │       │       │       │       ├── file_asJnB_1.txt\n            │       │       │       │       │       └── file_EzLdu_0.txt\n            │       │       │       │       ├── folder_ndhsJ_4_0/\n            │       │       │       │       │       ├── folder_CUSXK_5_0/\n            │       │       │       │       │       │       ├── file_DpiuM_1.txt\n            │       │       │       │       │       │       └── file_pSqeG_0.txt\n            │       │       │       │       │       ├── folder_pstmE_5_1/\n            │       │       │       │       │       │       └── file_YwdJt_0.txt\n            │       │       │       │       │       ├── folder_StlsP_5_2/\n            │       │       │       │       │       │       ├── file_kriBJ_0.txt\n            │       │       │       │       │       │       └── file_XCEdm_1.txt\n            │       │       │       │       │       ├── file_ToDjh_1.txt\n            │       │       │       │       │       └── file_xbIVx_0.txt\n            │       │       │       │       ├── folder_PJBok_4_4/\n            │       │       │       │       │       ├── folder_mzxaf_5_0/\n            │       │       │       │       │       │       ├── file_ILBzj_2.txt\n            │       │       │       │       │       │       ├── file_MTGMm_1.txt\n            │       │       │       │       │       │       └── file_zBDqz_0.txt\n            │       │       │       │       │       ├── folder_sULMj_5_1/\n            │       │       │       │       │       │       ├── file_BHziw_1.txt\n            │       │       │       │       │       │       ├── file_sIjiu_2.txt\n            │       │       │       │       │       │       └── file_VqNkB_0.txt\n            │       │       │       │       │       ├── folder_vypSi_5_3/\n            │       │       │       │       │       │       ├── file_kZbIm_1.txt\n            │       │       │       │       │       │       └── file_sOBtE_0.txt\n            │       │       │       │       │       ├── folder_ZLGHy_5_2/\n            │       │       │       │       │       │       ├── file_azaFF_0.txt\n            │       │       │       │       │       │       └── file_nAFRe_1.txt\n            │       │       │       │       │       ├── file_mIkQU_0.txt\n            │       │       │       │       │       └── file_sGPxd_1.txt\n            │       │       │       │       ├── folder_VTbEG_4_2/\n            │       │       │       │       │       ├── file_HtYLg_0.txt\n            │       │       │       │       │       ├── file_JXjMd_1.txt\n            │       │       │       │       │       └── file_tPccB_2.txt\n            │       │       │       │       ├── file_BuOSw_1.txt\n            │       │       │       │       └── file_TpoqE_0.txt\n            │       │       │       ├── folder_wTvun_3_4/\n            │       │       │       │       ├── file_GyhyE_1.txt\n            │       │       │       │       ├── file_POsla_2.txt\n            │       │       │       │       └── file_tSsvk_0.txt\n            │       │       │       ├── file_irNju_0.txt\n            │       │       │       └── file_jYBRm_1.txt\n            │       │       ├── folder_YlJLI_2_0/\n            │       │       │       └── file_FpFSL_0.txt\n            │       │       ├── file_cFgBr_2.txt\n            │       │       ├── file_lKEWN_1.txt\n            │       │       └── file_ZEWFP_0.txt\n            │       └── file_ayUCH_0.txt\n            ├── folder_xtgyi_0_0/\n            │       └── file_BvSOB_0.txt\n            ├── mixed_content/\n            │       └── images_and_text/\n            │               └── notes.txt\n            ├── project/\n            │       ├── docs/\n            │       │       └── archive/\n            │       │               └── 2023/\n            │       │                       └── reports/\n            │       │                               ├── report_0.txt\n            │       │                               ├── report_1.txt\n            │       │                               └── report_2.txt\n            │       └── src/\n            │               └── main/\n            │                       └── resources/\n            └── m.py",
    "stateUrl": "https://storage.mcpmark.ai/filesystem/folder_structure.zip",
    "stateOriginalUrl": null
  },
  "instruction": "Please use FileSystem tools to finish the following task:\n\n### Task\n\nCopy the entire directory structure of `complex_structure/` to `complex_structure_mirror/` without copying any file contents. Do not use python code.\n\n### Requirements\n\n- Create the entire directory structure in `complex_structure_mirror/`\n- Do not copy any file contents, only create directories\n- In each empty directory, create a `placeholder.txt` file containing the absolute path of that directory\n- Handle nested directories of any depth\n- You should also follow 2 rules:\n    1. **Discard any directory that directly contains more than 2 files (only count the immediate folder).**\n    2. **If a directory name contains numbers, append \"_processed\" to the mirror directory name**\n",
  "verify": "#!/usr/bin/env python3\n\"\"\"\nVerification script for Directory Structure Mirroring with Smart Placeholders Task\n\"\"\"\n\nimport sys\nfrom pathlib import Path\nimport os\n\ndef get_test_directory() -> Path:\n    \"\"\"Get the test directory from FILESYSTEM_TEST_DIR env var.\"\"\"\n    test_root = os.environ.get(\"FILESYSTEM_TEST_DIR\")\n    if not test_root:\n        raise ValueError(\"FILESYSTEM_TEST_DIR environment variable is required\")\n    return Path(test_root)\n\ndef verify_mirror_directory_exists(test_dir: Path, mirror_path: Path) -> bool:\n    \"\"\"Verify that a mirror directory exists.\"\"\"\n    if not mirror_path.exists():\n        print(f\"❌ Mirror directory not found: {mirror_path.relative_to(test_dir)}\")\n        return False\n    \n    if not mirror_path.is_dir():\n        print(f\"❌ Mirror path exists but is not a directory: {mirror_path.relative_to(test_dir)}\")\n        return False\n    \n    print(f\"✅ Mirror directory exists: {mirror_path.relative_to(test_dir)}\")\n    return True\n\ndef verify_placeholder_file_exists(mirror_path: Path, test_dir: Path) -> bool:\n    \"\"\"Verify that placeholder.txt exists in the mirror directory.\"\"\"\n    placeholder_file = mirror_path / \"placeholder.txt\"\n    \n    if not placeholder_file.exists():\n        print(f\"❌ placeholder.txt not found in: {mirror_path.relative_to(test_dir)}\")\n        return False\n    \n    if not placeholder_file.is_file():\n        print(f\"❌ placeholder.txt exists but is not a file in: {mirror_path.relative_to(test_dir)}\")\n        return False\n    \n    print(f\"✅ placeholder.txt exists in: {mirror_path.relative_to(test_dir)}\")\n    return True\n\ndef verify_placeholder_content(mirror_path: Path, test_dir: Path) -> bool:\n    \"\"\"Verify that placeholder.txt contains the correct path ending with complex_structure_mirror/...\"\"\"\n    placeholder_file = mirror_path / \"placeholder.txt\"\n    \n    try:\n        content = placeholder_file.read_text().strip()\n        \n        # Check if content is not empty\n        if not content:\n            print(f\"❌ placeholder.txt is empty in: {mirror_path.relative_to(test_dir)}\")\n            return False\n        \n        # Check if it contains the correct path ending with complex_structure_mirror/...\n        expected_ending = f\"complex_structure_mirror/{mirror_path.relative_to(test_dir / 'complex_structure_mirror')}\"\n        if not content.endswith(expected_ending):\n            print(f\"❌ placeholder.txt content incorrect in: {mirror_path.relative_to(test_dir)}\")\n            print(f\"   Expected ending: {expected_ending}\")\n            print(f\"   Found: {content}\")\n            return False\n        \n        print(f\"✅ placeholder.txt content is correct in: {mirror_path.relative_to(test_dir)}\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error reading placeholder.txt in {mirror_path.relative_to(test_dir)}: {e}\")\n        return False\n\ndef verify_no_files_copied(test_dir: Path) -> bool:\n    \"\"\"Verify that no file contents were copied, only directory structure.\"\"\"\n    source_dir = test_dir / \"complex_structure\"\n    mirror_dir = test_dir / \"complex_structure_mirror\"\n    \n    if not mirror_dir.exists():\n        print(\"❌ Mirror directory 'complex_structure_mirror' not found\")\n        return False\n    \n    # Check that no files from source were copied (except placeholder.txt files)\n    for source_file in source_dir.rglob(\"*\"):\n        if source_file.is_file():\n            # Calculate the corresponding mirror path\n            relative_path = source_file.relative_to(source_dir)\n            mirror_file = mirror_dir / relative_path\n            \n            # Skip if this would be a placeholder.txt file\n            if mirror_file.name == \"placeholder.txt\":\n                continue\n            \n            if mirror_file.exists():\n                print(f\"❌ File was copied when it shouldn't be: {relative_path}\")\n                return False\n    \n    print(\"✅ No file contents were copied, only directory structure\")\n    return True\n\ndef verify_mirror_structure_completeness(test_dir: Path) -> bool:\n    \"\"\"Verify that the mirror structure is complete and matches expected structure.\"\"\"\n    mirror_dir = test_dir / \"complex_structure_mirror\"\n    \n    if not mirror_dir.exists():\n        print(\"❌ Mirror directory 'complex_structure_mirror' not found\")\n        return False\n    \n    # Define expected directories that should exist (based on backup structure)\n    expected_dirs = [\n        \"deeply\",\n        \"deeply/nested\",\n        \"deeply/nested/folder\",\n        \"deeply/nested/folder/structure\",\n        \"empty_folder\", \n        \"folder_lxkHt_0_1_processed\",\n        \"folder_QdTAj_0_2_processed\",\n        \"folder_xtgyi_0_0_processed\",\n        \"mixed_content\",\n        \"mixed_content/images_and_text\",\n        \"project\",\n        \"project/docs\",\n        \"project/docs/archive\",\n        \"project/docs/archive/2023_processed\",\n        \"project/src\",\n        \"project/src/main\",\n        \"project/src/main/resources\"\n    ]\n    \n    # Define which directories should have placeholder.txt files\n    placeholder_dirs = [\n        \"deeply/nested/folder/structure\",\n        \"empty_folder\", \n        \"folder_lxkHt_0_1_processed\",\n        \"folder_QdTAj_0_2_processed\",\n        \"folder_xtgyi_0_0_processed\",\n        \"mixed_content/images_and_text\",\n        \"project/docs/archive/2023_processed\",\n        \"project/src/main/resources\"\n    ]\n    \n    all_passed = True\n    \n    # Check that all expected directories exist\n    for expected_dir in expected_dirs:\n        mirror_path = mirror_dir / expected_dir\n        if not verify_mirror_directory_exists(test_dir, mirror_path):\n            all_passed = False\n        elif expected_dir in placeholder_dirs:\n            # Check placeholder.txt for directories that should have it\n            if not verify_placeholder_file_exists(mirror_path, test_dir):\n                all_passed = False\n            elif not verify_placeholder_content(mirror_path, test_dir):\n                all_passed = False\n    \n    # Check that no unexpected directories exist\n    for mirror_subdir in mirror_dir.rglob(\"*\"):\n        if mirror_subdir.is_dir():\n            relative_path = mirror_subdir.relative_to(mirror_dir)\n            if str(relative_path) not in expected_dirs and str(relative_path) != \".\":\n                print(f\"❌ Unexpected directory found: {relative_path}\")\n                all_passed = False\n    \n    return all_passed\n\ndef main():\n    \"\"\"Main verification function.\"\"\"\n    try:\n        test_dir = get_test_directory()\n        print(f\"🔍 Verifying Directory Structure Mirroring with Smart Placeholders in: {test_dir}\")\n        \n        # Define verification steps\n        verification_steps = [\n            (\"No files copied\", verify_no_files_copied),\n            (\"Mirror structure completeness\", verify_mirror_structure_completeness),\n        ]\n        \n        # Run all verification steps\n        all_passed = True\n        for step_name, verify_func in verification_steps:\n            print(f\"\\n📋 Checking: {step_name}\")\n            if not verify_func(test_dir):\n                all_passed = False\n        \n        # Final result\n        print(\"\\n\" + \"=\"*50)\n        if all_passed:\n            print(\"✅ Directory structure mirroring completed correctly!\")\n            print(\"🎉 Structure Mirror verification: PASS\")\n            sys.exit(0)\n        else:\n            print(\"❌ Structure Mirror verification: FAIL\")\n            sys.exit(1)\n            \n    except Exception as e:\n        print(f\"❌ Verification failed with error: {e}\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()"
}