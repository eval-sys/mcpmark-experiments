{
  "task_id": "requirements_completion",
  "task_name": "Requirements Completion",
  "category_id": "threestudio",
  "category_name": "Threestudio",
  "description": "Restore and complete missing Zero123-related dependencies in the requirements.txt file to ensure proper ThreeStudio project configuration.",
  "author": "Lingjun Chen",
  "created_at": "2025-08-05",
  "difficulty": "L3",
  "tags": [
    "code exploration",
    "cross-referencing"
  ],
  "mcp": [
    "filesystem"
  ],
  "meta_data": {
    "stateType": "text",
    "stateContent": "threestudio/\n    ├── configs/\n    │       ├── debugging/\n    │       │       ├── controlnet-canny.yaml\n    │       │       ├── controlnet-normal.yaml\n    │       │       ├── instructpix2pix.yaml\n    │       │       └── stablediffusion.yaml\n    │       ├── experimental/\n    │       │       ├── unified-guidance/\n    │       │       │       ├── dreamfusion-sd.yaml\n    │       │       │       ├── hifa.yaml\n    │       │       │       ├── prolificdreamer-hifa.yaml\n    │       │       │       ├── prolificdreamer.yaml\n    │       │       │       └── zero123-simple.yaml\n    │       │       ├── co3d-imagecondition.yaml\n    │       │       ├── imagecondition.yaml\n    │       │       ├── imagecondition_zero123nerf.yaml\n    │       │       ├── imagecondition_zero123nerf_refine.yaml\n    │       │       ├── prolificdreamer-importance.yaml\n    │       │       ├── prolificdreamer-neus-importance.yaml\n    │       │       ├── prolificdreamer-propnet.yaml\n    │       │       └── textmesh-if-importance.yaml\n    │       ├── gradio/\n    │       │       ├── dreamfusion-if.yaml\n    │       │       ├── dreamfusion-sd.yaml\n    │       │       ├── fantasia3d.yaml\n    │       │       ├── latentnerf.yaml\n    │       │       ├── sjc.yaml\n    │       │       └── textmesh-if.yaml\n    │       ├── control4d-static.yaml\n    │       ├── dreamfusion-if.yaml\n    │       ├── dreamfusion-sd-eff.yaml\n    │       ├── dreamfusion-sd.yaml\n    │       ├── fantasia3d-texture.yaml\n    │       ├── fantasia3d.yaml\n    │       ├── hifa.yaml\n    │       ├── instructnerf2nerf.yaml\n    │       ├── latentnerf-refine.yaml\n    │       ├── latentnerf.yaml\n    │       ├── magic123-coarse-sd.yaml\n    │       ├── magic123-hifa-coarse-sd.yaml\n    │       ├── magic123-hifa-refine-sd.yaml\n    │       ├── magic123-refine-sd.yaml\n    │       ├── magic3d-coarse-if.yaml\n    │       ├── magic3d-coarse-sd.yaml\n    │       ├── magic3d-refine-sd.yaml\n    │       ├── prolificdreamer-geometry.yaml\n    │       ├── prolificdreamer-hifa.yaml\n    │       ├── prolificdreamer-patch.yaml\n    │       ├── prolificdreamer-scene-hifa.yaml\n    │       ├── prolificdreamer-scene.yaml\n    │       ├── prolificdreamer-texture.yaml\n    │       ├── prolificdreamer.yaml\n    │       ├── sdi.yaml\n    │       ├── sjc.yaml\n    │       ├── sketchshape-refine.yaml\n    │       ├── sketchshape.yaml\n    │       ├── stable-zero123.yaml\n    │       ├── textmesh-if.yaml\n    │       ├── zero123-geometry.yaml\n    │       └── zero123.yaml\n    ├── custom/\n    │       └── put_custom_extensions_here\n    ├── docker/\n    │       ├── compose.yaml\n    │       └── Dockerfile\n    ├── docs/\n    │       └── installation.md\n    ├── extern/\n    │       ├── ldm_zero123/\n    │       │       ├── models/\n    │       │       │       ├── diffusion/\n    │       │       │       │       ├── __init__.py\n    │       │       │       │       ├── classifier.py\n    │       │       │       │       ├── ddim.py\n    │       │       │       │       ├── ddpm.py\n    │       │       │       │       ├── plms.py\n    │       │       │       │       └── sampling_util.py\n    │       │       │       └── autoencoder.py\n    │       │       ├── modules/\n    │       │       │       ├── diffusionmodules/\n    │       │       │       │       ├── __init__.py\n    │       │       │       │       ├── model.py\n    │       │       │       │       ├── openaimodel.py\n    │       │       │       │       └── util.py\n    │       │       │       ├── distributions/\n    │       │       │       │       ├── __init__.py\n    │       │       │       │       └── distributions.py\n    │       │       │       ├── encoders/\n    │       │       │       │       ├── __init__.py\n    │       │       │       │       └── modules.py\n    │       │       │       ├── evaluate/\n    │       │       │       │       ├── adm_evaluator.py\n    │       │       │       │       ├── evaluate_perceptualsim.py\n    │       │       │       │       ├── frechet_video_distance.py\n    │       │       │       │       ├── ssim.py\n    │       │       │       │       └── torch_frechet_video_distance.py\n    │       │       │       ├── image_degradation/\n    │       │       │       │       ├── utils/\n    │       │       │       │       │       └── test.png\n    │       │       │       │       ├── __init__.py\n    │       │       │       │       ├── bsrgan.py\n    │       │       │       │       ├── bsrgan_light.py\n    │       │       │       │       └── utils_image.py\n    │       │       │       ├── losses/\n    │       │       │       │       ├── __init__.py\n    │       │       │       │       ├── contperceptual.py\n    │       │       │       │       └── vqperceptual.py\n    │       │       │       ├── attention.py\n    │       │       │       ├── ema.py\n    │       │       │       └── x_transformer.py\n    │       │       ├── thirdp/\n    │       │       │       └── psp/\n    │       │       │               ├── helpers.py\n    │       │       │               ├── id_loss.py\n    │       │       │               └── model_irse.py\n    │       │       ├── __init__.py\n    │       │       ├── extras.py\n    │       │       ├── guidance.py\n    │       │       ├── lr_scheduler.py\n    │       │       └── util.py\n    │       ├── __init__.py\n    │       └── zero123.py\n    ├── load/\n    │       ├── images/\n    │       │       ├── anya_front.png\n    │       │       ├── anya_front_depth.png\n    │       │       ├── anya_front_normal.png\n    │       │       ├── anya_front_rgba.png\n    │       │       ├── baby_phoenix_on_ice.png\n    │       │       ├── baby_phoenix_on_ice_depth.png\n    │       │       ├── baby_phoenix_on_ice_normal.png\n    │       │       ├── baby_phoenix_on_ice_rgba.png\n    │       │       ├── beach_house_1.png\n    │       │       ├── beach_house_1_depth.png\n    │       │       ├── beach_house_1_normal.png\n    │       │       ├── beach_house_1_rgba.png\n    │       │       ├── beach_house_2.png\n    │       │       ├── beach_house_2_depth.png\n    │       │       ├── beach_house_2_normal.png\n    │       │       ├── beach_house_2_rgba.png\n    │       │       ├── bollywood_actress.png\n    │       │       ├── bollywood_actress_depth.png\n    │       │       ├── bollywood_actress_normal.png\n    │       │       ├── bollywood_actress_rgba.png\n    │       │       ├── cactus.png\n    │       │       ├── cactus_depth.png\n    │       │       ├── cactus_normal.png\n    │       │       ├── cactus_rgba.png\n    │       │       ├── catstatue.png\n    │       │       ├── catstatue_depth.png\n    │       │       ├── catstatue_normal.png\n    │       │       ├── catstatue_rgba.png\n    │       │       ├── church_ruins.png\n    │       │       ├── church_ruins_depth.png\n    │       │       ├── church_ruins_normal.png\n    │       │       ├── church_ruins_rgba.png\n    │       │       ├── dog1_rgba.png\n    │       │       ├── dragon2_rgba.png\n    │       │       ├── firekeeper.jpg\n    │       │       ├── firekeeper_depth.png\n    │       │       ├── firekeeper_normal.png\n    │       │       ├── firekeeper_rgba.png\n    │       │       ├── futuristic_car.png\n    │       │       ├── futuristic_car_depth.png\n    │       │       ├── futuristic_car_normal.png\n    │       │       ├── futuristic_car_rgba.png\n    │       │       ├── grootplant_rgba.png\n    │       │       ├── hamburger.png\n    │       │       ├── hamburger_depth.png\n    │       │       ├── hamburger_rgba.png\n    │       │       ├── mona_lisa.png\n    │       │       ├── mona_lisa_depth.png\n    │       │       ├── mona_lisa_normal.png\n    │       │       ├── mona_lisa_rgba.png\n    │       │       ├── robot_rgba.png\n    │       │       ├── teddy.png\n    │       │       ├── teddy_depth.png\n    │       │       ├── teddy_normal.png\n    │       │       ├── teddy_rgba.png\n    │       │       └── thorhammer_rgba.png\n    │       ├── lights/\n    │       │       ├── bsdf_256_256.bin\n    │       │       ├── LICENSE.txt\n    │       │       └── mud_road_puresky_1k.hdr\n    │       ├── shapes/\n    │       │       ├── animal.obj\n    │       │       ├── blub.obj\n    │       │       ├── cabin.obj\n    │       │       ├── env_sphere.obj\n    │       │       ├── hand_prismatic.obj\n    │       │       ├── human.obj\n    │       │       ├── nascar.obj\n    │       │       ├── potion.obj\n    │       │       ├── README.md\n    │       │       └── teddy.obj\n    │       ├── tets/\n    │       │       ├── 128_tets.npz\n    │       │       ├── 32_tets.npz\n    │       │       ├── 64_tets.npz\n    │       │       └── generate_tets.py\n    │       ├── zero123/\n    │       │       ├── download.sh\n    │       │       └── sd-objaverse-finetune-c_concat-256.yaml\n    │       ├── make_prompt_library.py\n    │       └── prompt_library.json\n    ├── scripts/\n    │       └── convert_zero123_to_diffusers.py\n    ├── threestudio/\n    │       ├── data/\n    │       │       ├── __init__.py\n    │       │       ├── co3d.py\n    │       │       ├── image.py\n    │       │       ├── multiview.py\n    │       │       ├── uncond.py\n    │       │       └── uncond_eff.py\n    │       ├── models/\n    │       │       ├── background/\n    │       │       │       ├── __init__.py\n    │       │       │       ├── base.py\n    │       │       │       ├── neural_environment_map_background.py\n    │       │       │       ├── solid_color_background.py\n    │       │       │       └── textured_background.py\n    │       │       ├── exporters/\n    │       │       │       ├── __init__.py\n    │       │       │       ├── base.py\n    │       │       │       └── mesh_exporter.py\n    │       │       ├── geometry/\n    │       │       │       ├── __init__.py\n    │       │       │       ├── base.py\n    │       │       │       ├── custom_mesh.py\n    │       │       │       ├── implicit_sdf.py\n    │       │       │       ├── implicit_volume.py\n    │       │       │       ├── tetrahedra_sdf_grid.py\n    │       │       │       └── volume_grid.py\n    │       │       ├── guidance/\n    │       │       │       ├── __init__.py\n    │       │       │       ├── controlnet_guidance.py\n    │       │       │       ├── deep_floyd_guidance.py\n    │       │       │       ├── instructpix2pix_guidance.py\n    │       │       │       ├── stable_diffusion_guidance.py\n    │       │       │       ├── stable_diffusion_sdi_guidance.py\n    │       │       │       ├── stable_diffusion_unified_guidance.py\n    │       │       │       ├── stable_diffusion_vsd_guidance.py\n    │       │       │       ├── stable_zero123_guidance.py\n    │       │       │       ├── zero123_guidance.py\n    │       │       │       └── zero123_unified_guidance.py\n    │       │       ├── materials/\n    │       │       │       ├── __init__.py\n    │       │       │       ├── base.py\n    │       │       │       ├── diffuse_with_point_light_material.py\n    │       │       │       ├── hybrid_rgb_latent_material.py\n    │       │       │       ├── neural_radiance_material.py\n    │       │       │       ├── no_material.py\n    │       │       │       ├── pbr_material.py\n    │       │       │       └── sd_latent_adapter_material.py\n    │       │       ├── prompt_processors/\n    │       │       │       ├── __init__.py\n    │       │       │       ├── base.py\n    │       │       │       ├── deepfloyd_prompt_processor.py\n    │       │       │       ├── dummy_prompt_processor.py\n    │       │       │       └── stable_diffusion_prompt_processor.py\n    │       │       ├── renderers/\n    │       │       │       ├── __init__.py\n    │       │       │       ├── base.py\n    │       │       │       ├── deferred_volume_renderer.py\n    │       │       │       ├── gan_volume_renderer.py\n    │       │       │       ├── nerf_volume_renderer.py\n    │       │       │       ├── neus_volume_renderer.py\n    │       │       │       ├── nvdiff_rasterizer.py\n    │       │       │       └── patch_renderer.py\n    │       │       ├── __init__.py\n    │       │       ├── estimators.py\n    │       │       ├── isosurface.py\n    │       │       ├── mesh.py\n    │       │       └── networks.py\n    │       ├── scripts/\n    │       │       ├── make_training_vid.py\n    │       │       ├── run_zero123.sh\n    │       │       ├── run_zero123_comparison.sh\n    │       │       ├── run_zero123_phase.sh\n    │       │       ├── run_zero123_phase2.sh\n    │       │       ├── run_zero123_sbatch.py\n    │       │       ├── zero123_demo.py\n    │       │       └── zero123_sbatch.sh\n    │       ├── systems/\n    │       │       ├── __init__.py\n    │       │       ├── base.py\n    │       │       ├── control4d_multiview.py\n    │       │       ├── dreamfusion.py\n    │       │       ├── eff_dreamfusion.py\n    │       │       ├── fantasia3d.py\n    │       │       ├── imagedreamfusion.py\n    │       │       ├── instructnerf2nerf.py\n    │       │       ├── latentnerf.py\n    │       │       ├── magic123.py\n    │       │       ├── magic3d.py\n    │       │       ├── optimizers.py\n    │       │       ├── prolificdreamer.py\n    │       │       ├── sdi.py\n    │       │       ├── sjc.py\n    │       │       ├── textmesh.py\n    │       │       ├── utils.py\n    │       │       ├── zero123.py\n    │       │       └── zero123_simple.py\n    │       ├── utils/\n    │       │       ├── GAN/\n    │       │       │       ├── __init__.py\n    │       │       │       ├── attention.py\n    │       │       │       ├── discriminator.py\n    │       │       │       ├── distribution.py\n    │       │       │       ├── loss.py\n    │       │       │       ├── mobilenet.py\n    │       │       │       ├── network_util.py\n    │       │       │       ├── util.py\n    │       │       │       └── vae.py\n    │       │       ├── perceptual/\n    │       │       │       ├── __init__.py\n    │       │       │       ├── perceptual.py\n    │       │       │       └── utils.py\n    │       │       ├── __init__.py\n    │       │       ├── base.py\n    │       │       ├── callbacks.py\n    │       │       ├── config.py\n    │       │       ├── loss.py\n    │       │       ├── misc.py\n    │       │       ├── ops.py\n    │       │       ├── rasterize.py\n    │       │       ├── saving.py\n    │       │       └── typing.py\n    │       └── __init__.py\n    ├── .editorconfig\n    ├── .pre-commit-config.yaml\n    ├── .pylintrc\n    ├── 2dplayground.ipynb\n    ├── 2dplayground_SDI_version.ipynb\n    ├── CHANGELOG.md\n    ├── DOCUMENTATION.md\n    ├── gradio_app.py\n    ├── launch.py\n    ├── LICENSE\n    ├── README.md\n    ├── requirements-dev.txt\n    ├── requirements.txt\n    ├── setup.py\n    └── threestudio.ipynb",
    "stateUrl": "https://storage.mcpmark.ai/filesystem/threestudio.zip",
    "stateOriginalUrl": "https://github.com/threestudio-project/threestudio"
  },
  "instruction": "Please use FileSystem tools to finish the following task:\n\n### Task Description\n\nThe `requirements.txt` file in the ThreeStudio project is used to install necessary Python libraries. However, the Zero123-related dependencies were accidentally deleted from the file. Your task is to restore these missing dependencies.\n\n### Task Objectives\n\n1. **Locate the requirements.txt file** in the test environment\n2. **Identify the missing Zero123 dependencies** that need to be restored\n3. **Add the required dependencies** to the requirements.txt file\n4. **Ensure the file format is correct** (one dependency per line)\n",
  "verify": "#!/usr/bin/env python3\n\"\"\"\nVerification script for ThreeStudio Task 3: Restore Zero123 Dependencies in Requirements.txt\n\"\"\"\n\nimport sys\nfrom pathlib import Path\nimport re\nimport os\n\ndef get_test_directory() -> Path:\n    \"\"\"Get the test directory from FILESYSTEM_TEST_DIR env var.\"\"\"\n    test_root = os.environ.get(\"FILESYSTEM_TEST_DIR\")\n    if not test_root:\n        raise ValueError(\"FILESYSTEM_TEST_DIR environment variable is required\")\n    return Path(test_root)\n\ndef verify_requirements_file_exists(test_dir: Path) -> bool:\n    \"\"\"Verify that the requirements.txt file exists.\"\"\"\n    requirements_file = test_dir / \"requirements.txt\"\n    \n    if not requirements_file.exists():\n        print(\"❌ File 'requirements.txt' not found\")\n        return False\n    \n    print(\"✅ Requirements.txt file found\")\n    return True\n\ndef verify_requirements_file_readable(test_dir: Path) -> bool:\n    \"\"\"Verify that the requirements.txt file is readable.\"\"\"\n    requirements_file = test_dir / \"requirements.txt\"\n    \n    try:\n        content = requirements_file.read_text()\n        if not content.strip():\n            print(\"❌ Requirements.txt file is empty\")\n            return False\n        \n        print(\"✅ Requirements.txt file is readable\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error reading requirements.txt file: {e}\")\n        return False\n\ndef verify_required_dependencies_present(test_dir: Path) -> bool:\n    \"\"\"Verify that all required Zero123 dependencies are present.\"\"\"\n    requirements_file = test_dir / \"requirements.txt\"\n    \n    try:\n        content = requirements_file.read_text()\n        \n        # Required dependencies to check for (simplified)\n        required_deps = [\n            \"einops\",\n            \"kornia\", \n            \"taming\",\n            \"openai\",\n            \"clip\"\n        ]\n        \n        missing_deps = []\n        found_deps = []\n        \n        for dep in required_deps:\n            if dep.lower() in content.lower():\n                found_deps.append(dep)\n            else:\n                missing_deps.append(dep)\n        \n        if missing_deps:\n            print(f\"❌ Missing required dependencies: {missing_deps}\")\n            return False\n        \n        print(f\"✅ All required dependencies found: {found_deps}\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error checking dependencies: {e}\")\n        return False\n\ndef verify_specific_dependency_entries(test_dir: Path) -> bool:\n    \"\"\"Verify that the specific dependency entries are present.\"\"\"\n    requirements_file = test_dir / \"requirements.txt\"\n    \n    try:\n        content = requirements_file.read_text()\n        \n        # Check for specific dependency entries (simplified)\n        # For taming, we only need to check if \"taming\" is present, not the full package name\n        required_checks = [\n            (\"einops\", \"einops\"),\n            (\"kornia\", \"kornia\"),\n            (\"taming\", \"taming\"),  # Just check for \"taming\" substring\n        ]\n        \n        missing_entries = []\n        found_entries = []\n        \n        for check_name, full_entry in required_checks:\n            if check_name in content.lower():\n                found_entries.append(check_name)\n            else:\n                missing_entries.append(check_name)\n        \n        # Special check for openai and clip - they should be on the same line\n        lines = content.split('\\n')\n        openai_clip_found = False\n        for line in lines:\n            line_lower = line.lower()\n            if \"openai\" in line_lower and \"clip\" in line_lower:\n                openai_clip_found = True\n                break\n        \n        if openai_clip_found:\n            found_entries.append(\"openai+clip\")\n        else:\n            missing_entries.append(\"openai+clip\")\n        \n        if missing_entries:\n            print(f\"❌ Missing required dependency checks: {missing_entries}\")\n            return False\n        \n        print(f\"✅ All required dependency checks passed: {found_entries}\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error checking specific entries: {e}\")\n        return False\n\ndef verify_file_format(test_dir: Path) -> bool:\n    \"\"\"Verify that the requirements.txt file has proper format.\"\"\"\n    requirements_file = test_dir / \"requirements.txt\"\n    \n    try:\n        content = requirements_file.read_text()\n        lines = content.split('\\n')\n        \n        # Basic format check - just ensure file is not completely empty\n        if not content.strip():\n            print(\"❌ File is completely empty\")\n            return False\n        \n        print(\"✅ File format is acceptable\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error checking file format: {e}\")\n        return False\n\ndef verify_no_duplicate_entries(test_dir: Path) -> bool:\n    \"\"\"Verify that there are no duplicate dependency entries.\"\"\"\n    requirements_file = test_dir / \"requirements.txt\"\n    \n    try:\n        content = requirements_file.read_text()\n        \n        # Simplified duplicate check - just ensure the file is not completely corrupted\n        if len(content) < 10:  # Basic sanity check\n            print(\"❌ File seems too short to be valid\")\n            return False\n        \n        print(\"✅ File appears to be valid\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error checking file: {e}\")\n        return False\n\ndef main():\n    \"\"\"Main verification function.\"\"\"\n    test_dir = get_test_directory()\n    print(\"🔍 Verifying ThreeStudio Task 3: Restore Zero123 Dependencies in Requirements.txt...\")\n    \n    # Define verification steps\n    verification_steps = [\n        (\"Requirements File Exists\", verify_requirements_file_exists),\n        (\"File is Readable\", verify_requirements_file_readable),\n        (\"Required Dependencies Present\", verify_required_dependencies_present),\n        (\"Specific Entries Present\", verify_specific_dependency_entries),\n        (\"File Format\", verify_file_format),\n        (\"File Validity\", verify_no_duplicate_entries),\n    ]\n    \n    # Run all verification steps\n    all_passed = True\n    for step_name, verify_func in verification_steps:\n        print(f\"\\n--- {step_name} ---\")\n        if not verify_func(test_dir):\n            all_passed = False\n    \n    # Final result\n    print(\"\\n\" + \"=\"*50)\n    if all_passed:\n        print(\"✅ Zero123 dependencies successfully restored in requirements.txt!\")\n        print(\"🎉 Task 3 verification: PASS\")\n        sys.exit(0)\n    else:\n        print(\"❌ Task 3 verification: FAIL\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()\n"
}