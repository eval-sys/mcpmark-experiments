{
  "task_id": "requirements_completion",
  "task_name": "Requirements Completion",
  "category_id": "threestudio",
  "category_name": "Threestudio",
  "description": "Restore and complete missing Zero123-related dependencies in the requirements.txt file to ensure proper ThreeStudio project configuration.",
  "author": "Lingjun Chen",
  "created_at": "2025-08-05",
  "difficulty": "L3",
  "tags": [
    "code exploration",
    "cross-referencing"
  ],
  "mcp": [
    "filesystem"
  ],
  "metadata": {},
  "instruction": "# ThreeStudio Task 3: Restore Zero123 Dependencies in Requirements.txt\n\n## 📋 Task Description\n\nThe `requirements.txt` file in the ThreeStudio project is used to install necessary Python libraries. However, the Zero123-related dependencies were accidentally deleted from the file. Your task is to restore these missing dependencies.\n\n## 🎯 Task Objectives\n\n1. **Locate the requirements.txt file** in the test environment\n2. **Identify the missing Zero123 dependencies** that need to be restored\n3. **Add the required dependencies** to the requirements.txt file\n4. **Ensure the file format is correct** (one dependency per line)\n",
  "verify": "#!/usr/bin/env python3\n\"\"\"\nVerification script for ThreeStudio Task 3: Restore Zero123 Dependencies in Requirements.txt\n\"\"\"\n\nimport sys\nfrom pathlib import Path\nimport re\nimport os\n\ndef get_test_directory() -> Path:\n    \"\"\"Get the test directory from FILESYSTEM_TEST_DIR env var.\"\"\"\n    test_root = os.environ.get(\"FILESYSTEM_TEST_DIR\")\n    if not test_root:\n        raise ValueError(\"FILESYSTEM_TEST_DIR environment variable is required\")\n    return Path(test_root)\n\ndef verify_requirements_file_exists(test_dir: Path) -> bool:\n    \"\"\"Verify that the requirements.txt file exists.\"\"\"\n    requirements_file = test_dir / \"requirements.txt\"\n    \n    if not requirements_file.exists():\n        print(\"❌ File 'requirements.txt' not found\")\n        return False\n    \n    print(\"✅ Requirements.txt file found\")\n    return True\n\ndef verify_requirements_file_readable(test_dir: Path) -> bool:\n    \"\"\"Verify that the requirements.txt file is readable.\"\"\"\n    requirements_file = test_dir / \"requirements.txt\"\n    \n    try:\n        content = requirements_file.read_text()\n        if not content.strip():\n            print(\"❌ Requirements.txt file is empty\")\n            return False\n        \n        print(\"✅ Requirements.txt file is readable\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error reading requirements.txt file: {e}\")\n        return False\n\ndef verify_required_dependencies_present(test_dir: Path) -> bool:\n    \"\"\"Verify that all required Zero123 dependencies are present.\"\"\"\n    requirements_file = test_dir / \"requirements.txt\"\n    \n    try:\n        content = requirements_file.read_text()\n        \n        # Required dependencies to check for (simplified)\n        required_deps = [\n            \"einops\",\n            \"kornia\", \n            \"taming\",\n            \"openai\",\n            \"clip\"\n        ]\n        \n        missing_deps = []\n        found_deps = []\n        \n        for dep in required_deps:\n            if dep.lower() in content.lower():\n                found_deps.append(dep)\n            else:\n                missing_deps.append(dep)\n        \n        if missing_deps:\n            print(f\"❌ Missing required dependencies: {missing_deps}\")\n            return False\n        \n        print(f\"✅ All required dependencies found: {found_deps}\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error checking dependencies: {e}\")\n        return False\n\ndef verify_specific_dependency_entries(test_dir: Path) -> bool:\n    \"\"\"Verify that the specific dependency entries are present.\"\"\"\n    requirements_file = test_dir / \"requirements.txt\"\n    \n    try:\n        content = requirements_file.read_text()\n        \n        # Check for specific dependency entries (simplified)\n        # For taming, we only need to check if \"taming\" is present, not the full package name\n        required_checks = [\n            (\"einops\", \"einops\"),\n            (\"kornia\", \"kornia\"),\n            (\"taming\", \"taming\"),  # Just check for \"taming\" substring\n        ]\n        \n        missing_entries = []\n        found_entries = []\n        \n        for check_name, full_entry in required_checks:\n            if check_name in content.lower():\n                found_entries.append(check_name)\n            else:\n                missing_entries.append(check_name)\n        \n        # Special check for openai and clip - they should be on the same line\n        lines = content.split('\\n')\n        openai_clip_found = False\n        for line in lines:\n            line_lower = line.lower()\n            if \"openai\" in line_lower and \"clip\" in line_lower:\n                openai_clip_found = True\n                break\n        \n        if openai_clip_found:\n            found_entries.append(\"openai+clip\")\n        else:\n            missing_entries.append(\"openai+clip\")\n        \n        if missing_entries:\n            print(f\"❌ Missing required dependency checks: {missing_entries}\")\n            return False\n        \n        print(f\"✅ All required dependency checks passed: {found_entries}\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error checking specific entries: {e}\")\n        return False\n\ndef verify_file_format(test_dir: Path) -> bool:\n    \"\"\"Verify that the requirements.txt file has proper format.\"\"\"\n    requirements_file = test_dir / \"requirements.txt\"\n    \n    try:\n        content = requirements_file.read_text()\n        lines = content.split('\\n')\n        \n        # Basic format check - just ensure file is not completely empty\n        if not content.strip():\n            print(\"❌ File is completely empty\")\n            return False\n        \n        print(\"✅ File format is acceptable\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error checking file format: {e}\")\n        return False\n\ndef verify_no_duplicate_entries(test_dir: Path) -> bool:\n    \"\"\"Verify that there are no duplicate dependency entries.\"\"\"\n    requirements_file = test_dir / \"requirements.txt\"\n    \n    try:\n        content = requirements_file.read_text()\n        \n        # Simplified duplicate check - just ensure the file is not completely corrupted\n        if len(content) < 10:  # Basic sanity check\n            print(\"❌ File seems too short to be valid\")\n            return False\n        \n        print(\"✅ File appears to be valid\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error checking file: {e}\")\n        return False\n\ndef main():\n    \"\"\"Main verification function.\"\"\"\n    test_dir = get_test_directory()\n    print(\"🔍 Verifying ThreeStudio Task 3: Restore Zero123 Dependencies in Requirements.txt...\")\n    \n    # Define verification steps\n    verification_steps = [\n        (\"Requirements File Exists\", verify_requirements_file_exists),\n        (\"File is Readable\", verify_requirements_file_readable),\n        (\"Required Dependencies Present\", verify_required_dependencies_present),\n        (\"Specific Entries Present\", verify_specific_dependency_entries),\n        (\"File Format\", verify_file_format),\n        (\"File Validity\", verify_no_duplicate_entries),\n    ]\n    \n    # Run all verification steps\n    all_passed = True\n    for step_name, verify_func in verification_steps:\n        print(f\"\\n--- {step_name} ---\")\n        if not verify_func(test_dir):\n            all_passed = False\n    \n    # Final result\n    print(\"\\n\" + \"=\"*50)\n    if all_passed:\n        print(\"✅ Zero123 dependencies successfully restored in requirements.txt!\")\n        print(\"🎉 Task 3 verification: PASS\")\n        sys.exit(0)\n    else:\n        print(\"❌ Task 3 verification: FAIL\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()\n"
}