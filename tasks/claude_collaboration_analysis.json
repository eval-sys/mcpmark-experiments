{
  "task_id": "claude_collaboration_analysis",
  "task_name": "Claude Collaboration Analysis",
  "category_id": "claude-code",
  "category_name": "Claude Code",
  "description": "Analyze Claude AI collaboration patterns in commit history and create a comprehensive report of co-authored commits and top collaborators.",
  "author": "Zijian Wu",
  "created_at": "2025-08-15",
  "difficulty": "L3",
  "tags": [
    "repository analysis"
  ],
  "mcp": [
    "github"
  ],
  "metadata": {},
  "instruction": "I need you to analyze the collaboration patterns between human developers and Claude (the AI assistant) in the repository by examining all available commit history, then create a comprehensive analysis report and submit it as a new file to the repository.\n\n**Step 1: Commit History Analysis**\nAnalyze ALL commits in the repository to identify:\n\n1. **Claude Co-Authored Commits**: Find all commits that were co-authored by Claude (look for \"Co-Authored-By: Claude <noreply@anthropic.com>\" in commit messages)\n2. **Top Claude Collaborators**: Identify the top 3 human developers who most frequently collaborated with Claude\n\n**Step 2: Create Collaboration Analysis Report**\nCreate a file called `CLAUDE_COLLABORATION_ANALYSIS.md` in the repository root with:\n\n- A \"# Claude AI Collaboration Analysis\" title\n- A \"## Summary Statistics\" section with:\n  - Total commits analyzed\n  - Number of Claude co-authored commits found\n  - Percentage of commits with Claude collaboration\n  - Number of unique human collaborators who worked with Claude\n\n- A \"## Top Claude Collaborators\" section with this exact table format:\n```markdown\n| Developer | GitHub Username | Claude Collaborations |\n|-----------|----------------|----------------------|\n```\nInclude the top 3 developers by number of Claude collaborations.\n\n**Step 3: Commit Analysis to Repository**\nCommit the `CLAUDE_COLLABORATION_ANALYSIS.md` file to the main branch with:\n- Commit message: \"Add Claude AI collaboration analysis report\"\n- Ensure all statistics are accurate based on actual commit data",
  "verify": "import sys\nimport os\nimport requests\nfrom typing import Dict, List, Optional, Tuple\nimport base64\nimport re\nfrom dotenv import load_dotenv\n\n\ndef _get_github_api(\n    endpoint: str, headers: Dict[str, str], org: str, repo: str = \"claude-code\"\n) -> Tuple[bool, Optional[Dict]]:\n    \"\"\"Make a GET request to GitHub API and return (success, response).\"\"\"\n    url = f\"https://api.github.com/repos/{org}/{repo}/{endpoint}\"\n    try:\n        response = requests.get(url, headers=headers)\n        if response.status_code == 200:\n            return True, response.json()\n        elif response.status_code == 404:\n            return False, None\n        else:\n            print(f\"API error for {endpoint}: {response.status_code}\", file=sys.stderr)\n            return False, None\n    except Exception as e:\n        print(f\"Exception for {endpoint}: {e}\", file=sys.stderr)\n        return False, None\n\n\ndef _get_file_content(\n    file_path: str,\n    headers: Dict[str, str],\n    org: str,\n    repo: str = \"claude-code\",\n    ref: str = \"main\",\n) -> Optional[str]:\n    \"\"\"Get the content of a file from the repository.\"\"\"\n    success, result = _get_github_api(\n        f\"contents/{file_path}?ref={ref}\", headers, org, repo\n    )\n    if not success or not result:\n        return None\n\n    try:\n        content = base64.b64decode(result.get(\"content\", \"\")).decode(\"utf-8\")\n        return content\n    except Exception as e:\n        print(f\"Content decode error for {file_path}: {e}\", file=sys.stderr)\n        return None\n\n\ndef _parse_summary_statistics(content: str) -> Dict:\n    \"\"\"Parse the summary statistics section from the report.\"\"\"\n    stats = {}\n\n    lines = content.split(\"\\n\")\n    in_summary = False\n\n    for line in lines:\n        if \"## Summary Statistics\" in line:\n            in_summary = True\n            continue\n\n        if in_summary:\n            if \"##\" in line and \"Summary Statistics\" not in line:\n                break\n\n            # Parse statistics lines\n            if \"Total commits analyzed:\" in line:\n                match = re.search(r\"(\\d+)\", line)\n                if match:\n                    stats[\"total_analyzed\"] = int(match.group(1))\n            elif \"Number of Claude co-authored commits:\" in line:\n                match = re.search(r\"(\\d+)\", line)\n                if match:\n                    stats[\"claude_commits\"] = int(match.group(1))\n            elif \"Percentage of commits with Claude collaboration:\" in line:\n                match = re.search(r\"([\\d.]+)%\", line)\n                if match:\n                    stats[\"percentage\"] = float(match.group(1))\n            elif \"Number of unique human collaborators:\" in line:\n                match = re.search(r\"(\\d+)\", line)\n                if match:\n                    stats[\"unique_collaborators\"] = int(match.group(1))\n\n    return stats\n\n\ndef _parse_collaborators_table(content: str) -> List[Dict]:\n    \"\"\"Parse the top collaborators table from the report.\"\"\"\n    collaborators = []\n\n    lines = content.split(\"\\n\")\n    in_table = False\n\n    for line in lines:\n        if \"| Developer | GitHub Username | Claude Collaborations |\" in line:\n            in_table = True\n            continue\n        if in_table and line.startswith(\"|---\"):\n            continue\n\n        if in_table and line.startswith(\"|\"):\n            parts = [p.strip() for p in line.split(\"|\")]\n            if len(parts) >= 4:  # Should have 3 columns plus empty parts\n                developer = parts[1].strip()\n                username = parts[2].strip()\n                collaborations = parts[3].strip()\n\n                if developer and username and collaborations:\n                    try:\n                        collaborators.append(\n                            {\n                                \"developer\": developer,\n                                \"username\": username,\n                                \"collaborations\": int(collaborations),\n                            }\n                        )\n                    except ValueError:\n                        pass\n\n        if in_table and line and not line.startswith(\"|\") and \"##\" in line:\n            break\n\n    return collaborators\n\n\ndef verify_task() -> bool:\n    \"\"\"Verify the Claude collaboration analysis task.\"\"\"\n    # Load environment variables from .mcp_env\n    load_dotenv(\".mcp_env\")\n\n    # Get GitHub token and org\n    github_token = os.environ.get(\"MCP_GITHUB_TOKEN\")\n    github_org = os.environ.get(\"GITHUB_EVAL_ORG\")\n\n    if not github_token:\n        print(\"Error: MCP_GITHUB_TOKEN environment variable not set\", file=sys.stderr)\n        return False\n\n    if not github_org:\n        print(\"Error: GITHUB_EVAL_ORG environment variable not set\", file=sys.stderr)\n        return False\n\n    headers = {\n        \"Authorization\": f\"Bearer {github_token}\",\n        \"Accept\": \"application/vnd.github.v3+json\",\n    }\n\n    # Pre-computed expected values based on repository analysis\n    # These are the correct answers the agent should find\n    EXPECTED_TOP_COLLABORATORS = [\n        {\n            \"username\": \"bcherny\",\n            \"min_collaborations\": 14,\n        },  # Boris Cherny has many Claude collaborations\n        {\"username\": \"ant-kurt\", \"min_collaborations\": 3},  # Kurt Carpenter has several\n        {\"username\": \"ashwin-ant\", \"min_collaborations\": 2},  # Ashwin Bhat has some\n    ]\n\n    # Expected exact values for summary statistics\n    EXPECTED_STATS = {\n        \"total_analyzed\": 158,\n        \"claude_commits\": 22,\n        \"percentage\": 13.9,\n        \"unique_collaborators\": 6,\n    }\n\n    print(\"Verifying Claude collaboration analysis task...\")\n\n    # 1. Check if CLAUDE_COLLABORATION_ANALYSIS.md exists in main branch\n    print(\"1. Checking if CLAUDE_COLLABORATION_ANALYSIS.md exists...\")\n    content = _get_file_content(\"CLAUDE_COLLABORATION_ANALYSIS.md\", headers, github_org)\n    if not content:\n        print(\n            \"Error: CLAUDE_COLLABORATION_ANALYSIS.md not found in main branch\",\n            file=sys.stderr,\n        )\n        return False\n    print(\"✓ CLAUDE_COLLABORATION_ANALYSIS.md found\")\n\n    # 2. Check required sections exist\n    print(\"2. Checking required sections...\")\n    required_sections = [\n        \"# Claude AI Collaboration Analysis\",\n        \"## Summary Statistics\",\n        \"## Top Claude Collaborators\",\n    ]\n\n    for section in required_sections:\n        if section not in content:\n            print(f\"Error: Missing required section '{section}'\", file=sys.stderr)\n            return False\n    print(\"✓ All required sections present\")\n\n    # 3. Parse and validate summary statistics\n    print(\"3. Validating summary statistics...\")\n    stats = _parse_summary_statistics(content)\n\n    if \"total_analyzed\" not in stats:\n        print(\"Error: Total commits analyzed not found\", file=sys.stderr)\n        return False\n\n    # Check exact values against expected statistics\n    if stats.get(\"total_analyzed\") != EXPECTED_STATS[\"total_analyzed\"]:\n        print(\n            f\"Error: Total analyzed should be {EXPECTED_STATS['total_analyzed']}, found {stats.get('total_analyzed')}\",\n            file=sys.stderr,\n        )\n        return False\n\n    if stats.get(\"claude_commits\") != EXPECTED_STATS[\"claude_commits\"]:\n        print(\n            f\"Error: Claude commits should be {EXPECTED_STATS['claude_commits']}, found {stats.get('claude_commits')}\",\n            file=sys.stderr,\n        )\n        return False\n\n    if stats.get(\"percentage\") != EXPECTED_STATS[\"percentage\"]:\n        print(\n            f\"Error: Percentage should be {EXPECTED_STATS['percentage']}%, found {stats.get('percentage')}%\",\n            file=sys.stderr,\n        )\n        return False\n\n    if stats.get(\"unique_collaborators\") != EXPECTED_STATS[\"unique_collaborators\"]:\n        print(\n            f\"Error: Unique collaborators should be {EXPECTED_STATS['unique_collaborators']}, found {stats.get('unique_collaborators')}\",\n            file=sys.stderr,\n        )\n        return False\n\n    print(\"✓ Summary statistics validated\")\n\n    # 4. Validate top collaborators table\n    print(\"4. Validating top collaborators...\")\n    collaborators = _parse_collaborators_table(content)\n\n    if len(collaborators) < 3:\n        print(\n            f\"Error: Expected 3 top collaborators, found {len(collaborators)}\",\n            file=sys.stderr,\n        )\n        return False\n\n    # Check that expected top collaborators are present\n    found_usernames = [c[\"username\"] for c in collaborators]\n\n    # The top 3 should include at least 2 of our expected collaborators\n    expected_found = 0\n    for expected in EXPECTED_TOP_COLLABORATORS:\n        if expected[\"username\"] in found_usernames[:3]:\n            expected_found += 1\n            # Also check they have reasonable collaboration counts\n            for collab in collaborators:\n                if collab[\"username\"] == expected[\"username\"]:\n                    if collab[\"collaborations\"] < expected[\"min_collaborations\"]:\n                        print(\n                            f\"Error: {expected['username']} should have at least {expected['min_collaborations']} collaborations, found {collab['collaborations']}\",\n                            file=sys.stderr,\n                        )\n                        return False\n\n    if expected_found < 2:\n        print(\n            f\"Error: Expected to find at least 2 of the known top collaborators in top 3, found {expected_found}\",\n            file=sys.stderr,\n        )\n        print(\n            f\"Expected to see at least 2 of: {[e['username'] for e in EXPECTED_TOP_COLLABORATORS]}\",\n            file=sys.stderr,\n        )\n        print(f\"Found: {found_usernames[:3]}\", file=sys.stderr)\n        return False\n\n    print(\"✓ Top collaborators validated\")\n\n    # 5. Check commit message verification\n    print(\"5. Verifying commit message...\")\n    success, latest_commits = _get_github_api(\n        \"commits?per_page=10\", headers, github_org\n    )\n    if not success:\n        print(\"Error: Failed to fetch recent commits\", file=sys.stderr)\n        return False\n\n    # Look for commit with expected message\n    expected_commit_message = \"Add Claude AI collaboration analysis report\"\n    commit_found = False\n    for commit in latest_commits:\n        if commit[\"commit\"][\"message\"].startswith(expected_commit_message):\n            commit_found = True\n            break\n\n    if not commit_found:\n        print(\n            f\"Error: Expected commit message '{expected_commit_message}' not found in recent commits\",\n            file=sys.stderr,\n        )\n        return False\n\n    print(\"✓ Commit message verified\")\n\n    # 6. Additional validation: Check unique collaborators count\n    print(\"6. Final validation complete...\")\n    print(\"✓ All statistics match expected values\")\n\n    print(\"\\n✅ All verification checks passed!\")\n    print(\"Claude collaboration analysis completed successfully:\")\n    print(\"  - File: CLAUDE_COLLABORATION_ANALYSIS.md created in main branch\")\n    print(f\"  - Commits analyzed: {stats.get('total_analyzed', 'N/A')}\")\n    print(f\"  - Claude collaborations found: {stats.get('claude_commits', 'N/A')}\")\n    print(f\"  - Top collaborators identified: {len(collaborators)}\")\n    print(\"  - All statistics verified\")\n    print(\"  - Commit message verified\")\n\n    return True\n\n\nif __name__ == \"__main__\":\n    success = verify_task()\n    sys.exit(0 if success else 1)\n"
}