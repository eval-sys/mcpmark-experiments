{
  "task_id": "employee_hierarchy_management",
  "task_name": "Employee Hierarchy Management",
  "category_id": "chinook",
  "category_name": "Chinook",
  "description": "Reorganize employee structure through CRUD operations including inserts, updates, deletes, and customer reassignments.",
  "author": "Lingxiao Du",
  "created_at": "2025-08-12",
  "difficulty": "L3",
  "tags": [
    "data migration",
    "schema design",
    "transactional operations"
  ],
  "mcp": [
    "postgres"
  ],
  "metadata": {},
  "instruction": "Manage employee hierarchy and customer assignments through systematic CRUD operations.\n\n## Your Mission:\n\nChinook needs to reorganize their employee structure and reassign customer relationships. Complete a series of precise database modifications to update the employee hierarchy.\n\n## Tasks to Complete:\n\n### 1. **INSERT: Add New Employees**\nInsert exactly 2 new employees into the Employee table:\n- EmployeeId: 9, FirstName: 'Sarah', LastName: 'Johnson', Title: 'Sales Support Agent', ReportsTo: 2, BirthDate: '1985-03-15', HireDate: '2009-01-10', Address: '123 Oak Street', City: 'Calgary', State: 'AB', Country: 'Canada', PostalCode: 'T2P 5G3', Phone: '+1 (403) 555-0123', Fax: '+1 (403) 555-0124', Email: 'sarah.johnson@chinookcorp.com'\n- EmployeeId: 10, FirstName: 'Mike', LastName: 'Chen', Title: 'Sales Support Agent', ReportsTo: 2, BirthDate: '1982-08-22', HireDate: '2009-01-10', Address: '456 Pine Ave', City: 'Calgary', State: 'AB', Country: 'Canada', PostalCode: 'T2P 5G4', Phone: '+1 (403) 555-0125', Fax: '+1 (403) 555-0126', Email: 'mike.chen@chinookcorp.com'\n\n### 2. **UPDATE: Modify Existing Employee Information**\n- Change Andrew Adams (EmployeeId = 1) title from 'General Manager' to 'CEO'\n- Update Nancy Edwards (EmployeeId = 2) phone number to '+1 (403) 555-9999'\n- Change all employees with Title = 'IT Staff' to have Title = 'IT Specialist'\n\n### 3. **UPDATE: Reassign Some Customers to New Employees**\n- Update customers with CustomerId 1, 2, 3 to have SupportRepId = 9 (Sarah Johnson)\n- Update customers with CustomerId 4, 5, 6 to have SupportRepId = 10 (Mike Chen)\n\n\n### 4. **UPDATE: Reorganize Reporting Structure**\n- Change Sarah Johnson (EmployeeId = 9) to report to Andrew Adams (EmployeeId = 1) instead of Nancy Edwards\n- Change Mike Chen (EmployeeId = 10) to also report to Andrew Adams (EmployeeId = 1)\n\n### 5. **INSERT: Create Employee Performance Table**\nCreate a new table called `employee_performance`:\n- `employee_id` (integer, foreign key to Employee)\n- `customers_assigned` (integer)\n- `performance_score` (decimal)\n\nInsert records for employees 9 and 10 by calculating their actual customer assignments:\n- Sarah Johnson: calculate actual number of customers assigned to her, performance score 4.5\n- Mike Chen: calculate actual number of customers assigned to him, performance score 4.2\n\n### 6. **DELETE: Remove IT Department Employee**\n- Delete Robert King (EmployeeId = 7) from the Employee table\n- Before deletion, handle all relationships:\n  - Find who Robert reports to and reassign any employees who report to Robert to report to Robert's manager instead\n  - Find all customers assigned to Robert as their support rep and reassign them to Robert's manager\n\n### 7. **UPDATE: Promote Remaining IT Staff**\n- Promote Laura Callahan (EmployeeId = 8) from 'IT Specialist' to 'Senior IT Specialist'  \n- Update her salary information by adding a new column `salary` to Employee table (decimal type)\n- Set Laura's salary to 75000.00 and all other employees to 50000.00\n\n### 8. **Final Verification Query**\nExecute this exact query to verify all changes:\n```sql\nSELECT \n    COUNT(*) as total_employees,\n    COUNT(CASE WHEN \"Title\" = 'CEO' THEN 1 END) as ceo_count,\n    COUNT(CASE WHEN \"Title\" = 'IT Specialist' THEN 1 END) as it_specialist_count,\n    COUNT(CASE WHEN \"ReportsTo\" = 1 THEN 1 END) as reports_to_ceo\nFROM \"Employee\";\n```\n\nExpected result: total_employees = 9, ceo_count = 1, it_specialist_count = 0, reports_to_ceo = 4\n\n## Business Rules:\n* Use exact EmployeeId values as specified\n* Maintain referential integrity between Employee and Customer tables\n* All phone numbers must include country code format\n* Email addresses must follow the pattern firstname.lastname@chinookcorp.com\n\n## Expected Outcome:\nThe database should have exactly 10 employees total, with the new hierarchy structure in place and customer assignments updated accordingly.",
  "verify": "\"\"\"\nVerification script for PostgreSQL Task 3: Employee Hierarchy Management\n\"\"\"\n\nimport os\nimport sys\nimport psycopg2\nfrom decimal import Decimal\n\ndef rows_match(actual_row, expected_row):\n    \"\"\"\n    Compare two rows with appropriate tolerance.\n    For Decimal types: allows 0.01 tolerance\n    For other types: requires exact match\n    \"\"\"\n    if len(actual_row) != len(expected_row):\n        return False\n    \n    for actual, expected in zip(actual_row, expected_row):\n        if isinstance(actual, Decimal) and isinstance(expected, Decimal):\n            if abs(float(actual) - float(expected)) > 0.01:\n                return False\n        elif actual != expected:\n            return False\n    \n    return True\n\ndef get_connection_params() -> dict:\n    \"\"\"Get database connection parameters.\"\"\"\n    return {\n        \"host\": os.getenv(\"POSTGRES_HOST\", \"localhost\"),\n        \"port\": int(os.getenv(\"POSTGRES_PORT\", 5432)),\n        \"database\": os.getenv(\"POSTGRES_DATABASE\"),\n        \"user\": os.getenv(\"POSTGRES_USERNAME\"),\n        \"password\": os.getenv(\"POSTGRES_PASSWORD\")\n    }\n\ndef verify_employee_count_and_titles(conn) -> bool:\n    \"\"\"Verify the final employee count and title changes.\"\"\"\n    with conn.cursor() as cur:\n        # Check the final verification query results\n        cur.execute(\"\"\"\n            SELECT \n                COUNT(*) as total_employees,\n                COUNT(CASE WHEN \"Title\" = 'CEO' THEN 1 END) as ceo_count,\n                COUNT(CASE WHEN \"Title\" = 'IT Specialist' THEN 1 END) as it_specialist_count,\n                COUNT(CASE WHEN \"ReportsTo\" = 1 THEN 1 END) as reports_to_ceo\n            FROM \"Employee\"\n        \"\"\")\n        result = cur.fetchone()\n        \n        total_employees, ceo_count, it_specialist_count, reports_to_ceo = result\n        \n        # Expected: total_employees = 9, ceo_count = 1, it_specialist_count = 1, reports_to_ceo = 4\n        if total_employees != 9:\n            print(f\"❌ Expected 9 total employees, got {total_employees}\")\n            return False\n            \n        if ceo_count != 1:\n            print(f\"❌ Expected 1 CEO, got {ceo_count}\")\n            return False\n            \n        if it_specialist_count != 0:\n            print(f\"❌ Expected 0 IT Specialists, got {it_specialist_count}\")\n            return False\n            \n        if reports_to_ceo != 4:\n            print(f\"❌ Expected 4 employees reporting to CEO, got {reports_to_ceo}\")\n            return False\n        \n        print(\"✅ Employee count and title verification passed\")\n        return True\n\ndef verify_specific_employees(conn) -> bool:\n    \"\"\"Verify specific employee records and modifications.\"\"\"\n    with conn.cursor() as cur:\n        # Check all employee fields in one query\n        cur.execute(\"\"\"\n            SELECT \"EmployeeId\", \"LastName\", \"FirstName\", \"Title\", \"ReportsTo\", \"BirthDate\", \n                   \"HireDate\", \"Address\", \"City\", \"State\", \"Country\", \"PostalCode\", \n                   \"Phone\", \"Fax\", \"Email\"\n            FROM \"Employee\" \n            WHERE \"EmployeeId\" IN (1, 2, 9, 10)\n            ORDER BY \"EmployeeId\"\n        \"\"\")\n        employees = cur.fetchall()\n        \n        from datetime import datetime\n        \n        expected = [\n            # Andrew Adams (ID 1) - Title changes to 'CEO', phone stays original, ReportsTo stays None\n            (1, 'Adams', 'Andrew', 'CEO', None, datetime(1962, 2, 18), datetime(2002, 8, 14),\n             '11120 Jasper Ave NW', 'Edmonton', 'AB', 'Canada', 'T5K 2N1', '+1 (780) 428-9482', '+1 (780) 428-3457', 'andrew@chinookcorp.com'),\n            # Nancy Edwards (ID 2) - Phone changes, title stays 'Sales Manager', ReportsTo stays 1\n            (2, 'Edwards', 'Nancy', 'Sales Manager', 1, datetime(1958, 12, 8), datetime(2002, 5, 1),\n             '825 8 Ave SW', 'Calgary', 'AB', 'Canada', 'T2P 2T3', '+1 (403) 555-9999', '+1 (403) 262-3322', 'nancy@chinookcorp.com'),\n            # Sarah Johnson - all new data, final ReportsTo = 1 (changed in step 4)\n            (9, 'Johnson', 'Sarah', 'Sales Support Agent', 1, datetime(1985, 3, 15), datetime(2009, 1, 10),\n             '123 Oak Street', 'Calgary', 'AB', 'Canada', 'T2P 5G3', '+1 (403) 555-0123', '+1 (403) 555-0124', 'sarah.johnson@chinookcorp.com'),\n            # Mike Chen - all new data, final ReportsTo = 1 (changed in step 4)\n            (10, 'Chen', 'Mike', 'Sales Support Agent', 1, datetime(1982, 8, 22), datetime(2009, 1, 10),\n             '456 Pine Ave', 'Calgary', 'AB', 'Canada', 'T2P 5G4', '+1 (403) 555-0125', '+1 (403) 555-0126', 'mike.chen@chinookcorp.com')\n        ]\n        \n        if len(employees) != 4:\n            print(f\"❌ Expected 4 key employees, found {len(employees)}\")\n            return False\n            \n        # Full field comparison for all employees using rows_match\n        for actual, expected_emp in zip(employees, expected):\n            if not rows_match(actual, expected_emp):\n                print(f\"❌ Employee {actual[0]} row mismatch: expected {expected_emp}, got {actual}\")\n                return False\n        \n        print(\"✅ Specific employee verification passed - all fields match exactly\")\n        return True\n\ndef verify_customer_assignments(conn) -> bool:\n    \"\"\"Verify customer support representative assignments.\"\"\"\n    with conn.cursor() as cur:\n        # Check customers 1, 2, 3 are assigned to Sarah (ID 9)\n        cur.execute(\"\"\"\n            SELECT COUNT(*)\n            FROM \"Customer\" \n            WHERE \"CustomerId\" IN (1, 2, 3) AND \"SupportRepId\" = 9\n        \"\"\")\n        sarah_customers = cur.fetchone()[0]\n        \n        if sarah_customers != 3:\n            print(f\"❌ Expected 3 customers assigned to Sarah Johnson, got {sarah_customers}\")\n            return False\n        \n        # Check customers 4, 5, 6 are assigned to Mike (ID 10)\n        cur.execute(\"\"\"\n            SELECT COUNT(*)\n            FROM \"Customer\" \n            WHERE \"CustomerId\" IN (4, 5, 6) AND \"SupportRepId\" = 10\n        \"\"\")\n        mike_customers = cur.fetchone()[0]\n        \n        if mike_customers != 3:\n            print(f\"❌ Expected 3 customers assigned to Mike Chen, got {mike_customers}\")\n            return False\n        \n        print(\"✅ Customer assignment verification passed\")\n        return True\n\ndef verify_performance_table(conn) -> bool:\n    \"\"\"Verify the employee_performance table exists and has correct data.\"\"\"\n    with conn.cursor() as cur:\n        try:\n            # Get all performance records\n            cur.execute(\"\"\"\n                SELECT employee_id, customers_assigned, performance_score\n                FROM employee_performance \n                ORDER BY employee_id\n            \"\"\")\n            actual_results = cur.fetchall()\n            \n            # Get actual customer counts for verification\n            cur.execute(\"\"\"\n                SELECT \"SupportRepId\", COUNT(*) \n                FROM \"Customer\" \n                WHERE \"SupportRepId\" IN (9, 10)\n                GROUP BY \"SupportRepId\"\n                ORDER BY \"SupportRepId\"\n            \"\"\")\n            customer_counts = dict(cur.fetchall())\n            \n            expected = [\n                (9, customer_counts.get(9, 0), Decimal('4.5')),  # Sarah Johnson\n                (10, customer_counts.get(10, 0), Decimal('4.2'))  # Mike Chen\n            ]\n            \n            if len(actual_results) != 2:\n                print(f\"❌ Expected 2 performance records, got {len(actual_results)}\")\n                return False\n            \n            for actual, expected_row in zip(actual_results, expected):\n                if not rows_match(actual, expected_row):\n                    print(f\"❌ Performance record mismatch: expected {expected_row}, got {actual}\")\n                    return False\n            \n            print(\"✅ Employee performance table verification passed\")\n            return True\n            \n        except psycopg2.Error as e:\n            print(f\"❌ Employee performance table verification failed: {e}\")\n            return False\n\ndef verify_employee_deletion_and_promotion(conn) -> bool:\n    \"\"\"Verify Robert King deletion and Laura Callahan promotion.\"\"\"\n    with conn.cursor() as cur:\n        try:\n            # Verify Robert King (ID 7) is deleted\n            cur.execute(\"\"\"\n                SELECT COUNT(*) FROM \"Employee\" WHERE \"EmployeeId\" = 7\n            \"\"\")\n            if cur.fetchone()[0] != 0:\n                print(\"❌ Robert King (EmployeeId = 7) should be deleted\")\n                return False\n            \n            # Verify Laura Callahan (ID 8) promotion\n            cur.execute(\"\"\"\n                SELECT \"Title\" FROM \"Employee\" WHERE \"EmployeeId\" = 8\n            \"\"\")\n            laura_title = cur.fetchone()\n            if not laura_title or laura_title[0] != 'Senior IT Specialist':\n                print(f\"❌ Laura Callahan should have title 'Senior IT Specialist', got: {laura_title[0] if laura_title else None}\")\n                return False\n            \n            print(\"✅ Employee deletion and promotion verification passed\")\n            return True\n            \n        except psycopg2.Error as e:\n            print(f\"❌ Employee deletion/promotion verification failed: {e}\")\n            return False\n\ndef verify_salary_column(conn) -> bool:\n    \"\"\"Verify salary column exists and has correct values.\"\"\"\n    with conn.cursor() as cur:\n        try:\n            # Check if salary column exists and get all salary values\n            cur.execute(\"\"\"\n                SELECT \"EmployeeId\", salary \n                FROM \"Employee\" \n                ORDER BY \"EmployeeId\"\n            \"\"\")\n            salary_data = cur.fetchall()\n            \n            # Verify Laura (ID 8) has 75000.00, others have 50000.00\n            for emp_id, salary in salary_data:\n                expected_salary = Decimal('75000.00') if emp_id == 8 else Decimal('50000.00')\n                if salary != expected_salary:\n                    print(f\"❌ Employee {emp_id} salary should be {expected_salary}, got {salary}\")\n                    return False\n            \n            print(\"✅ Salary column verification passed\")\n            return True\n            \n        except psycopg2.Error as e:\n            print(f\"❌ Salary column verification failed: {e}\")\n            return False\n\ndef main():\n    \"\"\"Main verification function.\"\"\"\n    print(\"=\" * 50)\n    print(\"Verifying Task 3: Employee Hierarchy Management\")\n    print(\"=\" * 50)\n\n    # Get connection parameters\n    conn_params = get_connection_params()\n\n    if not conn_params[\"database\"]:\n        print(\"❌ No database specified\")\n        sys.exit(1)\n\n    try:\n        # Connect to database\n        conn = psycopg2.connect(**conn_params)\n\n        # Run verification checks with short-circuit evaluation\n        success = (verify_employee_count_and_titles(conn) and\n                  verify_specific_employees(conn) and\n                  verify_customer_assignments(conn) and\n                  verify_performance_table(conn) and\n                  verify_employee_deletion_and_promotion(conn) and\n                  verify_salary_column(conn))\n\n        conn.close()\n\n        if success:\n            print(\"\\n🎉 Task verification: PASS\")\n            print(\"All employee hierarchy management operations completed correctly!\")\n            sys.exit(0)\n        else:\n            print(\"\\n❌ Task verification: FAIL\")\n            sys.exit(1)\n\n    except psycopg2.Error as e:\n        print(f\"❌ Database error: {e}\")\n        sys.exit(1)\n    except Exception as e:\n        print(f\"❌ Verification error: {e}\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()"
}