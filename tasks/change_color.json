{
  "task_id": "change_color",
  "task_name": "Change Color",
  "category_id": "toronto_guide",
  "category_name": "Toronto Guide",
  "description": "Navigate to the Toronto Guide page and change all pink-colored elements to different colors.",
  "author": "Xiangyan Liu",
  "created_at": "2025-08-14",
  "difficulty": "L3",
  "tags": [
    "visual formatting",
    "conditional filtering"
  ],
  "mcp": [
    "notion"
  ],
  "metadata": {
    "ori_template_url": "https://painted-tennis-ebc.notion.site/Toronto-Guide-25281626b6d7802caa7cc394647e901c",
    "gt_page_url": "https://www.notion.so/Toronto-Guide-Change-Color-2502b7e8cebd801d9e10eba0eb8942ab"
  },
  "instruction": "Navigate to the Toronto Guide page in Notion and change all pink-colored elements (tags and callout colors) to different colors.\n\n## Requirements\n1. Find and access the Toronto Guide page in Notion\n2. Identify and change all pink elements including:\n   - Pink tags in databases\n   - Pink callout backgrounds\n3. Change all pink colors to any other color of your choice",
  "verify": "import sys\nfrom notion_client import Client\nfrom tasks.utils import notion_utils\n\ndef get_page_title(page_result):\n    \"\"\"Extract title from a page result\"\"\"\n    properties = page_result.get('properties', {})\n    for prop_name in ['Name', 'Title', 'title']:\n        if prop_name in properties:\n            prop = properties[prop_name]\n            if prop.get('type') == 'title':\n                title_array = prop.get('title', [])\n                if title_array and len(title_array) > 0:\n                    return title_array[0].get('plain_text', '')\n    return ''\n\ndef get_page_tags(page_result):\n    \"\"\"Extract tags from a page result\"\"\"\n    properties = page_result.get('properties', {})\n    tags_property = properties.get('Tags', {})\n    if tags_property.get('type') == 'multi_select':\n        tags = tags_property.get('multi_select', [])\n        return [tag.get('name') for tag in tags]\n    return []\n\ndef verify(notion: Client, main_id: str = None) -> bool:\n    \"\"\"\n    Verifies that all pink colors have been changed in the Toronto Guide page.\n    \n    Expected pink elements that should be changed:\n    1. Callout: \"Welcome to Toronto!\" with red_background (originally should be pink)\n    2. Activities database tags: \n       - \"Parks\" tag (High Park, Evergreen Brickworks)\n       - \"Neighbourhood\" tag (Ossington Strip, Chinatown, Little Italy, Kensington Market, Queen west, The beaches)\n    3. Food database tags:\n       - \"Middle Eastern\" (Byblos Downtown)\n       - \"Jamaican\" (Crumbs Patties)\n       - \"Indian\" (Leela Indian Food Bar)\n    4. Cafes database tag:\n       - \"Food\" (Cafe Landwer)\n    \n    These elements should exist with the same name/content but different colors.\n    Tag distributions should remain the same.\n    \"\"\"\n    # Step 1: Find the main Toronto Guide page\n    if main_id:\n        found_id, object_type = notion_utils.find_page_or_database_by_id(notion, main_id)\n        if not found_id or object_type != 'page':\n            print(\"Error: Toronto Guide page not found.\", file=sys.stderr)\n            return False\n    else:\n        # Try to find the page by searching\n        found_id = notion_utils.find_page(notion, \"Toronto Guide\")\n        if not found_id:\n            print(\"Error: Toronto Guide page not found.\", file=sys.stderr)\n            return False\n    \n    print(f\"Found Toronto Guide page: {found_id}\")\n    \n    # Get all blocks from the page\n    all_blocks = notion_utils.get_all_blocks_recursively(notion, found_id)\n    print(f\"Found {len(all_blocks)} blocks\")\n    \n    # Expected elements and their distributions\n    expected_pink_elements = {\n        \"callout\": {\n            \"text\": \"Welcome to Toronto!\",\n            \"found\": False,\n            \"has_pink\": False,\n            \"exists\": False\n        },\n        \"activities_tags\": {\n            \"Parks\": {\n                \"found\": False, \n                \"has_pink\": False,\n                \"expected_items\": [\"High Park\", \"Evergreen Brickworks\"],\n                \"actual_items\": []\n            },\n            \"Neighbourhood\": {\n                \"found\": False, \n                \"has_pink\": False,\n                \"expected_items\": [\"Ossington Strip\", \"Chinatown\", \"Little Italy\", \"Kensington Market\", \"Queen west\", \"The beaches\"],\n                \"actual_items\": []\n            }\n        },\n        \"food_tags\": {\n            \"Middle Eastern\": {\n                \"found\": False, \n                \"has_pink\": False,\n                \"expected_items\": [\"Byblos Downtown\"],\n                \"actual_items\": []\n            },\n            \"Jamaican\": {\n                \"found\": False, \n                \"has_pink\": False,\n                \"expected_items\": [\"Crumbs Patties\"],\n                \"actual_items\": []\n            },\n            \"Indian\": {\n                \"found\": False, \n                \"has_pink\": False,\n                \"expected_items\": [\"Leela Indian Food Bar\"],\n                \"actual_items\": []\n            }\n        },\n        \"cafes_tags\": {\n            \"Food\": {\n                \"found\": False, \n                \"has_pink\": False,\n                \"expected_items\": [\"Cafe Landwer\"],\n                \"actual_items\": []\n            }\n        }\n    }\n    \n    # Database IDs\n    activities_db_id = None\n    food_db_id = None\n    cafes_db_id = None\n    \n    # Step 2: Check all blocks for callouts and find databases\n    for block in all_blocks:\n        if block is None:\n            continue\n            \n        block_type = block.get(\"type\")\n        \n        # Check for the specific callout block\n        if block_type == \"callout\":\n            callout_text = notion_utils.get_block_plain_text(block)\n            if \"Welcome to Toronto!\" in callout_text:\n                expected_pink_elements[\"callout\"][\"exists\"] = True\n                expected_pink_elements[\"callout\"][\"found\"] = True\n                color = block.get(\"callout\", {}).get(\"color\", \"\")\n                if \"pink\" in color.lower():\n                    expected_pink_elements[\"callout\"][\"has_pink\"] = True\n                    print(f\"✗ Callout 'Welcome to Toronto!' still has pink color: {color}\")\n                else:\n                    print(f\"✓ Callout 'Welcome to Toronto!' has non-pink color: {color}\")\n        \n        # Find child databases\n        elif block_type == \"child_database\":\n            title = block.get(\"child_database\", {}).get(\"title\", \"\")\n            block_id = block.get(\"id\")\n            \n            if \"Activities\" in title:\n                activities_db_id = block_id\n                print(f\"Found Activities database: {block_id}\")\n            elif \"Food\" in title:\n                food_db_id = block_id\n                print(f\"Found Food database: {block_id}\")\n            elif \"Cafes\" in title or \"Café\" in title:\n                cafes_db_id = block_id\n                print(f\"Found Cafes database: {block_id}\")\n    \n    # Step 3: Check Activities database for specific tags and their distributions\n    if activities_db_id:\n        try:\n            # Get database properties\n            db_info = notion.databases.retrieve(database_id=activities_db_id)\n            tags_property = db_info.get(\"properties\", {}).get(\"Tags\", {})\n            if tags_property.get(\"type\") == \"multi_select\":\n                options = tags_property.get(\"multi_select\", {}).get(\"options\", [])\n                for option in options:\n                    tag_name = option.get(\"name\").strip()\n                    tag_color = option.get(\"color\")\n                    \n                    if tag_name in expected_pink_elements[\"activities_tags\"]:\n                        expected_pink_elements[\"activities_tags\"][tag_name][\"found\"] = True\n                        if tag_color == \"pink\":\n                            expected_pink_elements[\"activities_tags\"][tag_name][\"has_pink\"] = True\n                            print(f\"✗ Activities tag '{tag_name}' still has pink color\")\n                        else:\n                            print(f\"✓ Activities tag '{tag_name}' changed to {tag_color}\")\n            \n            # Query database to check tag distributions\n            query_result = notion.databases.query(database_id=activities_db_id)\n            for page in query_result.get('results', []):\n                page_title = get_page_title(page).strip()\n                page_tags = get_page_tags(page)\n                \n                for tag_name in expected_pink_elements[\"activities_tags\"]:\n                    if tag_name in page_tags:\n                        expected_pink_elements[\"activities_tags\"][tag_name][\"actual_items\"].append(page_title)\n                        \n        except Exception as e:\n            print(f\"Error checking Activities database: {e}\", file=sys.stderr)\n            return False\n    else:\n        print(\"Error: Activities database not found\", file=sys.stderr)\n        return False\n    \n    # Step 4: Check Food database for specific tags and their distributions\n    if food_db_id:\n        try:\n            # Get database properties\n            db_info = notion.databases.retrieve(database_id=food_db_id)\n            tags_property = db_info.get(\"properties\", {}).get(\"Tags\", {})\n            if tags_property.get(\"type\") == \"multi_select\":\n                options = tags_property.get(\"multi_select\", {}).get(\"options\", [])\n                for option in options:\n                    tag_name = option.get(\"name\").strip()\n                    tag_color = option.get(\"color\")\n                    \n                    if tag_name in expected_pink_elements[\"food_tags\"]:\n                        expected_pink_elements[\"food_tags\"][tag_name][\"found\"] = True\n                        if tag_color == \"pink\":\n                            expected_pink_elements[\"food_tags\"][tag_name][\"has_pink\"] = True\n                            print(f\"✗ Food tag '{tag_name}' still has pink color\")\n                        else:\n                            print(f\"✓ Food tag '{tag_name}' changed to {tag_color}\")\n            \n            # Query database to check tag distributions\n            query_result = notion.databases.query(database_id=food_db_id)\n            for page in query_result.get('results', []):\n                page_title = get_page_title(page).strip()\n                page_tags = get_page_tags(page)\n                \n                for tag_name in expected_pink_elements[\"food_tags\"]:\n                    if tag_name in page_tags:\n                        expected_pink_elements[\"food_tags\"][tag_name][\"actual_items\"].append(page_title)\n                        \n        except Exception as e:\n            print(f\"Error checking Food database: {e}\", file=sys.stderr)\n            return False\n    else:\n        print(\"Error: Food database not found\", file=sys.stderr)\n        return False\n    \n    # Step 5: Check Cafes database for specific tags and their distributions\n    if cafes_db_id:\n        try:\n            # Get database properties\n            db_info = notion.databases.retrieve(database_id=cafes_db_id)\n            tags_property = db_info.get(\"properties\", {}).get(\"Tags\", {})\n            if tags_property.get(\"type\") == \"multi_select\":\n                options = tags_property.get(\"multi_select\", {}).get(\"options\", [])\n                for option in options:\n                    tag_name = option.get(\"name\").strip()\n                    tag_color = option.get(\"color\")\n                    \n                    if tag_name in expected_pink_elements[\"cafes_tags\"]:\n                        expected_pink_elements[\"cafes_tags\"][tag_name][\"found\"] = True\n                        if tag_color == \"pink\":\n                            expected_pink_elements[\"cafes_tags\"][tag_name][\"has_pink\"] = True\n                            print(f\"✗ Cafes tag '{tag_name}' still has pink color\")\n                        else:\n                            print(f\"✓ Cafes tag '{tag_name}' changed to {tag_color}\")\n            \n            # Query database to check tag distributions\n            query_result = notion.databases.query(database_id=cafes_db_id)\n            for page in query_result.get('results', []):\n                page_title = get_page_title(page).strip()\n                page_tags = get_page_tags(page)\n                \n                for tag_name in expected_pink_elements[\"cafes_tags\"]:\n                    if tag_name in page_tags:\n                        expected_pink_elements[\"cafes_tags\"][tag_name][\"actual_items\"].append(page_title)\n                        \n        except Exception as e:\n            print(f\"Error checking Cafes database: {e}\", file=sys.stderr)\n            return False\n    else:\n        print(\"Error: Cafes database not found\", file=sys.stderr)\n        return False\n    \n    # Step 6: Verify all requirements\n    print(f\"\\nVerification Summary:\")\n    \n    all_passed = True\n    \n    # Check callout\n    if not expected_pink_elements[\"callout\"][\"exists\"]:\n        print(\"✗ 'Welcome to Toronto!' callout not found\", file=sys.stderr)\n        all_passed = False\n    elif expected_pink_elements[\"callout\"][\"has_pink\"]:\n        print(\"✗ Callout still has pink background\", file=sys.stderr)\n        all_passed = False\n    else:\n        print(\"✓ Callout color changed from pink\")\n    \n    # Check Activities tags\n    print(\"\\nActivities Database Tags:\")\n    for tag_name, tag_info in expected_pink_elements[\"activities_tags\"].items():\n        if not tag_info[\"found\"]:\n            print(f\"✗ Activities tag '{tag_name}' not found (may have been renamed)\", file=sys.stderr)\n            # Don't fail if tag was renamed, as that's acceptable\n        elif tag_info[\"has_pink\"]:\n            print(f\"✗ Activities tag '{tag_name}' still has pink color\", file=sys.stderr)\n            all_passed = False\n        else:\n            print(f\"✓ Activities tag '{tag_name}' color changed from pink\")\n            \n        # Check distribution\n        expected_set = set(tag_info[\"expected_items\"])\n        actual_set = set(tag_info[\"actual_items\"])\n        if tag_info[\"found\"] and expected_set != actual_set:\n            print(f\"  ✗ Tag distribution mismatch for '{tag_name}':\", file=sys.stderr)\n            print(f\"    Expected: {sorted(expected_set)}\", file=sys.stderr)\n            print(f\"    Actual: {sorted(actual_set)}\", file=sys.stderr)\n            # Note: We don't fail on distribution mismatch if tag was renamed\n            if not (expected_set - actual_set):  # If all expected items are present\n                print(f\"    (Additional items found, but all expected items are present)\")\n        elif tag_info[\"found\"]:\n            print(f\"  ✓ Tag distribution maintained for '{tag_name}'\")\n    \n    # Check Food tags\n    print(\"\\nFood Database Tags:\")\n    for tag_name, tag_info in expected_pink_elements[\"food_tags\"].items():\n        if not tag_info[\"found\"]:\n            print(f\"✗ Food tag '{tag_name}' not found (may have been renamed)\", file=sys.stderr)\n            # Don't fail if tag was renamed, as that's acceptable\n        elif tag_info[\"has_pink\"]:\n            print(f\"✗ Food tag '{tag_name}' still has pink color\", file=sys.stderr)\n            all_passed = False\n        else:\n            print(f\"✓ Food tag '{tag_name}' color changed from pink\")\n            \n        # Check distribution\n        expected_set = set(tag_info[\"expected_items\"])\n        actual_set = set(tag_info[\"actual_items\"])\n        if tag_info[\"found\"] and expected_set != actual_set:\n            print(f\"  ✗ Tag distribution mismatch for '{tag_name}':\", file=sys.stderr)\n            print(f\"    Expected: {sorted(expected_set)}\", file=sys.stderr)\n            print(f\"    Actual: {sorted(actual_set)}\", file=sys.stderr)\n        elif tag_info[\"found\"]:\n            print(f\"  ✓ Tag distribution maintained for '{tag_name}'\")\n    \n    # Check Cafes tags\n    print(\"\\nCafes Database Tags:\")\n    for tag_name, tag_info in expected_pink_elements[\"cafes_tags\"].items():\n        if not tag_info[\"found\"]:\n            print(f\"✗ Cafes tag '{tag_name}' not found (may have been renamed)\", file=sys.stderr)\n            # Don't fail if tag was renamed, as that's acceptable\n        elif tag_info[\"has_pink\"]:\n            print(f\"✗ Cafes tag '{tag_name}' still has pink color\", file=sys.stderr)\n            all_passed = False\n        else:\n            print(f\"✓ Cafes tag '{tag_name}' color changed from pink\")\n            \n        # Check distribution\n        expected_set = set(tag_info[\"expected_items\"])\n        actual_set = set(tag_info[\"actual_items\"])\n        if tag_info[\"found\"] and expected_set != actual_set:\n            print(f\"  ✗ Tag distribution mismatch for '{tag_name}':\", file=sys.stderr)\n            print(f\"    Expected: {sorted(expected_set)}\", file=sys.stderr)\n            print(f\"    Actual: {sorted(actual_set)}\", file=sys.stderr)\n        elif tag_info[\"found\"]:\n            print(f\"  ✓ Tag distribution maintained for '{tag_name}'\")\n    \n    # Additional check: ensure no other pink elements exist\n    print(\"\\nChecking for any other pink elements...\")\n    other_pink_found = False\n    \n    # Check all callouts for pink\n    for block in all_blocks:\n        if block and block.get(\"type\") == \"callout\":\n            color = block.get(\"callout\", {}).get(\"color\", \"\")\n            if \"pink\" in color.lower():\n                callout_text = notion_utils.get_block_plain_text(block)[:50]\n                if \"Welcome to Toronto!\" not in callout_text:\n                    print(f\"✗ Found unexpected pink callout: {callout_text}...\", file=sys.stderr)\n                    other_pink_found = True\n    \n    if other_pink_found:\n        all_passed = False\n    else:\n        print(\"✓ No unexpected pink elements found\")\n    \n    return all_passed\n\ndef main():\n    \"\"\"\n    Executes the verification process and exits with a status code.\n    \"\"\"\n    notion = notion_utils.get_notion_client()\n    main_id = sys.argv[1] if len(sys.argv) > 1 else None\n    \n    if verify(notion, main_id):\n        print(\"\\nVerification passed: All expected pink colors have been changed\")\n        sys.exit(0)\n    else:\n        print(\"\\nVerification failed: Some pink colors still exist or elements are missing\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()"
}