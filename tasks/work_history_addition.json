{
  "task_id": "work_history_addition",
  "task_name": "Work History Addition",
  "category_id": "online_resume",
  "category_name": "Online Resume",
  "description": "Add a Research Assistant position to the Work History section with consistent formatting and university logo.",
  "author": "Xiangyan Liu",
  "created_at": "2025-07-27",
  "difficulty": "L3",
  "tags": [
    "database manipulation",
    "template population",
    "cross-reference linking",
    "visual formatting"
  ],
  "mcp": [
    "notion"
  ],
  "metadata": {
    "ori_template_url": "https://painted-tennis-ebc.notion.site/Online-Resume-23181626b6d781159faaeb5eadaf612e",
    "gt_page_url": "https://www.notion.so/Online-Resume-Work-History-Addition-2442b7e8cebd80fc8c8ae8896d640eb9"
  },
  "instruction": "Hi! I realized I forgot to include one work experience on my resume page titled \"Online Resume.\" Could you please help me add it to the \"Work History\" section?\n\nThe position is \"Research Assistant,\" and it took place from January to August 2023. The description should be: \"Assisted in conducting user experience research projects at my bachelor’s program, supporting data collection, analyzing user feedback, and preparing research reports. Developed strong skills in research methodologies and improved collaboration with interdisciplinary teams.\"\n\nFor the image or logo, please use the one from the \"Education\" section (my bachelor school) to keep everything consistent.\n\nAlso, please make sure that the formatting — including font style, size, and layout — matches the existing entries in the Work History section so it looks seamless.\n\nThank you!",
  "verify": "import sys\nfrom notion_client import Client\nfrom tasks.utils import notion_utils\n\n\ndef verify(notion: Client, main_id: str = None) -> bool:\n    \"\"\"\n    Verifies that the new work history entry for 'Research Assistant' has been added correctly.\n    \"\"\"\n    page_id = None\n    if main_id:\n        found_id, object_type = notion_utils.find_page_or_database_by_id(\n            notion, main_id\n        )\n        if found_id and object_type == \"page\":\n            page_id = found_id\n\n    if not page_id:\n        page_id = notion_utils.find_page(notion, \"Online Resume\")\n    if not page_id:\n        print(\"Error: Page 'Online Resume' not found.\", file=sys.stderr)\n        return False\n\n    all_blocks = notion_utils.get_all_blocks_recursively(notion, page_id)\n\n    def find_image_url_under_heading(blocks, heading_text, notion_client):\n        heading_index = -1\n        for i, block in enumerate(blocks):\n            block_type = block.get(\"type\")\n            if block_type == \"heading_1\":\n                if heading_text in notion_utils.get_block_plain_text(block):\n                    heading_index = i\n                    break\n\n        if heading_index == -1:\n            return None\n\n        for i in range(heading_index + 1, len(blocks)):\n            block = blocks[i]\n            if block.get(\"type\") in [\"heading_1\", \"heading_2\", \"heading_3\"]:\n                break\n            if block.get(\"type\") == \"image\" and block.get(\"image\", {}).get(\"file\"):\n                return block.get(\"image\", {}).get(\"file\", {}).get(\"url\")\n            if block.get(\"type\") == \"column_list\":\n                column_list_id = block[\"id\"]\n                columns = notion_utils.get_all_blocks_recursively(\n                    notion_client, column_list_id\n                )\n                for column in columns:\n                    if column.get(\"type\") == \"column\":\n                        column_id = column[\"id\"]\n                        column_blocks = notion_utils.get_all_blocks_recursively(\n                            notion_client, column_id\n                        )\n                        for inner_block in column_blocks:\n                            if inner_block.get(\"type\") == \"image\" and inner_block.get(\n                                \"image\", {}\n                            ).get(\"file\"):\n                                return (\n                                    inner_block.get(\"image\", {})\n                                    .get(\"file\", {})\n                                    .get(\"url\")\n                                )\n        return None\n\n    def get_block_annotations(block):\n        block_type = block.get(\"type\")\n        if not block_type:\n            return {}\n        block_content = block.get(block_type)\n        if not block_content:\n            return {}\n        rich_text_list = block_content.get(\"rich_text\", [])\n        if not rich_text_list:\n            return {}\n        return rich_text_list[0].get(\"annotations\", {})\n\n    education_image_url = find_image_url_under_heading(all_blocks, \"Education\", notion)\n    if not education_image_url:\n        print(\n            \"Error: Could not find the image in the 'Education' section.\",\n            file=sys.stderr,\n        )\n        return False\n\n    heading_text = \"Work History\"\n    heading_index = -1\n    for i, block in enumerate(all_blocks):\n        if block.get(\n            \"type\"\n        ) == \"heading_1\" and heading_text in notion_utils.get_block_plain_text(block):\n            heading_index = i\n            break\n\n    if heading_index == -1:\n        print(f\"Error: Could not find the '{heading_text}' heading.\", file=sys.stderr)\n        return False\n\n    for i in range(heading_index + 1, len(all_blocks)):\n        block = all_blocks[i]\n        if block.get(\"type\") in [\"heading_1\", \"heading_2\", \"heading_3\"]:\n            break\n\n        if block.get(\"type\") == \"column_list\":\n            column_list_id = block[\"id\"]\n            columns = notion_utils.get_all_blocks_recursively(notion, column_list_id)\n            if len(columns) < 2:\n                continue\n\n            for column in columns:\n                if column.get(\"type\") == \"column\":\n                    if column.get(\"column\", {}).get(\"width_ratio\") == 0.125:\n                        image_column = column\n                    elif column.get(\"column\", {}).get(\"width_ratio\") == 0.875:\n                        text_column = column\n\n            image_column_blocks = notion_utils.get_all_blocks_recursively(\n                notion, image_column[\"id\"]\n            )\n            text_column_blocks = notion_utils.get_all_blocks_recursively(\n                notion, text_column[\"id\"]\n            )\n\n            column_image_url = None\n            for inner_block in image_column_blocks:\n                if inner_block.get(\"type\") == \"image\" and inner_block.get(\n                    \"image\", {}\n                ).get(\"file\"):\n                    column_image_url = (\n                        inner_block.get(\"image\", {}).get(\"file\", {}).get(\"url\")\n                    )\n                    break\n\n            if (\n                not column_image_url\n                or column_image_url[:100] != education_image_url[:100]\n            ):\n                continue\n\n            for j, inner_block in enumerate(text_column_blocks):\n                if \"Research Assistant\" in notion_utils.get_block_plain_text(\n                    inner_block\n                ):\n                    title_annotations = get_block_annotations(inner_block)\n                    if j + 2 < len(text_column_blocks):\n                        date_block = text_column_blocks[j + 1]\n                        description_block = text_column_blocks[j + 2]\n\n                        date_text = \"January - August 2023\"\n                        description_text = \"Assisted in conducting user experience research projects at my bachelor’s program, supporting data collection, analyzing user feedback, and preparing research reports. Developed strong skills in research methodologies and improved collaboration with interdisciplinary teams.\"\n\n                        date_annotations = get_block_annotations(date_block)\n                        description_annotations = get_block_annotations(\n                            description_block\n                        )\n\n                        if (\n                            date_text in notion_utils.get_block_plain_text(date_block)\n                            and description_text\n                            in notion_utils.get_block_plain_text(description_block)\n                            and title_annotations.get(\"bold\")\n                            and date_annotations.get(\"italic\")\n                            and date_annotations.get(\"color\") == \"gray\"\n                            and description_annotations.get(\"color\") == \"default\"\n                            and description_annotations.get(\"italic\") != True\n                            and description_annotations.get(\"bold\") != True\n                        ):\n                            print(\"Success: Verified new work history entry.\")\n                            return True\n\n    print(\"Failure: Could not verify the new work history entry.\", file=sys.stderr)\n    return False\n\n\ndef main():\n    \"\"\"\n    Executes the verification process and exits with a status code.\n    \"\"\"\n    notion = notion_utils.get_notion_client()\n    main_id = sys.argv[1] if len(sys.argv) > 1 else None\n    if verify(notion, main_id):\n        sys.exit(0)\n    else:\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()\n"
}