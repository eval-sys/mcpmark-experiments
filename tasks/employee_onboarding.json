{
  "task_id": "employee_onboarding",
  "task_name": "Employee Onboarding",
  "category_id": "company_in_a_box",
  "category_name": "Company In A Box",
  "description": "Build an integrated Employee Onboarding system for the existing Company In A Box page with a checklist database, onboarding hub, and feedback form.",
  "author": "Zijian Wu",
  "created_at": "2025-07-27",
  "difficulty": "L3",
  "tags": [
    "database manipulation",
    "template population",
    "cross-reference linking",
    "status tracking"
  ],
  "mcp": [
    "notion"
  ],
  "metadata": {
    "ori_template_url": "https://painted-tennis-ebc.notion.site/Company-In-A-Box-23d81626b6d7800098f3d0e64a706cd8",
    "gt_page_url": "https://www.notion.so/Company-In-A-Box-Employee-Onboarding-2442b7e8cebd81dc9a58f2cfbbfbfdd0"
  },
  "instruction": "Build an integrated **Employee Onboarding** system for the existing **Company In A Box** page.\n\n**Task Requirements:**\n1. Create a new **database** titled **Employee Onboarding Checklist** with the following properties *exactly*:\n   • **Employee Name** – title  \n   • **Start Date** – date  \n   • **Department** – select (options: Product, Marketing, Sales, HR, Engineering)  \n\n   Populate this database with **3** sample new-hire pages covering three different departments. Every property in each entry must be filled.\n\n2. Under the top-level page **Company In A Box**, create a new child page titled **Onboarding Hub** containing, in order:\n   1) The **Employee Onboarding Checklist** database embedded at the top.  \n   2) A section headed **Benefits Overview** that includes linked mentions (@-mentions or link-to-page blocks) to **≥ 3** distinct benefit-policy pages from the **Company Wiki** (for example *Benefits policy*, *Vacation Policy*, *Corporate travel*).  \n   3) A section headed **30-Day Timeline** that presents a numbered list with **7** steps covering the first 30 days. **Each step must reference (via @-mention) an existing page or database**.  \n   4) A section headed **Feedback Form** that provides **≥ 3** to-do items for new hires to check off.",
  "verify": "import sys\nfrom typing import Dict, Set\nfrom notion_client import Client\nfrom tasks.utils import notion_utils\n\n\ndef _check_db_schema(db_props: Dict[str, Dict], required: Dict[str, str]) -> bool:\n    \"\"\"Return True if every required property exists with the correct type.\"\"\"\n    for prop_name, expected_type in required.items():\n        if prop_name not in db_props:\n            print(\n                f\"Error: Property '{prop_name}' missing from database.\", file=sys.stderr\n            )\n            return False\n        actual_type = db_props[prop_name][\"type\"]\n        if actual_type != expected_type:\n            print(\n                f\"Error: Property '{prop_name}' has type '{actual_type}', expected '{expected_type}'.\",\n                file=sys.stderr,\n            )\n            return False\n    return True\n\n\ndef verify(notion: Client, main_id: str | None = None) -> bool:  # noqa: C901\n    \"\"\"Programmatically verify the onboarding system described in description.md.\"\"\"\n\n    DB_TITLE = \"Employee Onboarding Checklist\"\n    HUB_PAGE_TITLE = \"Onboarding Hub\"\n    DEPARTMENT_OPTIONS: Set[str] = {\n        \"Product\",\n        \"Marketing\",\n        \"Sales\",\n        \"HR\",\n        \"Engineering\",\n    }\n    REQUIRED_DB_PROPERTIES = {\n        \"Employee Name\": \"title\",\n        \"Start Date\": \"date\",\n        \"Department\": \"select\",\n    }\n\n    # 1. Locate onboarding database\n    db_id = notion_utils.find_database(notion, DB_TITLE)\n    if not db_id:\n        print(f\"Error: Database '{DB_TITLE}' not found.\", file=sys.stderr)\n        return False\n\n    try:\n        db_obj = notion.databases.retrieve(database_id=db_id)\n    except Exception as exc:\n        print(f\"Error retrieving database: {exc}\", file=sys.stderr)\n        return False\n\n    db_props = db_obj.get(\"properties\", {})\n    if not _check_db_schema(db_props, REQUIRED_DB_PROPERTIES):\n        return False\n\n    # Extra: validate select options\n    dept_options = {opt[\"name\"] for opt in db_props[\"Department\"][\"select\"][\"options\"]}\n    if not DEPARTMENT_OPTIONS.issubset(dept_options):\n        print(\n            f\"Error: Department select options must include {sorted(DEPARTMENT_OPTIONS)}. Current: {sorted(dept_options)}\",\n            file=sys.stderr,\n        )\n        return False\n\n    # Check there are at least 3 entries in the database\n    try:\n        db_pages = notion.databases.query(database_id=db_id).get(\"results\", [])\n    except Exception as exc:\n        print(f\"Error querying database: {exc}\", file=sys.stderr)\n        return False\n    if len(db_pages) < 3:\n        print(\n            \"Error: Less than 3 onboarding entries found in the database.\",\n            file=sys.stderr,\n        )\n        return False\n\n    # 2. Locate Onboarding Hub page\n    hub_page_id = notion_utils.find_page(notion, HUB_PAGE_TITLE)\n    if not hub_page_id:\n        print(f\"Error: Page '{HUB_PAGE_TITLE}' not found.\", file=sys.stderr)\n        return False\n\n    # 3. Ensure the onboarding database is embedded in the hub page\n    embedded_db_id = notion_utils.find_database_in_block(notion, hub_page_id, DB_TITLE)\n    if embedded_db_id != db_id:\n        print(\n            \"Error: The Employee Onboarding Checklist database is not embedded in the Onboarding Hub page.\",\n            file=sys.stderr,\n        )\n        return False\n\n    # 4. Analyse blocks within the hub page for linked mentions, timeline, and feedback form\n    all_blocks = notion_utils.get_all_blocks_recursively(notion, hub_page_id)\n\n    seen_link_targets: Set[str] = set()\n    numbered_list_count = 0\n    todo_count = 0\n\n    for blk in all_blocks:\n        blk_type = blk.get(\"type\")\n\n        # Direct link-to-page blocks\n        if blk_type == \"link_to_page\":\n            info = blk.get(\"link_to_page\", {})\n            target_id = info.get(\"page_id\") or info.get(\"database_id\")\n            if target_id:\n                seen_link_targets.add(target_id)\n            continue\n\n        # Rich-text mentions inside content blocks\n        if blk_type in {\n            \"paragraph\",\n            \"numbered_list_item\",\n            \"bulleted_list_item\",\n            \"to_do\",\n        }:\n            content = blk.get(blk_type, {})\n            for rt in content.get(\"rich_text\", []):\n                if rt.get(\"type\") == \"mention\":\n                    mention = rt.get(\"mention\", {})\n                    if mention.get(\"type\") in {\"page\", \"database\"}:\n                        target_id = mention.get(\"page\", {}).get(\"id\") or mention.get(\n                            \"database\", {}\n                        ).get(\"id\")\n                        if target_id:\n                            seen_link_targets.add(target_id)\n\n        # Count numbered list items\n        if blk_type == \"numbered_list_item\":\n            numbered_list_count += 1\n\n        # Count to-do items in Feedback Form\n        if blk_type == \"to_do\":\n            todo_count += 1\n\n    if len(seen_link_targets) < 3:\n        print(\n            \"Error: Fewer than 3 linked mentions to benefit policy pages found in the Benefits Overview section.\",\n            file=sys.stderr,\n        )\n        return False\n\n    if numbered_list_count < 7:\n        print(\n            \"Error: Numbered list contains fewer than 7 steps in the 30-Day Timeline section.\",\n            file=sys.stderr,\n        )\n        return False\n\n    if todo_count < 3:\n        print(\n            \"Error: Feedback Form section contains fewer than 3 to-do items.\",\n            file=sys.stderr,\n        )\n        return False\n\n    print(\n        \"Success: Verified Employee Onboarding Checklist database, Onboarding Hub page, and all required sections.\"\n    )\n    return True\n\n\ndef main():\n    notion = notion_utils.get_notion_client()\n    main_id = sys.argv[1] if len(sys.argv) > 1 else None\n    if verify(notion, main_id):\n        sys.exit(0)\n    else:\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()\n"
}