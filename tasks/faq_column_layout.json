{
  "task_id": "faq_column_layout",
  "task_name": "FAQ Column Layout",
  "category_id": "self_assessment",
  "category_name": "Self Assessment",
  "description": "Reorganize the FAQ section content into a two-column layout with balanced Q&A pairs.",
  "author": "Xiangyan Liu",
  "created_at": "2025-07-27",
  "difficulty": "L3",
  "tags": [
    "content organization",
    "visual formatting",
    "template population"
  ],
  "mcp": [
    "notion"
  ],
  "metadata": {
    "ori_template_url": "https://painted-tennis-ebc.notion.site/Self-Assessment-24381626b6d780fe9f56c2ba14ea042d",
    "gt_page_url": "https://www.notion.so/Self-Assessment-Faq-Column-Layout-2442b7e8cebd809cb68dc654d8db31fb"
  },
  "instruction": "Navigate to the \"Self Assessment\" page and reorganize the content under the FAQ toggle as follows:\n\n**Task Requirements:**\n1. Add a column list with two columns inside the FAQ toggle\n2. Move the first two existing Q&A pairs from the FAQ to the left column\n3. Move the third existing Q&A pair to the right column\n4. Add one additional Q&A pair in the right column to match the format, so both columns have exactly 2 Q&A pairs\n5. Ensure all Q&A pairs maintain consistent formatting (heading_3 for questions, paragraph for answers)",
  "verify": "import sys\nfrom notion_client import Client\nfrom tasks.utils import notion_utils\n\n\ndef verify(notion: Client, main_id: str = None) -> bool:\n    \"\"\"\n    Verifies that the FAQ toggle has been properly reorganized with a column list.\n    \"\"\"\n    # Start from main_id if provided\n    page_id = None\n    if main_id:\n        found_id, object_type = notion_utils.find_page_or_database_by_id(\n            notion, main_id\n        )\n        if found_id and object_type == \"page\":\n            page_id = found_id\n\n    if not page_id:\n        # Try to find the Self Assessment page\n        page_id = notion_utils.find_page(notion, \"Self Assessment\")\n\n    if not page_id:\n        print(\"Error: Self Assessment page not found.\", file=sys.stderr)\n        return False\n\n    # Get all blocks recursively from the page\n    all_blocks = notion_utils.get_all_blocks_recursively(notion, page_id)\n\n    # Find the FAQ toggle block\n    faq_toggle_block = None\n    faq_toggle_id = None\n    for block in all_blocks:\n        if block.get(\"type\") == \"toggle\":\n            block_text = notion_utils.get_block_plain_text(block)\n            if \"FAQ\" in block_text:\n                faq_toggle_block = block\n                faq_toggle_id = block.get(\"id\")\n                print(f\"Found FAQ toggle block: {block_text}\")\n                break\n\n    if not faq_toggle_block:\n        print(\"Error: FAQ toggle block not found.\", file=sys.stderr)\n        return False\n\n    # Find column_list inside the FAQ toggle\n    column_list_block = None\n    for block in all_blocks:\n        if (\n            block.get(\"type\") == \"column_list\"\n            and block.get(\"parent\", {}).get(\"block_id\") == faq_toggle_id\n        ):\n            column_list_block = block\n            break\n\n    if not column_list_block:\n        print(\"Error: No column_list found inside FAQ toggle.\", file=sys.stderr)\n        return False\n\n    # Check that there are no Q&A pairs directly under FAQ toggle (outside column_list)\n    direct_faq_children = []\n    for block in all_blocks:\n        if block.get(\"parent\", {}).get(\"block_id\") == faq_toggle_id and block.get(\n            \"id\"\n        ) != column_list_block.get(\"id\"):\n            direct_faq_children.append(block)\n\n    # Check if any of these are heading_3 or paragraph blocks (Q&A content)\n    for block in direct_faq_children:\n        if block.get(\"type\") in [\"heading_3\", \"paragraph\"]:\n            print(\n                f\"Error: Found Q&A content outside column_list: {notion_utils.get_block_plain_text(block)[:50]}...\",\n                file=sys.stderr,\n            )\n            return False\n\n    # Find the two columns\n    columns = []\n    column_list_id = column_list_block.get(\"id\")\n    for block in all_blocks:\n        if (\n            block.get(\"type\") == \"column\"\n            and block.get(\"parent\", {}).get(\"block_id\") == column_list_id\n        ):\n            columns.append(block)\n\n    if len(columns) != 2:\n        print(f\"Error: Expected 2 columns, found {len(columns)}.\", file=sys.stderr)\n        return False\n\n    # Check each column has exactly 2 Q&A pairs\n    for i, column in enumerate(columns):\n        column_id = column.get(\"id\")\n\n        # Find blocks inside this column\n        column_blocks = []\n        for block in all_blocks:\n            if block.get(\"parent\", {}).get(\"block_id\") == column_id:\n                column_blocks.append(block)\n\n        # Count Q&A pairs (should be heading_3 followed by paragraph)\n        qa_pairs = 0\n        j = 0\n        while j < len(column_blocks):\n            if (\n                column_blocks[j].get(\"type\") == \"heading_3\"\n                and j + 1 < len(column_blocks)\n                and column_blocks[j + 1].get(\"type\") == \"paragraph\"\n            ):\n                qa_pairs += 1\n                j += 2  # Skip both question and answer\n            else:\n                j += 1\n\n        if qa_pairs != 2:\n            print(\n                f\"Error: Column {i + 1} has {qa_pairs} Q&A pairs, expected 2.\",\n                file=sys.stderr,\n            )\n            return False\n\n        print(f\"Column {i + 1}: Found {qa_pairs} Q&A pairs âœ“\")\n\n    print(\n        \"Success: FAQ toggle properly organized with 2 columns, each containing 2 Q&A pairs.\"\n    )\n    return True\n\n\ndef main():\n    \"\"\"\n    Executes the verification process and exits with a status code.\n    \"\"\"\n    notion = notion_utils.get_notion_client()\n    main_id = sys.argv[1] if len(sys.argv) > 1 else None\n    if verify(notion, main_id):\n        sys.exit(0)\n    else:\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()\n",
  "model_results": {
    "k2": 0,
    "gpt-5": 0,
    "grok-4": 0,
    "gpt-4-1": 0,
    "gemini-2-5-flash": 0,
    "gemini-2-5-pro": 0,
    "gpt-5-mini": 0,
    "deepseek-chat": 0,
    "gpt-4-1-mini": 0,
    "claude-4-sonnet": 0,
    "gpt-5-nano": 0,
    "o3": 0
  }
}