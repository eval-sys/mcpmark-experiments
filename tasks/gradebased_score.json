{
  "task_id": "gradebased_score",
  "task_name": "Gradebased Score",
  "category_id": "student_database",
  "category_name": "Student Database",
  "description": "Process student numerical scores to calculate letter grades using A-F scale and produce comprehensive grade distribution analysis reports.",
  "author": "Lingjun Chen",
  "created_at": "2025-08-10",
  "difficulty": "L3",
  "tags": [
    "data extraction",
    "content transformation",
    "pattern analysis"
  ],
  "mcp": [
    "filesystem"
  ],
  "metadata": {},
  "instruction": "### Simple Grade Calculation\n\n1. Read Student Data:\n\n* Process all student basic_info.txt files from the database\n* Extract scores for Chinese, Math, and English subjects\n\n2. Calculate Basic Grades:\n\n* Use simple grade scale: A (90+), B (80-89), C (70-79), D (60-69), F (<60)\n* Apply this same scale to all subjects\n\n### Generate Output Files\n\n1. Create student_grades.csv:\n\n* Columns: student_id, name, chinese_score, chinese_grade, math_score, math_grade, english_score, english_grade\n* Must contain exactly each students\n* Each students one row\n\n2. Create grade_summary.txt:\n\n* Total number of students processed\n* Number of A's, B's, C's, D's, and F's for each subject\n* Simple count of students with passing grades (A, B, C) vs failing grades (D, F) for each subjects\n",
  "verify": "#!/usr/bin/env python3\n\"\"\"\nVerification script for Student Database Grade-Based Score Analysis Task\n\"\"\"\n\nimport sys\nfrom pathlib import Path\nimport os\nimport re\n\ndef get_test_directory() -> Path:\n    \"\"\"Get the test directory from FILESYSTEM_TEST_DIR env var.\"\"\"\n    test_root = os.environ.get(\"FILESYSTEM_TEST_DIR\")\n    if not test_root:\n        raise ValueError(\"FILESYSTEM_TEST_DIR environment variable is required\")\n    return Path(test_root)\n\ndef verify_grade_summary_exists(test_dir: Path) -> bool:\n    \"\"\"Verify that grade_summary.txt file exists.\"\"\"\n    grade_summary_file = test_dir / \"grade_summary.txt\"\n    \n    if not grade_summary_file.exists():\n        print(\"‚ùå File 'grade_summary.txt' not found\")\n        return False\n    \n    print(\"‚úÖ grade_summary.txt file found\")\n    return True\n\ndef verify_grade_summary_readable(test_dir: Path) -> bool:\n    \"\"\"Verify that the grade_summary.txt file is readable.\"\"\"\n    grade_summary_file = test_dir / \"grade_summary.txt\"\n    \n    try:\n        content = grade_summary_file.read_text()\n        if not content.strip():\n            print(\"‚ùå grade_summary.txt file is empty\")\n            return False\n        \n        print(\"‚úÖ grade_summary.txt file is readable\")\n        return True\n        \n    except Exception as e:\n        print(f\"‚ùå Error reading grade_summary.txt file: {e}\")\n        return False\n\ndef extract_numbers_from_text(text: str) -> list:\n    \"\"\"Extract all numbers from text.\"\"\"\n    numbers = re.findall(r'\\d+', text)\n    return [int(num) for num in numbers]\n\ndef verify_three_subjects_present(test_dir: Path) -> bool:\n    \"\"\"Verify that grade_summary.txt contains all three subjects (case insensitive).\"\"\"\n    grade_summary_file = test_dir / \"grade_summary.txt\"\n    \n    try:\n        content = grade_summary_file.read_text()\n        \n        # Check if all three subjects are mentioned (case insensitive)\n        subjects = [\"chinese\", \"math\", \"english\"]\n        missing_subjects = []\n        \n        for subject in subjects:\n            if subject.lower() not in content.lower():\n                missing_subjects.append(subject)\n        \n        if missing_subjects:\n            print(f\"‚ùå Missing subjects in grade_summary.txt: {missing_subjects}\")\n            return False\n        \n        print(\"‚úÖ All three subjects (Chinese, Math, English) found in grade_summary.txt\")\n        return True\n        \n    except Exception as e:\n        print(f\"‚ùå Error checking subjects: {e}\")\n        return False\n\ndef verify_grade_summary_content(test_dir: Path) -> bool:\n    \"\"\"Verify that grade_summary.txt contains the correct statistics from answer.md.\"\"\"\n    grade_summary_file = test_dir / \"grade_summary.txt\"\n    \n    try:\n        content = grade_summary_file.read_text()\n        \n        # Extract all numbers from the content\n        found_numbers = extract_numbers_from_text(content)\n        \n        if not found_numbers:\n            print(\"‚ùå No numbers found in grade_summary.txt\")\n            return False\n        \n        # Expected numbers from answer.md\n        # Format: [total_students, chinese_A, chinese_B, chinese_C, chinese_D, chinese_pass, chinese_fail,\n        #          math_A, math_B, math_C, math_D, math_pass, math_fail,\n        #          english_A, english_B, english_C, english_D, english_F, english_pass, english_fail]\n        expected_numbers = [\n            # Total students\n            150,\n            # Chinese grades: A(42), B(37), C(43), D(28), Pass(122), Fail(28)\n            42, 37, 43, 28, 122, 28,\n            # Math grades: A(31), B(38), C(47), D(34), Pass(116), Fail(34)  \n            31, 38, 47, 34, 116, 34,\n            # English grades: A(32), B(38), C(38), D(41), F(1), Pass(108), Fail(42)\n            32, 38, 38, 41, 1, 108, 42\n        ]\n        \n        # Check if all expected numbers are present in the found numbers\n        missing_numbers = []\n        for expected in expected_numbers:\n            if expected not in found_numbers:\n                missing_numbers.append(expected)\n        \n        if missing_numbers:\n            print(f\"‚ùå Missing expected numbers: {missing_numbers}\")\n            print(f\"   Found numbers: {found_numbers}\")\n            return False\n        \n        # Check if the counts match (each number should appear the expected number of times)\n        for expected in expected_numbers:\n            expected_count = expected_numbers.count(expected)\n            found_count = found_numbers.count(expected)\n            if found_count < expected_count:\n                print(f\"‚ùå Number {expected} appears {found_count} times, expected {expected_count} times\")\n                return False\n        \n        print(\"‚úÖ All expected grade statistics found in grade_summary.txt\")\n        return True\n        \n    except Exception as e:\n        print(f\"‚ùå Error verifying grade summary content: {e}\")\n        return False\n\ndef main():\n    \"\"\"Main verification function.\"\"\"\n    try:\n        test_dir = get_test_directory()\n        print(f\"üîç Verifying Student Database Grade-Based Score Analysis in: {test_dir}\")\n        \n        # Define verification steps\n        verification_steps = [\n            (\"Grade Summary File Exists\", verify_grade_summary_exists),\n            (\"File is Readable\", verify_grade_summary_readable),\n            (\"Three Subjects Present\", verify_three_subjects_present),\n            (\"Grade Statistics Content\", verify_grade_summary_content),\n        ]\n        \n        # Run all verification steps\n        all_passed = True\n        for step_name, verify_func in verification_steps:\n            print(f\"\\n--- {step_name} ---\")\n            if not verify_func(test_dir):\n                all_passed = False\n        \n        # Final result\n        print(\"\\n\" + \"=\"*50)\n        if all_passed:\n            print(\"‚úÖ Student grade analysis completed correctly!\")\n            print(\"üéâ Grade-Based Score Analysis verification: PASS\")\n            sys.exit(0)\n        else:\n            print(\"‚ùå Grade-Based Score Analysis verification: FAIL\")\n            sys.exit(1)\n            \n    except Exception as e:\n        print(f\"‚ùå Verification failed with error: {e}\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()",
  "model_results": {
    "gemini-2-5-pro": 0,
    "deepseek-chat": 0,
    "qwen-3-coder": 0,
    "o3": 0,
    "gpt-5": 0,
    "k2": 0,
    "claude-4-sonnet": 0
  }
}