{
  "task_id": "remove_osaka_itinerary",
  "task_name": "Remove Osaka Itinerary",
  "category_id": "japan_travel_planner",
  "category_name": "Japan Travel Planner",
  "description": "Remove the itinerary items in Osaka after 6 PM from Day 1 and Day 2 travel schedules.",
  "author": "Xiangyan Liu",
  "created_at": "2025-07-27",
  "difficulty": "L3",
  "tags": [
    "conditional filtering",
    "automated migration"
  ],
  "mcp": [
    "notion"
  ],
  "meta_data": {
    "stateType": "url",
    "stateContent": null,
    "stateUrl": "https://painted-tennis-ebc.notion.site/Japan-Travel-Planner-23181626b6d781c4b6bedb12786b5abe",
    "stateOriginalUrl": "https://www.notion.so/marketplace/templates/japantravelplanner101"
  },
  "instruction": "Go to Japan Travel Planner and remove the itinerary in OSAKA after 6 PM (excluding 6 PM) in Day 1 and Day 2.",
  "verify": "import sys\nfrom notion_client import Client\nfrom tasks.utils import notion_utils\n\ndef get_page_title(page_result):\n    \"\"\"Extract title from a page result\"\"\"\n    properties = page_result.get('properties', {})\n    name_property = properties.get('Name', {})\n    if name_property.get('type') == 'title':\n        title_array = name_property.get('title', [])\n        if title_array and len(title_array) > 0:\n            return title_array[0].get('plain_text', '')\n    return ''\n\ndef get_page_time(page_result):\n    \"\"\"Extract time from Notes field\"\"\"\n    properties = page_result.get('properties', {})\n    notes_property = properties.get('Notes', {})\n    if notes_property.get('type') == 'rich_text':\n        rich_text_array = notes_property.get('rich_text', [])\n        if rich_text_array and len(rich_text_array) > 0:\n            notes_text = rich_text_array[0].get('plain_text', '')\n            return notes_text.strip()\n    return ''\n\ndef get_page_group(page_result):\n    \"\"\"Extract group/location from page\"\"\"\n    properties = page_result.get('properties', {})\n    group_property = properties.get('Group', {})\n    if group_property.get('type') == 'select':\n        select = group_property.get('select')\n        if select:\n            return select.get('name', '')\n    return ''\n\ndef get_page_day(page_result):\n    \"\"\"Extract day from page\"\"\"\n    properties = page_result.get('properties', {})\n    day_property = properties.get('Day', {})\n    if day_property.get('type') == 'select':\n        select = day_property.get('select')\n        if select:\n            return select.get('name', '')\n    return ''\n\ndef parse_time_to_minutes(time_str):\n    \"\"\"Convert time string to minutes for comparison\n    Returns None if time cannot be parsed\"\"\"\n    if not time_str:\n        return None\n    \n    # Clean the time string\n    time_str = time_str.strip().upper()\n    \n    # Remove any text after the time (e.g., \"7:30 PM\\n\" -> \"7:30 PM\")\n    time_str = time_str.split('\\n')[0].strip()\n    \n    # Extract time components\n    try:\n        if 'PM' in time_str:\n            time_part = time_str.replace('PM', '').strip()\n            if ':' in time_part:\n                hours, minutes = time_part.split(':')\n                hours = int(hours)\n                minutes = int(minutes)\n            else:\n                hours = int(time_part)\n                minutes = 0\n            # Convert PM hours (add 12 for PM times except 12 PM)\n            if hours != 12:\n                hours += 12\n            return hours * 60 + minutes\n        elif 'AM' in time_str:\n            time_part = time_str.replace('AM', '').strip()\n            if ':' in time_part:\n                hours, minutes = time_part.split(':')\n                hours = int(hours)\n                minutes = int(minutes)\n            else:\n                hours = int(time_part)\n                minutes = 0\n            # Handle 12 AM (midnight)\n            if hours == 12:\n                hours = 0\n            return hours * 60 + minutes\n    except:\n        return None\n    \n    return None\n\ndef verify(notion: Client, main_id: str = None) -> bool:\n    \"\"\"\n    Verifies that all OSAKA events after 6PM have been removed from Day 1 and Day 2 in the Japan Travel Planner.\n    \n    Expected items that should be deleted (all in OSAKA, after 6PM, on Day 1 or Day 2):\n    1. Rikuro's Namba Main Branch - 7 PM (Day 1)\n    2. Shin Sekai \"New World\" - 8 PM (Day 2)\n    3. Katsudon Chiyomatsu - 7:30 PM (Day 2)\n    4. Ebisubashi Bridge - 9 PM (Day 1)\n    \n    Note: Kuromon Ichiba Market at 6 PM should NOT be deleted (it's at 6PM, not after)\n    Items after 6PM on other days (Day 3-8) should NOT be deleted\n    \"\"\"\n    \n    # Step 1: Find the main Japan Travel Planner page\n    if main_id:\n        found_id, object_type = notion_utils.find_page_or_database_by_id(notion, main_id)\n        if not found_id or object_type != 'page':\n            print(\"Error: Japan Travel Planner page not found.\", file=sys.stderr)\n            return False\n    else:\n        # Try to find the page by searching\n        found_id = notion_utils.find_page(notion, \"Japan Travel Planner\")\n        if not found_id:\n            print(\"Error: Japan Travel Planner page not found.\", file=sys.stderr)\n            return False\n    \n    print(f\"Found Japan Travel Planner page: {found_id}\")\n    \n    # Step 2: Find the Travel Itinerary database\n    all_blocks = notion_utils.get_all_blocks_recursively(notion, found_id)\n    travel_itinerary_db_id = None\n    \n    for block in all_blocks:\n        if block and block.get(\"type\") == \"child_database\":\n            title = block.get(\"child_database\", {}).get(\"title\", \"\")\n            if \"Travel Itinerary\" in title:\n                travel_itinerary_db_id = block.get(\"id\")\n                print(f\"Found Travel Itinerary database: {travel_itinerary_db_id}\")\n                break\n    \n    if not travel_itinerary_db_id:\n        print(\"Error: Travel Itinerary database not found\", file=sys.stderr)\n        return False\n    \n    # Step 3: Query the database for OSAKA items on Day 1 and Day 2\n    try:\n        query_result = notion.databases.query(\n            database_id=travel_itinerary_db_id,\n            filter={\n                \"and\": [\n                    {\"property\": \"Group\", \"select\": {\"equals\": \"Osaka\"}},\n                    {\"or\": [\n                        {\"property\": \"Day\", \"select\": {\"equals\": \"Day 1\"}},\n                        {\"property\": \"Day\", \"select\": {\"equals\": \"Day 2\"}}\n                    ]}\n                ]\n            }\n        )\n    except Exception as e:\n        print(f\"Error querying Travel Itinerary database: {e}\", file=sys.stderr)\n        return False\n    \n    # Step 4: Check for items that should have been deleted\n    six_pm_minutes = 18 * 60  # 6 PM in minutes (18:00)\n    \n    # Expected deleted items (4 specific items after 6 PM on Day 1 and Day 2)\n    expected_deleted = {\n        \"Rikuro's Namba Main Branch\": {\"time\": \"7 PM\", \"day\": \"Day 1\", \"found\": False},\n        \"Shin Sekai \\\"New World\\\"\": {\"time\": \"8 PM\", \"day\": \"Day 2\", \"found\": False},\n        \"Katsudon Chiyomatsu\": {\"time\": \"7:30 PM\", \"day\": \"Day 2\", \"found\": False},\n        \"Ebisubashi Bridge\": {\"time\": \"9 PM\", \"day\": \"Day 1\", \"found\": False}\n    }\n    \n    # Items that should remain (at or before 6 PM)\n    expected_remaining = {\n        \"Kuromon Ichiba Market\": {\"time\": \"6 PM\", \"found\": False}\n    }\n    \n    osaka_items_after_6pm = []\n    osaka_items_at_or_before_6pm = []\n    \n    # Debug: Show total query results\n    print(f\"Debug: Found {len(query_result.get('results', []))} total OSAKA items on Day 1 and Day 2\")\n    \n    # Process all OSAKA items on Day 1 and Day 2\n    for page in query_result.get('results', []):\n        page_title = get_page_title(page).strip()\n        page_time = get_page_time(page)\n        page_group = get_page_group(page)\n        page_day = get_page_day(page)\n        \n        if page_group != \"Osaka\":\n            continue\n        \n        # Parse time to check if after 6 PM\n        time_minutes = parse_time_to_minutes(page_time)\n        \n        if time_minutes is not None and time_minutes > six_pm_minutes:\n            osaka_items_after_6pm.append({\n                \"title\": page_title,\n                \"time\": page_time,\n                \"day\": page_day,\n                \"id\": page.get('id')\n            })\n            \n            # Check if this is one of the expected deleted items\n            for expected_title, expected_info in expected_deleted.items():\n                # Clean up the titles for comparison\n                clean_page_title = page_title.strip().lower()\n                clean_expected_title = expected_title.strip().lower()\n                \n                # Check for \"Rikuro's\" or \"Rikuro's\" (different apostrophe types)\n                if \"rikuro\" in clean_page_title and \"rikuro\" in clean_expected_title:\n                    title_match = True\n                elif clean_page_title == clean_expected_title:\n                    title_match = True\n                elif clean_expected_title in clean_page_title or clean_page_title in clean_expected_title:\n                    title_match = True\n                else:\n                    title_match = False\n                    \n                if title_match and page_day == expected_info[\"day\"]:\n                    print(f\"Debug: Found '{page_title}' on {page_day} at {page_time} - matches expected '{expected_title}'\")\n                    expected_deleted[expected_title][\"found\"] = True\n                \n        elif time_minutes is not None and time_minutes <= six_pm_minutes:\n            osaka_items_at_or_before_6pm.append({\n                \"title\": page_title,\n                \"time\": page_time,\n                \"day\": page_day,\n                \"id\": page.get('id')\n            })\n            \n            # Check if this is one of the expected remaining items\n            for expected_title in expected_remaining:\n                if expected_title.lower() in page_title.lower() or page_title.lower() in expected_title.lower():\n                    expected_remaining[expected_title][\"found\"] = True\n    \n    # Step 5: Verify results\n    print(f\"\\nVerification Summary:\")\n    print(f\"=\" * 50)\n    \n    all_passed = True\n    \n    # Check that the 4 expected items after 6 PM have been deleted\n    print(\"\\n4 Items that should be deleted (after 6 PM on Day 1 and Day 2):\")\n    for item_name, item_info in expected_deleted.items():\n        if item_info[\"found\"]:\n            # If found = True, it means the item still exists (was not deleted)\n            print(f\"✗ {item_name} ({item_info['day']}, {item_info['time']}) - Still exists, should be deleted\", file=sys.stderr)\n            all_passed = False\n        else:\n            # If found = False, it means the item was deleted correctly\n            print(f\"✓ {item_name} ({item_info['day']}, {item_info['time']}) - Correctly deleted\")\n    \n    \n    # Check that items at or before 6 PM remain\n    print(\"\\nItems that should remain (at or before 6 PM on Day 1 and Day 2):\")\n    for item_name, item_info in expected_remaining.items():\n        if item_info[\"found\"]:\n            print(f\"✓ {item_name} ({item_info['time']}) - Correctly retained\")\n        else:\n            print(f\"✗ {item_name} ({item_info['time']}) - Missing, should not be deleted\", file=sys.stderr)\n            all_passed = False\n    \n    # Report any items after 6 PM that still exist\n    if osaka_items_after_6pm:\n        print(f\"\\n✗ Found {len(osaka_items_after_6pm)} OSAKA item(s) after 6 PM on Day 1/Day 2:\", file=sys.stderr)\n        for item in osaka_items_after_6pm:\n            print(f\"  - {item['title']} at {item['time']} ({item['day']})\", file=sys.stderr)\n    else:\n        print(f\"\\n✓ No OSAKA items found after 6 PM on Day 1/Day 2 (all correctly deleted)\")\n    \n    # Report count summary\n    print(f\"\\nCount Summary:\")\n    print(f\"- OSAKA items after 6 PM on Day 1/Day 2 found: {len(osaka_items_after_6pm)} (should be 0)\")\n    print(f\"- OSAKA items at/before 6 PM on Day 1/Day 2 found: {len(osaka_items_at_or_before_6pm)}\")\n    print(f\"- Expected deletions verified: {sum(1 for item in expected_deleted.values() if not item['found'])}/4\")\n    \n    return all_passed\n\ndef main():\n    \"\"\"\n    Executes the verification process and exits with a status code.\n    \"\"\"\n    notion = notion_utils.get_notion_client()\n    main_id = sys.argv[1] if len(sys.argv) > 1 else None\n    \n    if verify(notion, main_id):\n        print(\"\\nVerification passed: All 4 required OSAKA events after 6 PM on Day 1 and Day 2 have been removed\")\n        sys.exit(0)\n    else:\n        print(\"\\nVerification failed: Some OSAKA events after 6 PM on Day 1/Day 2 still exist\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()"
}