{
  "task_id": "customer_analytics_optimization",
  "task_name": "Customer Analytics Optimization",
  "category_id": "dvdrental",
  "category_name": "DVD Rental",
  "description": "Optimize slow customer analytics query with correlated subqueries causing timeout issues in reporting dashboard.",
  "author": "Lingxiao Du",
  "created_at": "2025-08-20",
  "difficulty": "L3",
  "tags": [
    "performance optimization"
  ],
  "mcp": [
    "postgres"
  ],
  "metadata": {},
  "instruction": "Optimize slow customer analytics query in the DVD rental database.\n\n## Background\n\nThe business intelligence team is running customer analytics reports, but one of their critical queries has become extremely slow. The query that used to run in milliseconds is now taking over a second to complete, causing timeout issues in their reporting dashboard.\n\n## Your Task\n\nAnalyze and optimize the performance of this customer analytics query:\n\n```sql\nSELECT \n    c.customer_id,\n    c.first_name,\n    c.last_name,\n    c.email,\n    COUNT(DISTINCT p.payment_id) as total_payments,\n    SUM(p.amount) as total_spent,\n    AVG(p.amount) as avg_payment,\n    COUNT(DISTINCT EXTRACT(month FROM p.payment_date)) as active_months,\n    MAX(p.payment_date) as last_payment,\n    MIN(p.payment_date) as first_payment,\n    (SELECT COUNT(*) FROM payment p2 WHERE p2.customer_id = c.customer_id AND p2.amount > 5.0) as high_value_payments,\n    (SELECT SUM(amount) FROM payment p3 WHERE p3.customer_id = c.customer_id AND p3.payment_date >= '2007-03-01') as recent_spending\nFROM customer c\nJOIN payment p ON c.customer_id = p.customer_id\nWHERE c.active = 1\nGROUP BY c.customer_id, c.first_name, c.last_name, c.email\nHAVING COUNT(p.payment_id) >= 10\nORDER BY total_spent DESC, total_payments DESC;\n```\n\nThe query is currently taking over 1000ms to execute and has a very high cost in the execution plan. The team needs this optimized urgently as it's blocking their daily reporting processes.\n\n## Requirements\n\n- Use `EXPLAIN ANALYZE` to identify performance bottlenecks\n- Implement appropriate database optimizations  \n- Ensure queries return accurate results after optimization\n- Document your optimization approach and performance improvements",
  "verify": "\"\"\"\nVerification script for PostgreSQL Task 1: Customer Payment Query Optimization\n\"\"\"\n\nimport os\nimport sys\nimport psycopg2\n\ndef get_connection_params() -> dict:\n    \"\"\"Get database connection parameters.\"\"\"\n    return {\n        \"host\": os.getenv(\"POSTGRES_HOST\", \"localhost\"),\n        \"port\": int(os.getenv(\"POSTGRES_PORT\", 5432)),\n        \"database\": os.getenv(\"POSTGRES_DATABASE\"),\n        \"user\": os.getenv(\"POSTGRES_USERNAME\"),\n        \"password\": os.getenv(\"POSTGRES_PASSWORD\")\n    }\n\ndef check_payment_customer_id_index(conn) -> bool:\n    \"\"\"Check if there's any index on payment.customer_id column.\"\"\"\n    with conn.cursor() as cur:\n        cur.execute(\"\"\"\n            SELECT indexname, indexdef \n            FROM pg_indexes \n            WHERE schemaname = 'public' \n            AND tablename = 'payment'\n            AND indexdef LIKE '%customer_id%'\n        \"\"\")\n        indexes = cur.fetchall()\n        print(indexes)\n        return len(indexes) > 0, indexes\n\ndef main():\n    \"\"\"Main verification function.\"\"\"\n    print(\"=\" * 60)\n    print(\"PostgreSQL Task 1 Verification: Customer Payment Query Optimization\")\n    print(\"=\" * 60)\n    \n    # Get connection parameters\n    conn_params = get_connection_params()\n    \n    if not conn_params[\"database\"]:\n        print(\"‚ùå No database specified\")\n        sys.exit(1)\n    \n    try:\n        # Connect to database\n        conn = psycopg2.connect(**conn_params)\n        \n        print(\"\\nüîç Checking for customer_id index on payment table...\")\n        \n        # Check if any index exists on payment.customer_id\n        has_index, indexes = check_payment_customer_id_index(conn)\n        \n        if has_index:\n            print(\"‚úÖ Found index(es) on payment.customer_id:\")\n            for index_name, index_def in indexes:\n                print(f\"   - {index_name}: {index_def}\")\n        else:\n            print(\"‚ùå No index found on payment.customer_id column\")\n        \n        conn.close()\n        \n        if has_index:\n            print(f\"\\nüéâ Task verification: PASS\")\n            print(f\"   - Index on payment.customer_id exists\")\n            sys.exit(0)\n        else:\n            print(f\"\\n‚ùå Task verification: FAIL\")\n            print(f\"   - No index found on payment.customer_id\")\n            print(f\"   - Create an index on payment(customer_id) to optimize the queries\")\n            sys.exit(1)\n            \n    except psycopg2.Error as e:\n        print(f\"‚ùå Database error: {e}\")\n        sys.exit(1)\n    except Exception as e:\n        print(f\"‚ùå Verification error: {e}\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()"
}