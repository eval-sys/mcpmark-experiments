{
  "task_id": "structure_analysis",
  "task_name": "Structure Analysis",
  "category_id": "folder_structure",
  "category_name": "Folder Structure",
  "description": "Perform thorough analysis of complex folder hierarchy to generate a detailed structural summary report with comprehensive file statistics.",
  "author": "Lingjun Chen",
  "created_at": "2025-08-16",
  "difficulty": "L3",
  "tags": [
    "pattern analysis",
    "data extraction"
  ],
  "mcp": [
    "filesystem"
  ],
  "meta_data": {
    "stateType": "text",
    "stateContent": "folder_structure/\n    └── complex_structure/\n            ├── deeply/\n            │       └── nested/\n            │               └── folder/\n            │                       └── structure/\n            ├── empty_folder/\n            ├── folder_lxkHt_0_1/\n            │       └── file_PeLzC_0.txt\n            ├── folder_QdTAj_0_2/\n            │       ├── folder_eXccj_1_0/\n            │       │       ├── folder_Mqlwh_2_1/\n            │       │       │       ├── folder_cKxcP_3_3/\n            │       │       │       │       ├── folder_BPTMK_4_1/\n            │       │       │       │       │       └── file_RHtBP_0.txt\n            │       │       │       │       ├── folder_QNqjq_4_0/\n            │       │       │       │       │       ├── folder_gRwPE_5_1/\n            │       │       │       │       │       │       ├── file_jVlpp_0.txt\n            │       │       │       │       │       │       └── file_vJuHz_1.txt\n            │       │       │       │       │       ├── folder_XdXYJ_5_0/\n            │       │       │       │       │       │       └── file_KvkKi_0.txt\n            │       │       │       │       │       ├── file_gGxLG_2.txt\n            │       │       │       │       │       ├── file_Hzkxo_0.txt\n            │       │       │       │       │       └── file_XRjeh_1.txt\n            │       │       │       │       ├── folder_vIBIt_4_2/\n            │       │       │       │       │       ├── folder_kRDNS_5_0/\n            │       │       │       │       │       │       └── file_wFSjJ_0.txt\n            │       │       │       │       │       └── file_NyBSO_0.txt\n            │       │       │       │       ├── file_EOCNf_1.txt\n            │       │       │       │       └── file_gmrXA_0.txt\n            │       │       │       ├── folder_NcruA_3_1/\n            │       │       │       │       ├── file_bLWDj_1.txt\n            │       │       │       │       └── file_WAftR_0.txt\n            │       │       │       ├── folder_qCDFI_3_2/\n            │       │       │       │       ├── file_eSMOJ_0.txt\n            │       │       │       │       ├── file_oxADy_2.txt\n            │       │       │       │       └── file_RTbbc_1.txt\n            │       │       │       ├── folder_QVHUU_3_0/\n            │       │       │       │       ├── folder_FEPTK_4_1/\n            │       │       │       │       │       ├── folder_GHoMC_5_1/\n            │       │       │       │       │       │       └── file_rAMYd_0.txt\n            │       │       │       │       │       ├── folder_iBDUY_5_0/\n            │       │       │       │       │       │       └── file_IJCaw_0.txt\n            │       │       │       │       │       ├── folder_VRXgp_5_2/\n            │       │       │       │       │       │       └── file_hkUmS_0.txt\n            │       │       │       │       │       ├── file_nqLAf_1.txt\n            │       │       │       │       │       └── file_XflmA_0.txt\n            │       │       │       │       ├── folder_FlPoK_4_3/\n            │       │       │       │       │       ├── folder_hSVNm_5_3/\n            │       │       │       │       │       │       └── file_klnbn_0.txt\n            │       │       │       │       │       ├── folder_iZuEl_5_0/\n            │       │       │       │       │       │       └── file_LqAmy_0.txt\n            │       │       │       │       │       ├── folder_LcURj_5_2/\n            │       │       │       │       │       │       ├── file_RgwOS_1.txt\n            │       │       │       │       │       │       └── file_ZHnYb_0.txt\n            │       │       │       │       │       ├── folder_tuZQJ_5_1/\n            │       │       │       │       │       │       └── file_LHuIx_0.txt\n            │       │       │       │       │       ├── file_asJnB_1.txt\n            │       │       │       │       │       └── file_EzLdu_0.txt\n            │       │       │       │       ├── folder_ndhsJ_4_0/\n            │       │       │       │       │       ├── folder_CUSXK_5_0/\n            │       │       │       │       │       │       ├── file_DpiuM_1.txt\n            │       │       │       │       │       │       └── file_pSqeG_0.txt\n            │       │       │       │       │       ├── folder_pstmE_5_1/\n            │       │       │       │       │       │       └── file_YwdJt_0.txt\n            │       │       │       │       │       ├── folder_StlsP_5_2/\n            │       │       │       │       │       │       ├── file_kriBJ_0.txt\n            │       │       │       │       │       │       └── file_XCEdm_1.txt\n            │       │       │       │       │       ├── file_ToDjh_1.txt\n            │       │       │       │       │       └── file_xbIVx_0.txt\n            │       │       │       │       ├── folder_PJBok_4_4/\n            │       │       │       │       │       ├── folder_mzxaf_5_0/\n            │       │       │       │       │       │       ├── file_ILBzj_2.txt\n            │       │       │       │       │       │       ├── file_MTGMm_1.txt\n            │       │       │       │       │       │       └── file_zBDqz_0.txt\n            │       │       │       │       │       ├── folder_sULMj_5_1/\n            │       │       │       │       │       │       ├── file_BHziw_1.txt\n            │       │       │       │       │       │       ├── file_sIjiu_2.txt\n            │       │       │       │       │       │       └── file_VqNkB_0.txt\n            │       │       │       │       │       ├── folder_vypSi_5_3/\n            │       │       │       │       │       │       ├── file_kZbIm_1.txt\n            │       │       │       │       │       │       └── file_sOBtE_0.txt\n            │       │       │       │       │       ├── folder_ZLGHy_5_2/\n            │       │       │       │       │       │       ├── file_azaFF_0.txt\n            │       │       │       │       │       │       └── file_nAFRe_1.txt\n            │       │       │       │       │       ├── file_mIkQU_0.txt\n            │       │       │       │       │       └── file_sGPxd_1.txt\n            │       │       │       │       ├── folder_VTbEG_4_2/\n            │       │       │       │       │       ├── file_HtYLg_0.txt\n            │       │       │       │       │       ├── file_JXjMd_1.txt\n            │       │       │       │       │       └── file_tPccB_2.txt\n            │       │       │       │       ├── file_BuOSw_1.txt\n            │       │       │       │       └── file_TpoqE_0.txt\n            │       │       │       ├── folder_wTvun_3_4/\n            │       │       │       │       ├── file_GyhyE_1.txt\n            │       │       │       │       ├── file_POsla_2.txt\n            │       │       │       │       └── file_tSsvk_0.txt\n            │       │       │       ├── file_irNju_0.txt\n            │       │       │       └── file_jYBRm_1.txt\n            │       │       ├── folder_YlJLI_2_0/\n            │       │       │       └── file_FpFSL_0.txt\n            │       │       ├── file_cFgBr_2.txt\n            │       │       ├── file_lKEWN_1.txt\n            │       │       └── file_ZEWFP_0.txt\n            │       └── file_ayUCH_0.txt\n            ├── folder_xtgyi_0_0/\n            │       └── file_BvSOB_0.txt\n            ├── mixed_content/\n            │       └── images_and_text/\n            │               └── notes.txt\n            ├── project/\n            │       ├── docs/\n            │       │       └── archive/\n            │       │               └── 2023/\n            │       │                       └── reports/\n            │       │                               ├── report_0.txt\n            │       │                               ├── report_1.txt\n            │       │                               └── report_2.txt\n            │       └── src/\n            │               └── main/\n            │                       └── resources/\n            └── m.py",
    "stateUrl": "https://storage.mcpmark.ai/filesystem/folder_structure.zip",
    "stateOriginalUrl": null
  },
  "instruction": "Please use FileSystem tools to finish the following task:\n\nYou need to recursively traverse the entire folder structure under the main directory and generate a detailed statistical report in a file named `structure_analysis.txt`.\n\nIn all tasks, ignore `.DS_Store` files.\n\nIn any tasks, you should not change or delete any existed files.\n\nDo not try to use python code.\n\n---\n\n### 1. File Statistics\n\nCount the following information for the entire directory structure:\n\n- total number of files\n- total number of folders\n- total size of the hole folder (in bytes, include .DS_Store only in this subtask)\n\n**Format (one item per line):**\n\ntotal number of files: X\ntotal number of folders: Y\ntotal size of all files: Z\n\n---\n\n### 2. Depth Analysis\n\nIdentify the deepest folder path(s) in the directory and calculate its depth level.\n\n- Use relative paths based on main directory.\n- **Write the folder path only up to the folder, not including the file name.For example, if the file path is `./complex_structure/A/B/C/def.txt`, then the path in your report should be `complex_structure/A/B/C`, and the depth is `4`.**\n- If multiple deepest paths exist, list only one.\n\n**Format (one item per line):**\n\ndepth: N\nPATH\n\n---\n\n### 3. File Type Classification\n\nCategorize files by their extensions and count the number of files for each type.\nFiles without extensions should also be included.\n\n**Format (one extension per line):**\n\ntxt: count\npy: count\njpg: count\nmov: count\n(no extension): count\n",
  "verify": "#!/usr/bin/env python3\n\"\"\"\nVerification script for Directory Structure Analysis Task\n\"\"\"\n\nimport sys\nfrom pathlib import Path\nimport os\nimport re\n\ndef get_test_directory() -> Path:\n    \"\"\"Get the test directory from FILESYSTEM_TEST_DIR env var.\"\"\"\n    test_root = os.environ.get(\"FILESYSTEM_TEST_DIR\")\n    if not test_root:\n        raise ValueError(\"FILESYSTEM_TEST_DIR environment variable is required\")\n    return Path(test_root)\n\ndef verify_structure_analysis_file_exists(test_dir: Path) -> bool:\n    \"\"\"Verify that the structure_analysis.txt file exists.\"\"\"\n    analysis_file = test_dir / \"structure_analysis.txt\"\n    \n    if not analysis_file.exists():\n        print(\"❌ File 'structure_analysis.txt' not found\")\n        return False\n    \n    print(\"✅ structure_analysis.txt file found\")\n    return True\n\ndef verify_structure_analysis_file_readable(test_dir: Path) -> bool:\n    \"\"\"Verify that the structure_analysis.txt file is readable.\"\"\"\n    analysis_file = test_dir / \"structure_analysis.txt\"\n    \n    try:\n        content = analysis_file.read_text()\n        if not content.strip():\n            print(\"❌ structure_analysis.txt file is empty\")\n            return False\n        \n        print(\"✅ structure_analysis.txt file is readable\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error reading structure_analysis.txt file: {e}\")\n        return False\n\ndef verify_subtask1_file_statistics(test_dir: Path) -> bool:\n    \"\"\"Verify subtask 1: File Statistics - files must be 69, folders must be 51, 58097 allows +-1000.\"\"\"\n    analysis_file = test_dir / \"structure_analysis.txt\"\n    \n    try:\n        content = analysis_file.read_text()\n        \n        # Extract numbers from the content\n        file_count_match = re.search(r'total number of files:\\s*(\\d+)', content)\n        folder_count_match = re.search(r'total number of folders:\\s*(\\d+)', content)\n        size_match = re.search(r'total size of all files:\\s*(\\d+)', content)\n        \n        if not file_count_match or not folder_count_match or not size_match:\n            print(\"❌ Could not extract file statistics from structure_analysis.txt\")\n            return False\n        \n        file_count = int(file_count_match.group(1))\n        folder_count = int(folder_count_match.group(1))\n        total_size = int(size_match.group(1))\n        \n        print(f\"📊 Found: files={file_count}, folders={folder_count}, size={total_size}\")\n        \n        # Check if file count is exactly 69\n        if file_count != 69:\n            print(f\"❌ File count must be 69, found: {file_count}\")\n            return False\n        \n        # Check if folder count is exactly 51\n        if folder_count != 51:\n            print(f\"❌ Folder count must be 51, found: {folder_count}\")\n            return False\n        \n        # Check if size is within acceptable range (58097 ± 1000)\n        expected_size = 58097\n        size_tolerance = 1000\n        if abs(total_size - expected_size) > size_tolerance:\n            print(f\"❌ Total size ({total_size}) is not within acceptable range ({expected_size} ± {size_tolerance})\")\n            return False\n        \n        print(f\"✅ File statistics verified: files={file_count}, folders={folder_count}, size={total_size} (within tolerance)\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error verifying file statistics: {e}\")\n        return False\n\ndef verify_subtask2_depth_analysis(test_dir: Path) -> bool:\n    \"\"\"Verify subtask 2: Depth Analysis - depth must be 7, verify path exists.\"\"\"\n    analysis_file = test_dir / \"structure_analysis.txt\"\n    \n    try:\n        content = analysis_file.read_text()\n        \n        # Extract depth and path\n        depth_match = re.search(r'depth:\\s*(\\d+)', content)\n        path_match = re.search(r'^([^\\n]+)$', content, re.MULTILINE)\n        \n        if not depth_match:\n            print(\"❌ Could not extract depth from structure_analysis.txt\")\n            return False\n        \n        depth = int(depth_match.group(1))\n        \n        # Check if depth is exactly 7\n        if depth != 7:\n            print(f\"❌ Depth must be 7, found: {depth}\")\n            return False\n        \n        print(f\"✅ Depth verified: {depth}\")\n        \n        # Extract the path (it should be on a separate line after \"depth: 7\")\n        lines = content.split('\\n')\n        path_line = None\n        for i, line in enumerate(lines):\n            if line.strip() == f\"depth: {depth}\":\n                if i + 1 < len(lines):\n                    path_line = lines[i + 1].strip()\n                    break\n        \n        if not path_line:\n            print(\"❌ Could not find path line after depth specification\")\n            return False\n        \n        print(f\"📁 Found path: {path_line}\")\n        \n        # Verify that the path depth matches the declared depth\n        path_parts = path_line.split('/')\n        actual_depth = len(path_parts)\n        \n        if actual_depth != depth:\n            print(f\"❌ Path depth mismatch: declared depth is {depth}, but path has {actual_depth} levels\")\n            print(f\"   Path: {path_line}\")\n            print(f\"   Path parts: {path_parts}\")\n            return False\n        \n        print(f\"✅ Path depth verified: {actual_depth} levels\")\n        \n        # Verify that this path exists in the test environment\n        expected_path = test_dir / path_line\n        if not expected_path.exists():\n            print(f\"❌ Path does not exist: {expected_path}\")\n            return False\n        \n        if not expected_path.is_dir():\n            print(f\"❌ Path exists but is not a directory: {expected_path}\")\n            return False\n        \n        print(f\"✅ Path verified and exists: {path_line}\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error verifying depth analysis: {e}\")\n        return False\n\ndef verify_subtask3_file_type_classification(test_dir: Path) -> bool:\n    \"\"\"Verify subtask 3: File Type Classification - 68 and 1 must be accurate.\"\"\"\n    analysis_file = test_dir / \"structure_analysis.txt\"\n    \n    try:\n        content = analysis_file.read_text()\n        \n        # Extract file type counts\n        txt_match = re.search(r'txt:\\s*(\\d+)', content)\n        py_match = re.search(r'py:\\s*(\\d+)', content)\n        \n        if not txt_match or not py_match:\n            print(\"❌ Could not extract file type counts from structure_analysis.txt\")\n            return False\n        \n        txt_count = int(txt_match.group(1))\n        py_count = int(py_match.group(1))\n        \n        print(f\"📁 Found: txt={txt_count}, py={py_count}\")\n        \n        # Check if txt count is exactly 68\n        if txt_count != 68:\n            print(f\"❌ txt count must be 68, found: {txt_count}\")\n            return False\n        \n        # Check if py count is exactly 1\n        if py_count != 1:\n            print(f\"❌ py count must be 1, found: {py_count}\")\n            return False\n        \n        print(f\"✅ File type classification verified: txt={txt_count}, py={py_count}\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error verifying file type classification: {e}\")\n        return False\n\ndef verify_file_format(test_dir: Path) -> bool:\n    \"\"\"Verify that the structure_analysis.txt file has proper format.\"\"\"\n    analysis_file = test_dir / \"structure_analysis.txt\"\n    \n    try:\n        content = analysis_file.read_text()\n        lines = content.split('\\n')\n        \n        # Check if file has the expected structure\n        if len(lines) < 5:  # Should have at least 5 lines\n            print(\"❌ File seems too short to contain all required information\")\n            return False\n        \n        # Basic format check - ensure it's not completely corrupted\n        if not content.strip():\n            print(\"❌ File is completely empty\")\n            return False\n        \n        print(\"✅ File format is acceptable\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error checking file format: {e}\")\n        return False\n\ndef main():\n    \"\"\"Main verification function.\"\"\"\n    try:\n        test_dir = get_test_directory()\n        print(f\"🔍 Verifying Directory Structure Analysis Task in: {test_dir}\")\n        \n        # Define verification steps\n        verification_steps = [\n            (\"Structure Analysis File Exists\", verify_structure_analysis_file_exists),\n            (\"File is Readable\", verify_structure_analysis_file_readable),\n            (\"Subtask 1: File Statistics\", verify_subtask1_file_statistics),\n            (\"Subtask 2: Depth Analysis\", verify_subtask2_depth_analysis),\n            (\"Subtask 3: File Type Classification\", verify_subtask3_file_type_classification),\n            (\"File Format\", verify_file_format),\n        ]\n        \n        # Run all verification steps\n        all_passed = True\n        for step_name, verify_func in verification_steps:\n            print(f\"\\n--- {step_name} ---\")\n            if not verify_func(test_dir):\n                all_passed = False\n        \n        # Final result\n        print(\"\\n\" + \"=\"*50)\n        if all_passed:\n            print(\"✅ Directory Structure Analysis completed correctly!\")\n            print(\"🎉 Structure Analysis verification: PASS\")\n            sys.exit(0)\n        else:\n            print(\"❌ Structure Analysis verification: FAIL\")\n            sys.exit(1)\n            \n    except Exception as e:\n        print(f\"❌ Verification failed with error: {e}\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()"
}