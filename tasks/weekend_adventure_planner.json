{
  "task_id": "weekend_adventure_planner",
  "task_name": "Weekend Adventure Planner",
  "category_id": "toronto_guide",
  "category_name": "Toronto Guide",
  "description": "Create a comprehensive weekend adventure planner that analyzes Toronto Guide databases and generates a structured itinerary page.",
  "author": "Xiangyan Liu",
  "created_at": "2025-08-14",
  "difficulty": "L3",
  "tags": [
    "conditional filtering",
    "data aggregation",
    "report generation",
    "visual formatting",
    "status tracking"
  ],
  "mcp": [
    "notion"
  ],
  "meta_data": {
    "stateType": "url",
    "stateContent": null,
    "stateUrl": "https://painted-tennis-ebc.notion.site/Toronto-Guide-25281626b6d7802caa7cc394647e901c",
    "stateOriginalUrl": "https://www.notion.so/marketplace/templates/conquering-toronto-a-destination-guide"
  },
  "instruction": "Create a comprehensive weekend adventure planner that analyzes the Toronto Guide databases and generates a structured itinerary page. I need you to create a new page called 'Perfect Weekend Adventure' as a child of the main Toronto Guide page.\n\n**Task Requirements:**\n1. Create a new page titled 'Perfect Weekend Adventure' as a child page of the main Toronto Guide page\n2. Query the Activities database to identify all activities that have the \"Beaches\" tag\n3. Query the Food database to find all restaurants with \"Turkish\" or \"Hakka\" tags\n4. Query the Cafes database to retrieve all cafes entries\n5. Structure the page with the following specific format:\n   - Add a heading_1 block with text \"üéí Perfect Weekend Adventure\"\n   - Add a heading_2 block with text \"üèñÔ∏è Beach Activities\"\n   - Under Beach Activities, create a bulleted list with all activities that have the \"Beaches\" tag, showing: Name - Google Maps Link (if available)\n   - Add a heading_2 block with text \"üçΩÔ∏è Cultural Dining Experience\"\n   - Under Cultural Dining, create a numbered list of all restaurants with \"Turkish\" or \"Hakka\" tags, formatted as: Restaurant Name (Tag: [actual tag name])\n   - Add a heading_2 block with text \"‚òï Coffee Break Spots\"\n   - Under Coffee Break Spots, create a toggle block titled \"Top Cafes to Visit\" containing all cafe entries as to-do items (unchecked), each showing just the cafe name\n   - Add a heading_2 block with text \"üìä Weekend Summary\"\n   - Under Weekend Summary, add a paragraph with the exact text: \"This weekend includes [X] beach activities, [Y] cultural dining options, and [Z] coffee spots to explore!\" where [X], [Y], and [Z] are the actual counts\n6. After the summary paragraph, add a divider block\n7. Finally, add a callout block with the üí° emoji containing the text: \"Pro tip: Check the Seasons database for the best time to enjoy outdoor activities!\"\n8. Ensure all headings use the exact emoji and text format specified above\n9. The lists must be in the exact format specified (bulleted for beaches, numbered for restaurants, to-do for cafes)",
  "verify": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n\nimport sys\nfrom notion_client import Client\nfrom tasks.utils import notion_utils\n\n\ndef verify(notion: Client, main_id: str = None) -> bool:\n    \"\"\"\n    Verifies that the Perfect Weekend Adventure page has been created correctly.\n    \"\"\"\n    # Find the main Toronto Guide page\n    page_id = None\n    if main_id:\n        found_id, object_type = notion_utils.find_page_or_database_by_id(notion, main_id)\n        if found_id and object_type == \"page\":\n            page_id = found_id\n    \n    if not page_id:\n        page_id = notion_utils.find_page(notion, \"Toronto Guide\")\n    if not page_id:\n        print(\"Error: Main 'Toronto Guide' page not found.\", file=sys.stderr)\n        return False\n    \n    # Find the Perfect Weekend Adventure child page\n    adventure_page_id = None\n    try:\n        response = notion.search(\n            query=\"Perfect Weekend Adventure\",\n            filter={\"property\": \"object\", \"value\": \"page\"}\n        )\n        \n        for result in response.get(\"results\", []):\n            parent = result.get(\"parent\", {})\n            if parent.get(\"type\") == \"page_id\" and parent.get(\"page_id\") == page_id:\n                adventure_page_id = result[\"id\"]\n                break\n        \n        if not adventure_page_id:\n            for result in response.get(\"results\", []):\n                title_list = result.get(\"properties\", {}).get(\"title\", {}).get(\"title\", [])\n                for title_obj in title_list:\n                    if \"Perfect Weekend Adventure\" in title_obj.get(\"plain_text\", \"\"):\n                        adventure_page_id = result[\"id\"]\n                        break\n                if adventure_page_id:\n                    break\n    \n    except Exception as e:\n        print(f\"Error searching for Perfect Weekend Adventure page: {e}\", file=sys.stderr)\n        return False\n    \n    if not adventure_page_id:\n        print(\"Error: 'Perfect Weekend Adventure' page not found as child of main page.\", file=sys.stderr)\n        return False\n    \n    # Get all blocks from the adventure page\n    all_blocks = notion_utils.get_all_blocks_recursively(notion, adventure_page_id)\n    \n    # Get databases from the main Toronto Guide page\n    activities_db_id = None\n    food_db_id = None\n    cafes_db_id = None\n    \n    main_blocks = notion_utils.get_all_blocks_recursively(notion, page_id)\n    for block in main_blocks:\n        if block.get(\"type\") == \"child_database\":\n            title = block.get(\"child_database\", {}).get(\"title\", \"\")\n            if \"Activities\" in title:\n                activities_db_id = block.get(\"id\")\n            elif \"Food\" in title:\n                food_db_id = block.get(\"id\")\n            elif \"Cafes\" in title or \"CafÔøΩ\" in title:\n                cafes_db_id = block.get(\"id\")\n    \n    # Query databases to get expected data\n    beach_activities = []\n    cultural_restaurants = []\n    cafes_list = []\n    \n    if activities_db_id:\n        try:\n            db_response = notion.databases.query(database_id=activities_db_id)\n            for page in db_response.get(\"results\", []):\n                properties = page.get(\"properties\", {})\n                tags_prop = properties.get(\"Tags\", {})\n                if tags_prop.get(\"type\") == \"multi_select\":\n                    tags = [tag.get(\"name\") for tag in tags_prop.get(\"multi_select\", [])]\n                    if \"Beaches\" in tags:\n                        name_prop = properties.get(\"Name\", {})\n                        if name_prop.get(\"type\") == \"title\" and name_prop.get(\"title\"):\n                            name = name_prop[\"title\"][0][\"plain_text\"]\n                            url_prop = properties.get(\"Google Maps Link\", {})\n                            url = url_prop.get(\"url\", \"\") if url_prop.get(\"type\") == \"url\" else \"\"\n                            beach_activities.append({\"name\": name, \"url\": url})\n        except Exception as e:\n            print(f\"Error querying Activities database: {e}\", file=sys.stderr)\n            return False\n    \n    if food_db_id:\n        try:\n            db_response = notion.databases.query(database_id=food_db_id)\n            for page in db_response.get(\"results\", []):\n                properties = page.get(\"properties\", {})\n                tags_prop = properties.get(\"Tags\", {})\n                if tags_prop.get(\"type\") == \"multi_select\":\n                    tags = [tag.get(\"name\") for tag in tags_prop.get(\"multi_select\", [])]\n                    for tag in tags:\n                        if tag in [\"Turkish\", \"Hakka\"]:\n                            name_prop = properties.get(\"Name\", {})\n                            if name_prop.get(\"type\") == \"title\" and name_prop.get(\"title\"):\n                                name = name_prop[\"title\"][0][\"plain_text\"]\n                                cultural_restaurants.append({\"name\": name, \"tag\": tag})\n                                break\n        except Exception as e:\n            print(f\"Error querying Food database: {e}\", file=sys.stderr)\n            return False\n    \n    if cafes_db_id:\n        try:\n            db_response = notion.databases.query(database_id=cafes_db_id)\n            for page in db_response.get(\"results\", []):\n                properties = page.get(\"properties\", {})\n                name_prop = properties.get(\"Name\", {})\n                if name_prop.get(\"type\") == \"title\" and name_prop.get(\"title\"):\n                    name = name_prop[\"title\"][0][\"plain_text\"]\n                    cafes_list.append(name)\n        except Exception as e:\n            print(f\"Error querying Cafes database: {e}\", file=sys.stderr)\n            return False\n    \n    # Required headings and their types\n    required_headings = [\n        (\"üéí Perfect Weekend Adventure\", \"heading_1\"),\n        (\"üèñÔ∏è Beach Activities\", \"heading_2\"),\n        (\"üçΩÔ∏è Cultural Dining Experience\", \"heading_2\"),\n        (\"‚òï Coffee Break Spots\", \"heading_2\"),\n        (\"üìä Weekend Summary\", \"heading_2\")\n    ]\n    \n    # Track verification results\n    found_headings = set()\n    found_beach_list = False\n    found_restaurant_list = False\n    found_toggle_with_cafes = False\n    found_summary = False\n    found_divider = False\n    found_callout = False\n    \n    # Variables to track counts\n    beach_count = 0\n    restaurant_count = 0\n    cafe_count = 0\n    \n    current_section = None\n    is_in_toggle = False\n    \n    for block in all_blocks:\n        block_type = block.get(\"type\")\n        block_text = notion_utils.get_block_plain_text(block)\n        \n        # Check headings\n        for heading_text, expected_type in required_headings:\n            if heading_text in block_text and block_type == expected_type:\n                found_headings.add(heading_text)\n                current_section = heading_text\n        \n        # Check Beach Activities section\n        if current_section == \"üèñÔ∏è Beach Activities\" and block_type == \"bulleted_list_item\":\n            found_beach_list = True\n            beach_count += 1\n            # Verify format includes name and potentially URL\n            for activity in beach_activities:\n                if activity[\"name\"] in block_text:\n                    if activity[\"url\"] and activity[\"url\"] not in block_text:\n                        print(f\"Warning: Beach activity '{activity['name']}' missing URL\", file=sys.stderr)\n        \n        # Check Cultural Dining section\n        elif current_section == \"üçΩÔ∏è Cultural Dining Experience\" and block_type == \"numbered_list_item\":\n            found_restaurant_list = True\n            restaurant_count += 1\n            # Check format: Restaurant Name (Tag: [tag])\n            for restaurant in cultural_restaurants:\n                if restaurant[\"name\"] in block_text and f\"Tag: {restaurant['tag']}\" in block_text:\n                    pass  # Format is correct\n        \n        # Check Coffee Break Spots section\n        elif current_section == \"‚òï Coffee Break Spots\":\n            if block_type == \"toggle\" and \"Top Cafes to Visit\" in block_text:\n                is_in_toggle = True\n                found_toggle_with_cafes = True\n            elif is_in_toggle and block_type == \"to_do\":\n                cafe_count += 1\n                # Verify unchecked status\n                to_do_data = block.get(\"to_do\", {})\n                if to_do_data.get(\"checked\", False):\n                    print(f\"Error: Cafe to-do item should be unchecked: {block_text}\", file=sys.stderr)\n                    return False\n            elif block_type in [\"heading_1\", \"heading_2\", \"heading_3\"]:\n                is_in_toggle = False\n        \n        # Check Weekend Summary section\n        elif current_section == \"üìä Weekend Summary\" and block_type == \"paragraph\":\n            expected_text = f\"This weekend includes {len(beach_activities)} beach activities, {len(cultural_restaurants)} cultural dining options, and {len(cafes_list)} coffee spots to explore!\"\n            if expected_text in block_text:\n                found_summary = True\n        \n        # Check for divider after summary\n        if block_type == \"divider\":\n            found_divider = True\n        \n        # Check for callout with pro tip\n        if block_type == \"callout\":\n            callout_data = block.get(\"callout\", {})\n            icon = callout_data.get(\"icon\", {})\n            if icon.get(\"type\") == \"emoji\" and icon.get(\"emoji\") == \"üí°\":\n                if \"Pro tip: Check the Seasons database for the best time to enjoy outdoor activities!\" in block_text:\n                    found_callout = True\n    \n    # Verify all required elements\n    all_passed = True\n    \n    # Check all headings are present\n    for heading_text, _ in required_headings:\n        if heading_text not in found_headings:\n            print(f\"Error: Missing required heading: {heading_text}\", file=sys.stderr)\n            all_passed = False\n    \n    # Check beach activities list\n    if not found_beach_list:\n        print(\"Error: Beach activities bulleted list not found\", file=sys.stderr)\n        all_passed = False\n    elif beach_count != len(beach_activities):\n        print(f\"Error: Expected {len(beach_activities)} beach activities, found {beach_count}\", file=sys.stderr)\n        all_passed = False\n    \n    # Check restaurant list\n    if not found_restaurant_list:\n        print(\"Error: Cultural dining numbered list not found\", file=sys.stderr)\n        all_passed = False\n    elif restaurant_count != len(cultural_restaurants):\n        print(f\"Error: Expected {len(cultural_restaurants)} cultural restaurants, found {restaurant_count}\", file=sys.stderr)\n        all_passed = False\n    \n    # Check cafes toggle\n    if not found_toggle_with_cafes:\n        print(\"Error: Toggle block 'Top Cafes to Visit' not found\", file=sys.stderr)\n        all_passed = False\n    elif cafe_count != len(cafes_list):\n        print(f\"Error: Expected {len(cafes_list)} cafes, found {cafe_count}\", file=sys.stderr)\n        all_passed = False\n    \n    # Check summary\n    if not found_summary:\n        print(\"Error: Weekend summary with correct counts not found\", file=sys.stderr)\n        all_passed = False\n    \n    # Check divider\n    if not found_divider:\n        print(\"Error: Divider block not found after summary\", file=sys.stderr)\n        all_passed = False\n    \n    # Check callout\n    if not found_callout:\n        print(\"Error: Callout with pro tip not found\", file=sys.stderr)\n        all_passed = False\n    \n    if all_passed:\n        print(f\"Success: Perfect Weekend Adventure page created with all required elements.\")\n        print(f\"- {len(beach_activities)} beach activities\")\n        print(f\"- {len(cultural_restaurants)} cultural dining options\")\n        print(f\"- {len(cafes_list)} coffee spots\")\n        return True\n    else:\n        return False\n\n\ndef main():\n    \"\"\"\n    Executes the verification process and exits with a status code.\n    \"\"\"\n    notion = notion_utils.get_notion_client()\n    main_id = sys.argv[1] if len(sys.argv) > 1 else None\n    if verify(notion, main_id):\n        sys.exit(0)\n    else:\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()"
}