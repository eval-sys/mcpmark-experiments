{
  "task_id": "courses_internships_relation",
  "task_name": "Courses Internships Relation",
  "category_id": "computer_science_student_dashboard",
  "category_name": "Computer Science Student Dashboard",
  "description": "Connect the Courses and Internship search databases with bidirectional relations and populate with sample data.",
  "author": "Zijian Wu",
  "created_at": "2025-07-27",
  "difficulty": "L3",
  "tags": [
    "database manipulation",
    "cross-reference linking",
    "template population"
  ],
  "mcp": [
    "notion"
  ],
  "metadata": {
    "ori_template_url": "https://painted-tennis-ebc.notion.site/Computer-Science-Student-Dashboard-23e81626b6d78083b787d3c832b02ef4",
    "gt_page_url": "https://www.notion.so/Computer-Science-Student-Dashboard-Courses-Internships-Relation-2442b7e8cebd81ae9e5fcccb5fc4697e"
  },
  "instruction": "Your goal is to connect the `Courses` and `Internship search` databases inside the **Computer Science Student Dashboard** page and populate them with sample data that can be verified automatically.\n\n**Task Requirements:**\n\n1. In the **Courses** database, add a new **relation** property named **Related Internships** that points to the **Internship search** database.\n2. Ensure the relation is **bidirectional** by adding a relation property in the **Internship search** database named **Relevant Courses** that points back to the **Courses** database.\n3. Create **exactly three** new pages in the **Courses** database with realistic computer-science course data.  Each course page must include **all** of the following properties and values:\n   • **Code** (text) – unique codes `CS301`, `CS302`, and `CS303` respectively  \n   • **Name** (text) – pick appropriate names (e.g., *Computer Networks*, *Operating Systems*, *Machine Learning*)  \n   • **Credit** (number) – any positive integer  \n   • **Status** (status) – choose from `Planned`, `In Progress`, or `Completed`  \n   • **Related Internships** (relation) – link to at least one internship created in step4.\n4. Create **exactly two** new pages in the **Internship search** database with complete application information.  Each internship page must include **all** of the following properties and values:\n   • **Company** (text) – `OpenAI` and `Google` respectively  \n   • **Role** (text) – `Machine Learning Intern` and `Software Engineering Intern`  \n   • **Status** (status) – set to `Interested`  \n   • **Relevant Courses** (relation) – link to one or more of the courses created in step3.\n5. Every course created in step3 must be linked to at least one internship from step4 **and** every internship must be linked back to at least one course.\n\nThe task is considered complete when the relation properties exist, the specified course and internship pages are present with the exact values above, and the relations correctly connect the two databases in both directions.",
  "verify": "import sys\nfrom notion_client import Client\nfrom tasks.utils import notion_utils\n\n# ---------------------------------------------------------------------------\n# Constants -----------------------------------------------------------------\n# ---------------------------------------------------------------------------\nMAIN_PAGE_TITLE = \"Computer Science Student Dashboard\"\nCOURSES_DB_TITLE = \"Courses\"\nINTERNSHIP_DB_TITLE = \"Internship search\"\n\nCOURSE_CODES = {\"CS301\", \"CS302\", \"CS303\"}\nCOURSE_RELATION_NAME = \"Related Internships\"\nINTERNSHIP_RELATION_NAME = \"Relevant Courses\"\n\nINTERNSHIP_COMPANIES = {\"OpenAI\", \"Google\"}\n\n# ---------------------------------------------------------------------------\n# Helper functions -----------------------------------------------------------\n# ---------------------------------------------------------------------------\n\n\ndef _locate_main_page(notion: Client, main_id: str | None) -> str | None:\n    \"\"\"Return the page_id of the dashboard page or None if not found.\"\"\"\n    page_id = None\n    if main_id:\n        found_id, obj_type = notion_utils.find_page_or_database_by_id(notion, main_id)\n        if found_id and obj_type == \"page\":\n            page_id = found_id\n    if not page_id:\n        page_id = notion_utils.find_page(notion, MAIN_PAGE_TITLE)\n    return page_id\n\n\ndef _locate_database(notion: Client, parent_page_id: str, db_title: str) -> str | None:\n    \"\"\"Recursively search for a child database by title and return its id.\"\"\"\n    return notion_utils.find_database_in_block(notion, parent_page_id, db_title)\n\n\n# ---------------------------------------------------------------------------\n# Verification logic ---------------------------------------------------------\n# ---------------------------------------------------------------------------\n\n\ndef verify(notion: Client, main_id: str | None = None) -> bool:\n    \"\"\"Verify completion of the Courses ↔ Internship relation task.\"\"\"\n    # ------------------------------------------------------------------\n    # Locate main page and databases -----------------------------------\n    # ------------------------------------------------------------------\n    page_id = _locate_main_page(notion, main_id)\n    if not page_id:\n        print(f\"Error: Page '{MAIN_PAGE_TITLE}' not found.\", file=sys.stderr)\n        return False\n\n    courses_db_id = _locate_database(notion, page_id, COURSES_DB_TITLE)\n    internships_db_id = _locate_database(notion, page_id, INTERNSHIP_DB_TITLE)\n\n    if not courses_db_id:\n        print(f\"Error: Database '{COURSES_DB_TITLE}' not found.\", file=sys.stderr)\n        return False\n    if not internships_db_id:\n        print(f\"Error: Database '{INTERNSHIP_DB_TITLE}' not found.\", file=sys.stderr)\n        return False\n\n    # ------------------------------------------------------------------\n    # Validate relation properties -------------------------------------\n    # ------------------------------------------------------------------\n    courses_db_obj = notion.databases.retrieve(database_id=courses_db_id)\n    internships_db_obj = notion.databases.retrieve(database_id=internships_db_id)\n\n    courses_props = courses_db_obj.get(\"properties\", {})\n    internships_props = internships_db_obj.get(\"properties\", {})\n\n    # Courses → Internships relation\n    if COURSE_RELATION_NAME not in courses_props:\n        print(\n            f\"Error: Property '{COURSE_RELATION_NAME}' missing in Courses database.\",\n            file=sys.stderr,\n        )\n        return False\n    course_rel_prop = courses_props[COURSE_RELATION_NAME]\n    if (\n        course_rel_prop.get(\"type\") != \"relation\"\n        or course_rel_prop[\"relation\"].get(\"database_id\") != internships_db_id\n    ):\n        print(\n            \"Error: Courses relation property is not configured correctly.\",\n            file=sys.stderr,\n        )\n        return False\n\n    # Internships → Courses relation\n    if INTERNSHIP_RELATION_NAME not in internships_props:\n        print(\n            f\"Error: Property '{INTERNSHIP_RELATION_NAME}' missing in Internship search database.\",\n            file=sys.stderr,\n        )\n        return False\n    intern_rel_prop = internships_props[INTERNSHIP_RELATION_NAME]\n    if (\n        intern_rel_prop.get(\"type\") != \"relation\"\n        or intern_rel_prop[\"relation\"].get(\"database_id\") != courses_db_id\n    ):\n        print(\n            \"Error: Internship relation property is not configured correctly.\",\n            file=sys.stderr,\n        )\n        return False\n\n    # ------------------------------------------------------------------\n    # Validate course pages --------------------------------------------\n    # ------------------------------------------------------------------\n    course_pages = notion.databases.query(database_id=courses_db_id).get(\"results\", [])\n\n    valid_course_count = 0\n    course_page_id_set = set()\n    internship_ids_seen: set[str] = set()\n\n    for page in course_pages:\n        props = page.get(\"properties\", {})\n        code_rts = props.get(\"Code\", {}).get(\"rich_text\", [])\n        code_val = \"\".join(rt.get(\"plain_text\", \"\") for rt in code_rts).strip()\n        if code_val not in COURSE_CODES:\n            continue  # not one of the new course entries we care about\n\n        # Check required scalar props\n        title_rts = props.get(\"Name\", {}).get(\"title\", [])\n        name_ok = bool(\"\".join(rt.get(\"plain_text\", \"\") for rt in title_rts).strip())\n        credits_ok = props.get(\"Credit\", {}).get(\"number\") is not None\n        status_name = props.get(\"Status\", {}).get(\"status\", {}).get(\"name\", \"\")\n        status_allowed = {\"planned\", \"in progress\", \"completed\"}\n        status_ok = status_name.lower() in status_allowed\n\n        # Relation must point to at least one internship\n        relations = props.get(COURSE_RELATION_NAME, {}).get(\"relation\", [])\n        if not (name_ok and credits_ok and status_ok and relations):\n            print(\n                f\"Error: Course '{code_val}' is missing required property values or relations, or wrong values.\",\n                file=sys.stderr,\n            )\n            return False\n\n        # Collect IDs for further mutual check\n        course_page_id_set.add(page[\"id\"])\n        internship_ids_seen.update(rel[\"id\"] for rel in relations)\n        valid_course_count += 1\n\n    if valid_course_count != 3:\n        print(\n            f\"Error: Expected exactly 3 new course pages with codes {COURSE_CODES}, found {valid_course_count}.\",\n            file=sys.stderr,\n        )\n        return False\n\n    # ------------------------------------------------------------------\n    # Validate internship pages ----------------------------------------\n    # ------------------------------------------------------------------\n    internship_pages = notion.databases.query(database_id=internships_db_id).get(\n        \"results\", []\n    )\n\n    valid_intern_count = 0\n    internship_page_ids = set()\n    course_ids_seen_from_intern: set[str] = set()\n\n    for page in internship_pages:\n        props = page.get(\"properties\", {})\n        company_rts = props.get(\"Company\", {}).get(\"rich_text\", [])\n        company = \"\".join(rt.get(\"plain_text\", \"\") for rt in company_rts).strip()\n        if company not in INTERNSHIP_COMPANIES:\n            continue  # not one of the two new internships\n\n        role_rts = props.get(\"Role\", {}).get(\"title\", [])\n        role_ok = bool(\"\".join(rt.get(\"plain_text\", \"\") for rt in role_rts).strip())\n        status_name = props.get(\"Status\", {}).get(\"status\", {}).get(\"name\", \"\")\n        status_ok = status_name.lower() == \"interested\"\n        relations = props.get(INTERNSHIP_RELATION_NAME, {}).get(\"relation\", [])\n\n        if not (role_ok and status_ok and relations):\n            print(\n                f\"Error: Internship at '{company}' is missing required property values or relations, or wrong values.\",\n                file=sys.stderr,\n            )\n            return False\n\n        internship_page_ids.add(page[\"id\"])\n        course_ids_seen_from_intern.update(rel[\"id\"] for rel in relations)\n        valid_intern_count += 1\n\n    if valid_intern_count != 2:\n        print(\n            f\"Error: Expected exactly 2 new internship pages for companies {INTERNSHIP_COMPANIES}, found {valid_intern_count}.\",\n            file=sys.stderr,\n        )\n        return False\n\n    # ------------------------------------------------------------------\n    # Mutual relation consistency --------------------------------------\n    # ------------------------------------------------------------------\n    # Each relation from courses should point to one of the two internships identified\n    if not internship_ids_seen.issubset(internship_page_ids):\n        print(\n            \"Error: Some course relations point to pages outside the expected internships.\",\n            file=sys.stderr,\n        )\n        return False\n\n    # Each relation from internships should point back to the three course pages identified\n    if not course_ids_seen_from_intern.issubset(course_page_id_set):\n        print(\n            \"Error: Some internship relations point to pages outside the expected courses.\",\n            file=sys.stderr,\n        )\n        return False\n\n    print(\n        \"Success: Verified bidirectional relations, course and internship entries as required.\"\n    )\n    return True\n\n\n# ---------------------------------------------------------------------------\n# CLI entry-point -----------------------------------------------------------\n# ---------------------------------------------------------------------------\n\n\ndef main() -> None:\n    notion = notion_utils.get_notion_client()\n    main_id = sys.argv[1] if len(sys.argv) > 1 else None\n    sys.exit(0 if verify(notion, main_id) else 1)\n\n\nif __name__ == \"__main__\":\n    main()\n",
  "model_results": {
    "k2": 0,
    "gpt-5": 0,
    "grok-4": 0,
    "gpt-4-1": 0,
    "gemini-2-5-flash": 0,
    "gemini-2-5-pro": 0,
    "gpt-5-mini": 0,
    "deepseek-chat": 0,
    "gpt-4-1-mini": 0,
    "claude-4-sonnet": 0,
    "gpt-5-nano": 0,
    "o3": 0
  }
}