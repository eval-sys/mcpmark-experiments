{
  "task_id": "baseball_player_analysis",
  "task_name": "Baseball Player Analysis",
  "category_id": "sports",
  "category_name": "Sports",
  "description": "Consolidate scattered baseball player data into comprehensive analysis table combining offensive and defensive statistics.",
  "author": "Lingxiao Du",
  "created_at": "2025-08-18",
  "difficulty": "L3",
  "tags": [
    "reporting and analytics",
    "statistical aggregation",
    "schema design"
  ],
  "mcp": [
    "postgres"
  ],
  "metadata": {},
  "instruction": "Create comprehensive baseball player performance analysis in the sports database.\n\n## Background\n\nYou are a sports analyst working with a comprehensive sports database. The analytics team needs to create a detailed analysis of baseball players by combining their offensive and defensive statistics with personal information. Currently, this data is scattered across multiple tables and needs to be consolidated for reporting purposes.\n\n## Your Task\n\nCreate a table called `baseball_player_analysis` that consolidates baseball player performance data. The table should provide a comprehensive view of each qualifying player's performance metrics.\n\n### Table Structure\n\nCreate the `baseball_player_analysis` table with the following columns:\n- `player_id` (INTEGER, NOT NULL) - Player identifier\n- `player_name` (VARCHAR(255), NOT NULL) - Player's full name\n- `team_name` (VARCHAR(255)) - Set to 'Unknown' for all players\n- `games_played` (INTEGER) - Number of games/events the player participated in\n- `at_bats` (INTEGER) - Total at-bats for the player\n- `hits` (INTEGER) - Total hits for the player\n- `runs_scored` (INTEGER) - Total runs scored by the player\n- `rbi` (INTEGER) - Total runs batted in by the player\n- `home_runs` (INTEGER) - Total home runs hit by the player\n- `batting_average` (DECIMAL) - Calculated as hits/at_bats\n- `defensive_games` (INTEGER) - Number of defensive games played (same as games_played)\n- `putouts` (INTEGER) - Total putouts in defensive play\n- `assists` (INTEGER) - Total assists in defensive play\n- `errors` (INTEGER) - Total errors made in defensive play\n- `fielding_percentage` (DECIMAL) - Calculated as (putouts + assists)/(putouts + assists + errors)\n\n### Data Requirements\n\nInclude only baseball players that meet ALL of the following criteria:\n- Have offensive statistics available for regular season play\n- Have played at least 10 games/events\n- Have at least 50 at-bats\n- Have a valid name available in the system\n\n### Important Notes\n\n- Focus on regular season statistics only\n- Handle NULL values appropriately in calculations (use 0 for missing stats)\n- Ensure batting average and fielding percentage calculations handle division by zero\n- Do NOT use ROUND functions - keep the full precision of calculated values\n- Sort results by batting average descending, then by games played descending\n\n## Requirements\n\n- Explore the database to understand the table structure and relationships\n- Create the table with the exact structure specified above\n- Populate the table using appropriate queries and joins\n- Ensure all calculations are mathematically correct\n- Handle edge cases properly (division by zero, NULL values)",
  "verify": "\"\"\"\nVerification script for PostgreSQL Sports Task 1: Baseball Player Analysis\n\"\"\"\n\nimport os\nimport sys\nimport psycopg2\nfrom decimal import Decimal\n\ndef rows_match(actual_row, expected_row):\n    \"\"\"Compare two rows with appropriate tolerance for decimals and floats.\"\"\"\n    if len(actual_row) != len(expected_row):\n        return False\n    \n    for actual, expected in zip(actual_row, expected_row):\n        if isinstance(actual, (Decimal, float)) and isinstance(expected, (Decimal, float)):\n            # Use higher tolerance for floating point comparisons\n            if abs(float(actual) - float(expected)) > 0.001:\n                return False\n        elif actual != expected:\n            return False\n    \n    return True\n\ndef get_connection_params() -> dict:\n    \"\"\"Get database connection parameters.\"\"\"\n    return {\n        \"host\": os.getenv(\"POSTGRES_HOST\", \"localhost\"),\n        \"port\": int(os.getenv(\"POSTGRES_PORT\", 5432)),\n        \"database\": os.getenv(\"POSTGRES_DATABASE\"),\n        \"user\": os.getenv(\"POSTGRES_USERNAME\"),\n        \"password\": os.getenv(\"POSTGRES_PASSWORD\")\n    }\n\ndef verify_baseball_player_analysis_table(conn) -> bool:\n    \"\"\"Verify the baseball_player_analysis table results.\"\"\"\n    with conn.cursor() as cur:\n        cur.execute(\"\"\"\n            SELECT player_id, player_name, team_name, games_played, at_bats, hits,\n                   runs_scored, rbi, home_runs, batting_average, defensive_games,\n                   putouts, assists, errors, fielding_percentage\n            FROM baseball_player_analysis\n            ORDER BY batting_average DESC, games_played DESC\n        \"\"\")\n        actual_results = cur.fetchall()\n        \n        cur.execute(\"\"\"\n            SELECT\n            p.id AS player_id,\n            MAX(dn.full_name) AS player_name,\n            'Unknown' AS team_name,\n            core.events_played AS games_played,\n            off.at_bats,\n            off.hits,\n            off.runs_scored,\n            off.rbi,\n            off.home_runs,\n            CASE WHEN off.at_bats > 0\n                THEN 1.0 * off.hits / off.at_bats\n                ELSE 0\n            END AS batting_average,\n            core.events_played AS defensive_games,\n            COALESCE(def.putouts, 0)  AS putouts,\n            COALESCE(def.assists, 0)  AS assists,\n            COALESCE(def.errors, 0)   AS errors,\n            CASE\n                WHEN (COALESCE(def.putouts,0) + COALESCE(def.assists,0) + COALESCE(def.errors,0)) > 0\n                THEN 1.0 * (COALESCE(def.putouts,0) + COALESCE(def.assists,0))\n                    / (COALESCE(def.putouts,0) + COALESCE(def.assists,0) + COALESCE(def.errors,0))\n                ELSE 0\n            END AS fielding_percentage\n            FROM persons p\n            JOIN display_names dn\n            ON dn.entity_id = p.id\n            AND dn.entity_type = 'persons'\n            AND NULLIF(TRIM(dn.full_name), '') IS NOT NULL\n            JOIN (\n            SELECT s.stat_holder_id AS player_id,\n                    SUM(bos.at_bats)       AS at_bats,\n                    SUM(bos.hits)          AS hits,\n                    SUM(bos.runs_scored)   AS runs_scored,\n                    SUM(bos.rbi)           AS rbi,\n                    SUM(bos.home_runs)     AS home_runs\n            FROM stats s\n            JOIN baseball_offensive_stats bos\n                ON bos.id = s.stat_repository_id\n            WHERE s.stat_holder_type = 'persons'\n                AND s.stat_repository_type = 'baseball_offensive_stats'\n                AND s.context = 'season-regular'\n            GROUP BY s.stat_holder_id\n            ) off ON off.player_id = p.id\n            JOIN (\n            SELECT s.stat_holder_id AS player_id,\n                    SUM(cps.events_played) AS events_played\n            FROM stats s\n            JOIN core_person_stats cps\n                ON cps.id = s.stat_repository_id\n            WHERE s.stat_holder_type = 'persons'\n                AND s.stat_repository_type = 'core_person_stats'\n                AND s.context = 'season-regular'\n            GROUP BY s.stat_holder_id\n            ) core ON core.player_id = p.id\n            LEFT JOIN (\n            SELECT s.stat_holder_id AS player_id,\n                    SUM(bds.putouts)  AS putouts,\n                    SUM(bds.assists)  AS assists,\n                    SUM(bds.errors)   AS errors\n            FROM stats s\n            JOIN baseball_defensive_stats bds\n                ON bds.id = s.stat_repository_id\n            WHERE s.stat_holder_type = 'persons'\n                AND s.stat_repository_type = 'baseball_defensive_stats'\n                AND s.context = 'season-regular'\n            GROUP BY s.stat_holder_id\n            ) def ON def.player_id = p.id\n            WHERE core.events_played >= 10\n            AND off.at_bats >= 50\n            GROUP BY\n            p.id, core.events_played,\n            off.at_bats, off.hits, off.runs_scored, off.rbi, off.home_runs,\n            def.putouts, def.assists, def.errors\n            ORDER BY batting_average DESC, games_played DESC;\n        \"\"\")\n        expected_results = cur.fetchall()\n        \n        if len(actual_results) != len(expected_results):\n            print(f\"❌ baseball_player_analysis table has {len(actual_results)} records, expected {len(expected_results)}\")\n            return False\n            \n        mismatches = 0\n        for i, (actual, expected) in enumerate(zip(actual_results, expected_results)):\n            if not rows_match(actual, expected):\n                if mismatches < 5:  # Only show first 5 mismatches\n                    print(f\"❌ Player analysis row {i+1} mismatch: expected {expected}, got {actual}\")\n                mismatches += 1\n                \n        if mismatches > 0:\n            print(f\"❌ Total player analysis mismatches: {mismatches}\")\n            return False\n            \n        print(f\"✅ baseball_player_analysis table created and populated correctly ({len(actual_results)} players)\")\n        return True\n\ndef main():\n    \"\"\"Main verification function.\"\"\"\n    print(\"=\" * 70)\n    print(\"PostgreSQL Sports Task 1 Verification: Baseball Player Analysis\")\n    print(\"=\" * 70)\n    \n    # Get connection parameters\n    conn_params = get_connection_params()\n    \n    if not conn_params[\"database\"]:\n        print(\"❌ No database specified\")\n        sys.exit(1)\n    \n    try:\n        # Connect to database\n        conn = psycopg2.connect(**conn_params)\n        \n        # Verify results\n        success = verify_baseball_player_analysis_table(conn)\n        \n        conn.close()\n        \n        if success:\n            print(\"\\n🎉 Task verification: PASS\")\n            sys.exit(0)\n        else:\n            print(\"\\n❌ Task verification: FAIL\")\n            sys.exit(1)\n            \n    except psycopg2.Error as e:\n        print(f\"❌ Database error: {e}\")\n        sys.exit(1)\n    except Exception as e:\n        print(f\"❌ Verification error: {e}\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()"
}