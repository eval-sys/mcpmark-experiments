{
  "task_id": "linting_ci_workflow",
  "task_name": "Linting Ci Workflow",
  "category_id": "mcpmark-cicd",
  "category_name": "MCPMark CI/CD",
  "description": "Set up ESLint workflow for code quality enforcement on all pull requests with proper CI integration.",
  "author": "Zijian Wu",
  "created_at": "2025-08-15",
  "difficulty": "L3",
  "tags": [
    "ci/cd automation",
    "pr workflows"
  ],
  "mcp": [
    "github"
  ],
  "meta_data": {
    "stateType": "url",
    "stateContent": null,
    "stateUrl": "https://github.com/mcpmark-source/mcpmark-cicd",
    "stateOriginalUrl": null
  },
  "instruction": "I need you to set up a proper linting workflow for our CI pipeline to ensure code quality standards are enforced on all pull requests. Here's what you need to do:\n\n**Step 1: Create Linting Configuration Branch**\nCreate a new branch called 'ci/add-eslint-workflow' from the main branch.\n\n**Step 2: Create ESLint Configuration**\nOn the new branch, create the file `.eslintrc.json` in the repository root with:\n```json\n{\n  \"env\": {\n    \"browser\": true,\n    \"es2021\": true,\n    \"node\": true\n  },\n  \"extends\": [\n    \"eslint:recommended\"\n  ],\n  \"parserOptions\": {\n    \"ecmaVersion\": 12,\n    \"sourceType\": \"module\"\n  },\n  \"rules\": {\n    \"no-unused-vars\": \"error\",\n    \"no-console\": \"warn\",\n    \"semi\": [\"error\", \"always\"],\n    \"quotes\": [\"error\", \"single\"]\n  },\n  \"ignorePatterns\": [\"node_modules/\", \"dist/\", \"build/\"]\n}\n```\n\n**Step 3: Create GitHub Actions Linting Workflow**\nCreate the file `.github/workflows/lint.yml` with:\n- Workflow name: \"Code Linting\"\n- Triggers on: push to main, pull_request events\n- Uses ubuntu-latest runner\n- Sets up Node.js version 18 using actions/setup-node\n- Installs dependencies with npm ci\n- Installs ESLint globally\n- Runs ESLint on all JavaScript files in src/ directories\n- Fails the workflow if linting errors are found\n\n**Step 4: Create a File That Will Fail Linting**\nCreate the file `src/example.js` with intentional linting violations that will cause the CI check to fail.\n\n**Step 5: Create Pull Request**\nCommit all the changes (ESLint config, workflow file, and example file with linting errors) in a single commit, then create a pull request from 'ci/add-eslint-workflow' to 'main' with:\n- Title: \"Add ESLint workflow for code quality enforcement\"\n- Body must include:\n  - A \"## Summary\" heading describing the linting setup\n  - A \"## Changes\" heading listing the files added\n  - A \"## Testing\" heading explaining how to test the workflow\n  - Mention that the PR intentionally includes linting errors to demonstrate the workflow\n\n**Step 6: Fix Linting Errors and Update PR**\nFix the linting errors in `src/example.js` and commit the changes in a single commit to update the PR so that the CI check passes.\n\n",
  "verify": "import sys\nimport os\nimport requests\nfrom typing import Dict, List, Optional, Tuple\nimport base64\nfrom dotenv import load_dotenv\nimport time\nimport json\n\n\ndef _get_github_api(\n    endpoint: str, headers: Dict[str, str], org: str, repo: str = \"claude-code\"\n) -> Tuple[bool, Optional[Dict]]:\n    \"\"\"Make a GET request to GitHub API and return (success, response).\"\"\"\n    url = f\"https://api.github.com/repos/{org}/{repo}/{endpoint}\"\n\n    try:\n        response = requests.get(url, headers=headers)\n        if response.status_code == 200:\n            return True, response.json()\n        elif response.status_code == 404:\n            return False, None\n        else:\n            print(f\"API error for {endpoint}: {response.status_code}\", file=sys.stderr)\n            return False, None\n    except Exception as e:\n        print(f\"Exception for {endpoint}: {e}\", file=sys.stderr)\n        return False, None\n\n\ndef _check_branch_exists(\n    branch_name: str, headers: Dict[str, str], org: str, repo: str = \"mcpmark-cicd\"\n) -> bool:\n    \"\"\"Verify that a branch exists in the repository.\"\"\"\n    success, _ = _get_github_api(f\"branches/{branch_name}\", headers, org, repo)\n    return success\n\n\ndef _get_file_content(\n    file_path: str,\n    headers: Dict[str, str],\n    org: str,\n    repo: str = \"claude-code\",\n    ref: str = \"main\",\n) -> Optional[str]:\n    \"\"\"Get the content of a file from the repository.\"\"\"\n    success, result = _get_github_api(\n        f\"contents/{file_path}?ref={ref}\", headers, org, repo\n    )\n    if not success or not result:\n        return None\n\n    try:\n        content = base64.b64decode(result.get(\"content\", \"\")).decode(\"utf-8\")\n        return content\n    except Exception as e:\n        print(f\"Content decode error for {file_path}: {e}\", file=sys.stderr)\n        return None\n\n\ndef _find_pr_by_title_keyword(\n    keyword: str, headers: Dict[str, str], org: str, repo: str = \"mcpmark-cicd\"\n) -> Optional[Dict]:\n    \"\"\"Find a PR by title keyword and return the PR data.\"\"\"\n    for state in [\"open\", \"closed\"]:\n        success, prs = _get_github_api(\n            f\"pulls?state={state}&per_page=100\", headers, org, repo\n        )\n        if success and prs:\n            for pr in prs:\n                if keyword.lower() in pr.get(\"title\", \"\").lower():\n                    return pr\n    return None\n\n\ndef _get_workflow_runs_for_pr(\n    pr_number: int, headers: Dict[str, str], org: str, repo: str = \"mcpmark-cicd\"\n) -> List[Dict]:\n    \"\"\"Get workflow runs for a specific PR.\"\"\"\n    success, runs = _get_github_api(\n        \"actions/runs?event=pull_request&per_page=100\", headers, org, repo\n    )\n    if not success or not runs:\n        return []\n\n    pr_runs = []\n    for run in runs.get(\"workflow_runs\", []):\n        # Check if this run is associated with our PR\n        for pr in run.get(\"pull_requests\", []):\n            if pr.get(\"number\") == pr_number:\n                pr_runs.append(run)\n                break\n\n    return pr_runs\n\n\ndef _get_pr_commits(\n    pr_number: int, headers: Dict[str, str], org: str, repo: str = \"mcpmark-cicd\"\n) -> List[Dict]:\n    \"\"\"Get commits for a specific PR.\"\"\"\n    success, commits = _get_github_api(f\"pulls/{pr_number}/commits\", headers, org, repo)\n    if not success or not commits:\n        return []\n    return commits\n\n\ndef _get_workflow_runs_for_commit(\n    commit_sha: str, headers: Dict[str, str], org: str, repo: str = \"mcpmark-cicd\"\n) -> List[Dict]:\n    \"\"\"Get workflow runs for a specific commit.\"\"\"\n    success, runs = _get_github_api(\n        f\"actions/runs?head_sha={commit_sha}&per_page=100\", headers, org, repo\n    )\n    if not success or not runs:\n        return []\n    return runs.get(\"workflow_runs\", [])\n\n\ndef verify() -> bool:\n    \"\"\"\n    Programmatically verify that the ESLint CI workflow setup\n    meets the requirements described in description.md.\n    \"\"\"\n    # Configuration constants\n    BRANCH_NAME = \"ci/add-eslint-workflow\"\n    PR_KEYWORD = \"eslint workflow\"\n\n    # Expected files and their content checks\n    ESLINT_CONFIG_PATH = \".eslintrc.json\"\n    WORKFLOW_PATH = \".github/workflows/lint.yml\"\n    EXAMPLE_FILE_PATH = \"src/example.js\"\n\n    # Expected workflow content keywords\n    WORKFLOW_KEYWORDS = [\n        \"Code Linting\",\n        \"ubuntu-latest\",\n        \"actions/setup-node\",\n        \"npm ci\",\n        \"eslint\",\n        \"src/\",\n    ]\n\n    # Load environment variables from .mcp_env\n    load_dotenv(\".mcp_env\")\n\n    # Get GitHub token and org\n    github_token = os.environ.get(\"MCP_GITHUB_TOKEN\")\n    github_org = os.environ.get(\"GITHUB_EVAL_ORG\")\n\n    if not github_token:\n        print(\"Error: MCP_GITHUB_TOKEN environment variable not set\", file=sys.stderr)\n        return False\n\n    if not github_org:\n        print(\"Error: GITHUB_EVAL_ORG environment variable not set\", file=sys.stderr)\n        return False\n\n    headers = {\n        \"Authorization\": f\"Bearer {github_token}\",\n        \"Accept\": \"application/vnd.github.v3+json\",\n    }\n\n    # Run verification checks\n    print(\"Verifying ESLint CI workflow setup...\")\n\n    # 1. Check that branch exists\n    print(\"1. Verifying CI branch exists...\")\n    if not _check_branch_exists(BRANCH_NAME, headers, github_org):\n        print(f\"Error: Branch '{BRANCH_NAME}' not found\", file=sys.stderr)\n        return False\n    print(\"✓ CI branch created\")\n\n    # 2. Check ESLint configuration file\n    print(\"2. Verifying .eslintrc.json...\")\n    eslint_content = _get_file_content(\n        ESLINT_CONFIG_PATH, headers, github_org, \"mcpmark-cicd\", BRANCH_NAME\n    )\n    if not eslint_content:\n        print(\"Error: .eslintrc.json not found\", file=sys.stderr)\n        return False\n\n    # Validate ESLint config is valid JSON and contains required rules\n    try:\n        eslint_config = json.loads(eslint_content)\n        rules = eslint_config.get(\"rules\", {})\n\n        required_rules = [\"no-unused-vars\", \"semi\", \"quotes\"]\n        missing_rules = [rule for rule in required_rules if rule not in rules]\n        if missing_rules:\n            print(\n                f\"Error: .eslintrc.json missing rules: {missing_rules}\", file=sys.stderr\n            )\n            return False\n\n    except json.JSONDecodeError:\n        print(\"Error: .eslintrc.json is not valid JSON\", file=sys.stderr)\n        return False\n\n    print(\"✓ ESLint configuration created with proper rules\")\n\n    # 3. Check GitHub Actions workflow file\n    print(\"3. Verifying .github/workflows/lint.yml...\")\n    workflow_content = _get_file_content(\n        WORKFLOW_PATH, headers, github_org, \"mcpmark-cicd\", BRANCH_NAME\n    )\n    if not workflow_content:\n        print(\"Error: .github/workflows/lint.yml not found\", file=sys.stderr)\n        return False\n\n    # Check workflow contains required keywords\n    missing_keywords = [kw for kw in WORKFLOW_KEYWORDS if kw not in workflow_content]\n    if missing_keywords:\n        print(f\"Error: Workflow missing keywords: {missing_keywords}\", file=sys.stderr)\n        return False\n\n    # Check trigger configuration\n    if \"pull_request\" not in workflow_content or \"push\" not in workflow_content:\n        print(\"Error: Workflow missing proper triggers\", file=sys.stderr)\n        return False\n\n    print(\"✓ GitHub Actions workflow created with proper configuration\")\n\n    # 4. Check example file with linting errors initially exists\n    print(\"4. Verifying src/example.js...\")\n    example_content = _get_file_content(\n        EXAMPLE_FILE_PATH, headers, github_org, \"mcpmark-cicd\", BRANCH_NAME\n    )\n    if not example_content:\n        print(\"Error: src/example.js not found\", file=sys.stderr)\n        return False\n\n    print(\"✓ Example file created\")\n\n    # 5. Find and verify the linting PR\n    print(\"5. Verifying linting pull request...\")\n    lint_pr = _find_pr_by_title_keyword(PR_KEYWORD, headers, github_org)\n    if not lint_pr:\n        # Try alternative keywords\n        lint_pr = _find_pr_by_title_keyword(\"eslint\", headers, github_org)\n\n    if not lint_pr:\n        print(\"Error: Linting PR not found\", file=sys.stderr)\n        return False\n\n    pr_body = lint_pr.get(\"body\", \"\")\n    pr_number = lint_pr.get(\"number\")\n\n    # Check PR body sections\n    required_sections = [\"## Summary\", \"## Changes\", \"## Testing\"]\n    missing_sections = [\n        section for section in required_sections if section not in pr_body\n    ]\n    if missing_sections:\n        print(\n            f\"Error: Linting PR missing sections: {missing_sections}\", file=sys.stderr\n        )\n        return False\n\n    print(\"✓ Linting PR created with proper structure\")\n\n    # 6. Check workflow runs and status changes\n    print(\"6. Verifying workflow execution and status...\")\n\n    # First get the commits for this PR\n    commits = _get_pr_commits(pr_number, headers, github_org)\n    if len(commits) != 2:\n        print(\n            f\"Error: Expected exactly 2 commits, found {len(commits)}\", file=sys.stderr\n        )\n        return False\n\n    print(\"✓ Found exactly 2 commits as expected\")\n\n    # Sort commits chronologically (oldest first)\n    commits.sort(key=lambda x: x.get(\"commit\", {}).get(\"author\", {}).get(\"date\", \"\"))\n\n    first_commit_sha = commits[0].get(\"sha\")\n    second_commit_sha = commits[1].get(\"sha\")\n\n    print(f\"First commit (should fail): {first_commit_sha[:7]}\")\n    print(f\"Second commit (should pass): {second_commit_sha[:7]}\")\n\n    # Wait for workflows on both commits to complete\n    print(\"Waiting for workflow completion on first commit...\")\n    first_commit_runs = []\n    second_commit_runs = []\n\n    start_time = time.time()\n    timeout = 120\n    no_workflow_check_count = 0\n\n    while time.time() - start_time < timeout:\n        first_commit_runs = _get_workflow_runs_for_commit(\n            first_commit_sha, headers, github_org\n        )\n        second_commit_runs = _get_workflow_runs_for_commit(\n            second_commit_sha, headers, github_org\n        )\n\n        # Check if any workflows exist\n        if not first_commit_runs and not second_commit_runs:\n            no_workflow_check_count += 1\n            if no_workflow_check_count == 1:\n                print(\n                    \"No workflow runs found yet, waiting 5 seconds and checking once more...\"\n                )\n                time.sleep(5)\n                continue\n            elif no_workflow_check_count >= 2:\n                print(\n                    \"⚠️ No workflow runs detected after 2 checks. Workflows may not have been triggered.\"\n                )\n                print(\"   Continuing with verification...\")\n                break\n\n        # Check if workflows are completed\n        first_completed = any(\n            run.get(\"status\") == \"completed\" for run in first_commit_runs\n        )\n        second_completed = any(\n            run.get(\"status\") == \"completed\" for run in second_commit_runs\n        )\n\n        if first_completed and second_completed:\n            break\n\n        print(\"Waiting for workflows to complete...\")\n        time.sleep(10)\n\n    # Verify first commit workflow failed\n    first_commit_status = None\n    for run in first_commit_runs:\n        if run.get(\"status\") == \"completed\":\n            conclusion = run.get(\"conclusion\")\n            if conclusion in [\"failure\", \"cancelled\"]:\n                first_commit_status = \"failed\"\n                print(\"✓ First commit workflow failed as expected\")\n                break\n            elif conclusion == \"success\":\n                first_commit_status = \"passed\"\n                break\n\n    if first_commit_status != \"failed\":\n        print(\n            \"Error: First commit workflow should have failed due to linting errors\",\n            file=sys.stderr,\n        )\n        return False\n\n    # Verify second commit workflow succeeded\n    second_commit_status = None\n    for run in second_commit_runs:\n        if run.get(\"status\") == \"completed\":\n            conclusion = run.get(\"conclusion\")\n            if conclusion == \"success\":\n                second_commit_status = \"passed\"\n                print(\"✓ Second commit workflow passed as expected\")\n                break\n            elif conclusion in [\"failure\", \"cancelled\"]:\n                second_commit_status = \"failed\"\n                break\n\n    if second_commit_status != \"passed\":\n        print(\n            \"Error: Second commit workflow should have passed after fixing linting errors\",\n            file=sys.stderr,\n        )\n        return False\n\n    print(\n        \"✓ Workflow status sequence verified: first commit failed → second commit passed\"\n    )\n\n    # 7. Verify the final state shows clean code\n    print(\"7. Verifying final file state...\")\n    final_example_content = _get_file_content(\n        EXAMPLE_FILE_PATH, headers, github_org, \"mcpmark-cicd\", BRANCH_NAME\n    )\n\n    if final_example_content:\n        # Check that obvious linting errors are fixed\n        if (\n            \"unusedVariable\" in final_example_content\n            or 'console.log(\"Hello World\")' in final_example_content\n        ):\n            print(\n                \"Warning: Example file may still contain linting errors\",\n                file=sys.stderr,\n            )\n        else:\n            print(\"✓ Linting errors appear to be fixed\")\n\n    print(\"\\n✅ All verification checks passed!\")\n    print(\"ESLint CI workflow setup completed successfully:\")\n    print(f\"  - Linting PR #{pr_number}\")\n    print(f\"  - Branch: {BRANCH_NAME}\")\n    print(\n        \"  - Files created: .eslintrc.json, .github/workflows/lint.yml, src/example.js\"\n    )\n    print(\"  - Workflow configured for pull_request and push triggers\")\n    print(\n        f\"  - Total workflow runs found: {len(first_commit_runs) + len(second_commit_runs)}\"\n    )\n    print(\n        f\"  - First commit runs: {len(first_commit_runs)}, Second commit runs: {len(second_commit_runs)}\"\n    )\n\n    return True\n\n\nif __name__ == \"__main__\":\n    success = verify()\n    sys.exit(0 if success else 1)\n"
}