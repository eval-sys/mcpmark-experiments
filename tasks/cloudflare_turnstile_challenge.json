{
  "task_id": "cloudflare_turnstile_challenge",
  "task_name": "Cloudflare Turnstile Challenge",
  "category_id": "eval_web",
  "category_name": "Eval Web",
  "description": "Navigate websites with Cloudflare Turnstile protection, handle security challenges, bypass bot detection mechanisms, and successfully access protected content using automated browser interactions.",
  "author": "Xinyuan Zhang",
  "created_at": "2025-07-27",
  "difficulty": "L3",
  "tags": [
    "user interaction"
  ],
  "mcp": [
    "playwright"
  ],
  "meta_data": {
    "stateType": "video",
    "stateContent": null,
    "stateUrl": "https://storage.mcpmark.ai/tasks_state/playwright_video/mcpmark-eval-website.mp4",
    "stateOriginalUrl": "https://mcp-eval-website.vercel.app/auth/turnstile"
  },
  "instruction": "# Cloudflare Turnstile Authentication Challenge Task\n\nUse Playwright MCP tools to complete Cloudflare Turnstile authentication challenge.\n\n## Requirements:\n\n1. Navigate to https://eval-web.mcpmark.ai/auth/turnstile\n2. Fill in the authentication form with provided test credentials:\n   - Username: \"testuser\"\n   - Password: \"password123\"\n3. Wait for the Cloudflare Turnstile challenge widget to load completely\n4. Interact with the Turnstile challenge widget to complete the authentication (if needed)\n5. Wait for successful challenge completion (widget shows success state with checkmark)\n6. Submit the form by clicking the \"Sign In\" button\n7. Wait for and capture any success message or confirmation that appears\n8. Output the success capture in step 7\n\n## Notes:\n\n- Use the provided test credentials: testuser / password123\n- Page shows success message inline, does not redirect to separate success page\n- Wait for all UI state changes before proceeding to next step\n- Verify both Turnstile completion and form submission success\n",
  "verify": "#!/usr/bin/env python3\n\"\"\"\nSimplified verification script for Playwright Cloudflare Turnstile authentication task.\n\nThis script only verifies that the model successfully reported capturing the expected\nsuccess message by checking the last assistant message in messages.json.\n\"\"\"\n\nimport sys\nimport json\nimport os\n\n# Expected success message that agent should capture\nEXPECTED_SUCCESS_MESSAGE = \"Authentication successful! Security challenge verified.\"\n\n\ndef get_model_response():\n    \"\"\"\n    Get the model's response from the MCP_MESSAGES environment variable.\n    Returns the last assistant message text.\n    \"\"\"\n    messages_path = os.getenv(\"MCP_MESSAGES\")\n    print(f\"MCP_MESSAGES: {messages_path}\")\n    if not messages_path:\n        print(\"Warning: MCP_MESSAGES environment variable not set\", file=sys.stderr)\n        return None\n    \n    try:\n        with open(messages_path, 'r') as f:\n            messages = json.load(f)\n        \n        # Find the last assistant message with status completed\n        for message in reversed(messages):\n            if (message.get('role') == 'assistant' and \n                message.get('status') == 'completed' and \n                message.get('type') == 'message'):\n                content = message.get('content', [])\n                # Extract text from content\n                if isinstance(content, list):\n                    for item in content:\n                        if isinstance(item, dict) and item.get('type') in ['text', 'output_text']:\n                            return item.get('text', '')\n                elif isinstance(content, str):\n                    return content\n        \n        print(\"Warning: No completed assistant message found\", file=sys.stderr)\n        return None\n    except Exception as e:\n        print(f\"Error reading messages file: {str(e)}\", file=sys.stderr)\n        return None\n\n\ndef verify():\n    \"\"\"\n    Verifies that the model's last response contains the expected success message.\n    \"\"\"\n    # Get model's response from MCP_MESSAGES\n    model_response = get_model_response()\n    \n    if not model_response:\n        print(\"No model response found\", file=sys.stderr)\n        return False\n    \n    print(f\"\\nModel response (first 500 chars): {model_response[:500]}...\", file=sys.stderr)\n    \n    # Check if the expected success message is in the model's response\n    if EXPECTED_SUCCESS_MESSAGE in model_response:\n        print(f\"\\n✓ Success message found: '{EXPECTED_SUCCESS_MESSAGE}'\", file=sys.stderr)\n        return True\n    else:\n        print(f\"\\n✗ Success message NOT found: '{EXPECTED_SUCCESS_MESSAGE}'\", file=sys.stderr)\n        return False\n\n\ndef main():\n    \"\"\"\n    Executes the verification process and exits with a status code.\n    \"\"\"\n    result = verify()\n    sys.exit(0 if result else 1)\n\n\nif __name__ == \"__main__\":\n    main()\n"
}