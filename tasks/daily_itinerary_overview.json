{
  "task_id": "daily_itinerary_overview",
  "task_name": "Daily Itinerary Overview",
  "category_id": "japan_travel_planner",
  "category_name": "Japan Travel Planner",
  "description": "Create a comprehensive daily itinerary overview page to organize Japan travel plans with structured day-by-day activities.",
  "author": "Xiangyan Liu",
  "created_at": "2025-07-27",
  "difficulty": "L3",
  "tags": [
    "database manipulation",
    "data aggregation",
    "report generation",
    "visual formatting",
    "status tracking"
  ],
  "mcp": [
    "notion"
  ],
  "meta_data": {
    "stateType": "url",
    "stateContent": null,
    "stateUrl": "https://painted-tennis-ebc.notion.site/Japan-Travel-Planner-23181626b6d781c4b6bedb12786b5abe"
  },
  "instruction": "Create a comprehensive daily itinerary overview page to help organize my Japan travel plans. I need you to create a new page called 'Daily Itinerary Overview' as a child of the main Japan Travel Planner page.\n\n**Task Requirements:**\n1. Create a new page titled 'Daily Itinerary Overview' as a child page of the main Japan Travel Planner page\n2. Query the Travel Itinerary database to retrieve all activities\n3. Structure the page with the following specific format:\n   - Add a heading_1 block with text \"ðŸ“… Daily Itinerary Overview\"\n   - Add a heading_2 block with text \"ðŸ“Š Trip Summary\"\n   - Under Trip Summary, add a paragraph listing the total number of visited activities\n   - Create heading_2 blocks for \"ðŸŒ… Day 1\", \"ðŸŒ† Day 2\", and \"ðŸŒƒ Day 3\"\n   - Under each day heading, list the activities scheduled for that day in to do list\n   - Each activity (use To-do list) should show: Activity Name - City (if available), for example, \"Osaka Castle - Osaka\". Check it if it's visited.\n4. The summary paragraph must contain the exact text \"Total activities visited (from Day 1 to Day 3): [NUMBER]\" where [NUMBER] is the actual count.\n5. Ensure all headings use the exact emoji and text format specified above",
  "verify": "import sys\nimport re\nfrom notion_client import Client\nfrom tasks.utils import notion_utils\n\n\ndef verify_todo_database_correspondence(all_blocks, activities_by_day, _):\n    \"\"\"\n    Verify that to-do items in the overview page correspond exactly to database activities.\n    \"\"\"\n    # Extract to-do items organized by day from the overview page\n    todos_by_day = {\"Day 1\": [], \"Day 2\": [], \"Day 3\": []}\n    current_day = None\n    checked_todos_count = 0\n\n    for block in all_blocks:\n        block_type = block.get(\"type\")\n        block_text = notion_utils.get_block_plain_text(block)\n\n        # Track which day section we're in\n        if block_type == \"heading_2\":\n            if \"ðŸŒ… Day 1\" in block_text:\n                current_day = \"Day 1\"\n            elif \"ðŸŒ† Day 2\" in block_text:\n                current_day = \"Day 2\"\n            elif \"ðŸŒƒ Day 3\" in block_text:\n                current_day = \"Day 3\"\n            else:\n                current_day = None  # Reset for non-day headings\n\n        # Collect to-do items under day headings\n        elif block_type == \"to_do\" and current_day:\n            to_do_data = block.get(\"to_do\", {})\n            is_checked = to_do_data.get(\"checked\", False)\n\n            if is_checked:\n                checked_todos_count += 1\n\n            todos_by_day[current_day].append(\n                {\"text\": block_text, \"checked\": is_checked}\n            )\n\n    # Verify each day's activities match\n    for day in [\"Day 1\", \"Day 2\", \"Day 3\"]:\n        db_activities = activities_by_day[day]\n        page_todos = todos_by_day[day]\n\n        # Check if counts match\n        if len(db_activities) != len(page_todos):\n            print(\n                f\"Error: {day} activity count mismatch. Database has {len(db_activities)} activities, page has {len(page_todos)} to-dos.\",\n                file=sys.stderr,\n            )\n            return False\n\n        # Verify each database activity has corresponding to-do\n        for db_activity in db_activities:\n            expected_format = f\"{db_activity['name']}\"\n            if db_activity[\"city\"]:\n                expected_format += f\" - {db_activity['city']}\"\n\n            # Find matching to-do item\n            matching_todo = None\n            for todo in page_todos:\n                if (\n                    expected_format in todo[\"text\"]\n                    or db_activity[\"name\"] in todo[\"text\"]\n                ):\n                    matching_todo = todo\n                    break\n\n            if not matching_todo:\n                print(\n                    f\"Error: {day} - Database activity '{expected_format}' not found in to-do list.\",\n                    file=sys.stderr,\n                )\n                return False\n\n            # Verify checked status matches visited status\n            if db_activity[\"visited\"] != matching_todo[\"checked\"]:\n                status_desc = \"checked\" if db_activity[\"visited\"] else \"unchecked\"\n                actual_desc = \"checked\" if matching_todo[\"checked\"] else \"unchecked\"\n                print(\n                    f\"Error: {day} - Activity '{db_activity['name']}' should be {status_desc} but is {actual_desc}.\",\n                    file=sys.stderr,\n                )\n                return False\n\n    # Verify summary count matches checked to-dos\n    for block in all_blocks:\n        if block.get(\"type\") == \"paragraph\":\n            block_text = notion_utils.get_block_plain_text(block)\n            if \"Total activities visited (from Day 1 to Day 3): 8\" in block_text:\n                print(\n                    f\"Success: Daily Itinerary Overview page created with correct structure. All {checked_todos_count} visited activities match database.\"\n                )\n                return True\n\n    print(\n        f\"Error: Summary shows incorrect visited activity count. Expected: {checked_todos_count} (based on checked to-do items)\",\n        file=sys.stderr,\n    )\n    return False\n\n\ndef verify(notion: Client, main_id: str = None) -> bool:\n    \"\"\"\n    Verifies that the Daily Itinerary Overview page has been created correctly.\n    \"\"\"\n    # Find the main Japan Travel Planner page\n    page_id = None\n    if main_id:\n        found_id, object_type = notion_utils.find_page_or_database_by_id(\n            notion, main_id\n        )\n        if found_id and object_type == \"page\":\n            page_id = found_id\n\n    if not page_id:\n        page_id = notion_utils.find_page(notion, \"Japan Travel Planner\")\n    if not page_id:\n        print(\"Error: Main 'Japan Travel Planner' page not found.\", file=sys.stderr)\n        return False\n\n    # Find the Daily Itinerary Overview child page\n    overview_page_id = None\n    try:\n        # Get all child pages of the main page\n        response = notion.search(\n            query=\"Daily Itinerary Overview\",\n            filter={\"property\": \"object\", \"value\": \"page\"},\n        )\n\n        for result in response.get(\"results\", []):\n            # Check if this page is a child of the main page\n            parent = result.get(\"parent\", {})\n            if parent.get(\"type\") == \"page_id\" and parent.get(\"page_id\") == page_id:\n                overview_page_id = result[\"id\"]\n                break\n\n        if not overview_page_id:\n            # Alternative method: check page title directly\n            for result in response.get(\"results\", []):\n                title_list = (\n                    result.get(\"properties\", {}).get(\"title\", {}).get(\"title\", [])\n                )\n                for title_obj in title_list:\n                    if \"Daily Itinerary Overview\" in title_obj.get(\"plain_text\", \"\"):\n                        overview_page_id = result[\"id\"]\n                        break\n                if overview_page_id:\n                    break\n\n    except Exception as e:\n        print(\n            f\"Error searching for Daily Itinerary Overview page: {e}\", file=sys.stderr\n        )\n        return False\n\n    if not overview_page_id:\n        print(\n            \"Error: 'Daily Itinerary Overview' page not found as child of main page.\",\n            file=sys.stderr,\n        )\n        return False\n\n    # Get all blocks from the overview page\n    all_blocks = notion_utils.get_all_blocks_recursively(notion, overview_page_id)\n\n    # Required content to verify - must appear in this exact order\n    required_headings_sequence = [\n        (\"ðŸ“… Daily Itinerary Overview\", \"heading_1\"),\n        (\"ðŸ“Š Trip Summary\", \"heading_2\"),\n        (\"ðŸŒ… Day 1\", \"heading_2\"),\n        (\"ðŸŒ† Day 2\", \"heading_2\"),\n        (\"ðŸŒƒ Day 3\", \"heading_2\"),\n    ]\n\n    found_headings_in_order = []\n    found_summary = False\n    summary_has_correct_format = False\n    found_todo_items = False\n\n    # Check each block and track heading sequence\n    for block in all_blocks:\n        block_text = notion_utils.get_block_plain_text(block)\n        block_type = block.get(\"type\")\n\n        # Check for required headings in sequence\n        for heading_text, expected_type in required_headings_sequence:\n            if heading_text in block_text and block_type == expected_type:\n                found_headings_in_order.append((heading_text, expected_type))\n\n        # Check for trip summary paragraph\n        if (\n            block_type == \"paragraph\"\n            and \"Total activities visited (from Day 1 to Day 3):\" in block_text\n        ):\n            found_summary = True\n            # Check if the format is correct (contains a number)\n            if re.search(\n                r\"Total activities visited \\(from Day 1 to Day 3\\):\\s*\\d+\", block_text\n            ):\n                summary_has_correct_format = True\n\n        # Check for to-do list items (activities under day headings)\n        if block_type == \"to_do\":\n            found_todo_items = True\n            # Check if to-do items follow the format \"Activity Name - City\"\n            if \" - \" in block_text:\n                # Format appears to be correct (contains dash separator)\n                pass\n\n    # Verify all required headings are found in correct sequence\n    if len(found_headings_in_order) != len(required_headings_sequence):\n        missing_headings = []\n        for heading_text, heading_type in required_headings_sequence:\n            if (heading_text, heading_type) not in found_headings_in_order:\n                missing_headings.append(f\"{heading_text} ({heading_type})\")\n        print(f\"Error: Missing required headings: {missing_headings}\", file=sys.stderr)\n        return False\n\n    # Verify headings appear in correct order\n    for i, (found_heading, found_type) in enumerate(found_headings_in_order):\n        expected_heading, expected_type = required_headings_sequence[i]\n        if found_heading != expected_heading or found_type != expected_type:\n            print(\n                f\"Error: Headings not in correct order. Expected '{expected_heading}' ({expected_type}) at position {i + 1}, but found '{found_heading}' ({found_type})\",\n                file=sys.stderr,\n            )\n            return False\n\n    # Verify trip summary exists and has correct format\n    if not found_summary:\n        print(\n            \"Error: Trip summary paragraph with 'Total activities visite' not found.\",\n            file=sys.stderr,\n        )\n        return False\n\n    if not summary_has_correct_format:\n        print(\n            \"Error: Trip summary does not have correct format 'Total activities visited: [NUMBER]'.\",\n            file=sys.stderr,\n        )\n        return False\n\n    # Verify to-do list items exist (activities should be in to-do format)\n    if not found_todo_items:\n        print(\n            \"Error: No to-do list items found. Activities should be listed as to-do items under day headings.\",\n            file=sys.stderr,\n        )\n        return False\n\n    # Additional verification: Check if Travel Itinerary database exists and has data\n    try:\n        itinerary_db_id = notion_utils.find_database_in_block(\n            notion, page_id, \"Travel Itinerary\"\n        )\n        if not itinerary_db_id:\n            itinerary_db_id = notion_utils.find_database(notion, \"Travel Itinerary\")\n\n        if itinerary_db_id:\n            # Query the database to get all activities\n            db_response = notion.databases.query(database_id=itinerary_db_id)\n            db_activities = db_response.get(\"results\", [])\n\n            # Organize database activities by day\n            activities_by_day = {\"Day 1\": [], \"Day 2\": [], \"Day 3\": []}\n            visited_count = 0\n\n            for result in db_activities:\n                properties = result.get(\"properties\", {})\n\n                # Extract activity info\n                activity_info = {\"name\": \"\", \"city\": \"\", \"visited\": False, \"day\": None}\n\n                for prop_name, prop_value in properties.items():\n                    prop_type = prop_value.get(\"type\")\n\n                    # Get activity name (usually from title property)\n                    if prop_type == \"title\" and prop_value.get(\"title\"):\n                        activity_info[\"name\"] = prop_value[\"title\"][0][\"plain_text\"]\n\n                    # Get city info\n                    elif \"city\" in prop_name.lower() and prop_type in [\n                        \"rich_text\",\n                        \"select\",\n                    ]:\n                        if prop_type == \"rich_text\" and prop_value.get(\"rich_text\"):\n                            activity_info[\"city\"] = prop_value[\"rich_text\"][0][\n                                \"plain_text\"\n                            ]\n                        elif prop_type == \"select\" and prop_value.get(\"select\"):\n                            activity_info[\"city\"] = prop_value[\"select\"][\"name\"]\n\n                    # Get visited status\n                    elif prop_type == \"checkbox\":\n                        if prop_value.get(\"checkbox\"):\n                            activity_info[\"visited\"] = True\n                            visited_count += 1\n\n                    # Get day info\n                    elif \"day\" in prop_name.lower() and prop_type in [\n                        \"select\",\n                        \"rich_text\",\n                    ]:\n                        if prop_type == \"select\" and prop_value.get(\"select\"):\n                            day_value = prop_value[\"select\"][\"name\"]\n                            if day_value in activities_by_day:\n                                activity_info[\"day\"] = day_value\n                        elif prop_type == \"rich_text\" and prop_value.get(\"rich_text\"):\n                            day_value = prop_value[\"rich_text\"][0][\"plain_text\"]\n                            if day_value in activities_by_day:\n                                activity_info[\"day\"] = day_value\n\n                # Add to appropriate day if day is specified\n                if activity_info[\"day\"] and activity_info[\"name\"]:\n                    activities_by_day[activity_info[\"day\"]].append(activity_info)\n\n            # Now verify to-do items match database activities\n            return verify_todo_database_correspondence(\n                all_blocks, activities_by_day, visited_count\n            )\n        else:\n            print(\n                \"Warning: Travel Itinerary database not found, using to-do items for count verification.\"\n            )\n            # Count checked to-do items in the overview page even without database\n            checked_todos_count = 0\n            for block in all_blocks:\n                if block.get(\"type\") == \"to_do\":\n                    to_do_data = block.get(\"to_do\", {})\n                    if to_do_data.get(\"checked\", False):\n                        checked_todos_count += 1\n\n            # Verify the summary shows the correct visited count based on checked to-dos\n            for block in all_blocks:\n                if block.get(\"type\") == \"paragraph\":\n                    block_text = notion_utils.get_block_plain_text(block)\n                    if f\"Total activities visited: {checked_todos_count}\" in block_text:\n                        print(\n                            f\"Success: Daily Itinerary Overview page created with correct structure and {checked_todos_count} visited activities.\"\n                        )\n                        return True\n\n            print(\n                f\"Error: Summary shows incorrect visited activity count. Expected: {checked_todos_count} (based on checked to-do items)\",\n                file=sys.stderr,\n            )\n            return False\n\n    except Exception as e:\n        print(f\"Warning: Could not verify activity count: {e}\")\n        print(\"Success: Daily Itinerary Overview page created with correct structure.\")\n        return True\n\n\ndef main():\n    \"\"\"\n    Executes the verification process and exits with a status code.\n    \"\"\"\n    notion = notion_utils.get_notion_client()\n    main_id = sys.argv[1] if len(sys.argv) > 1 else None\n    if verify(notion, main_id):\n        sys.exit(0)\n    else:\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()\n"
}