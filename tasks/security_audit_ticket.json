{
  "task_id": "security_audit_ticket",
  "task_name": "Security Audit Ticket",
  "category_id": "it_trouble_shooting_hub",
  "category_name": "IT Trouble Shooting Hub",
  "description": "Create a comprehensive security audit ticket based on expired inventory items and security FAQ entries.",
  "author": "Zijian Wu",
  "created_at": "2025-07-27",
  "difficulty": "L3",
  "tags": [
    "conditional filtering",
    "database manipulation",
    "data aggregation",
    "report generation"
  ],
  "mcp": [
    "notion"
  ],
  "metadata": {
    "ori_template_url": "https://painted-tennis-ebc.notion.site/It-Trouble-Shooting-Hub-23e81626b6d78020aba7eb65ae1cc2d5",
    "gt_page_url": "https://www.notion.so/It-Trouble-Shooting-Hub-Security-Audit-Ticket-2442b7e8cebd81cc9b05d210e7e6499c"
  },
  "instruction": "Please help me create a comprehensive security audit ticket based on the data already stored in the **IT Trouble Shooting Hub** page.\n\nYour automation should:\n\n1. In the **IT Inventory** database, find every item whose **Expiration date** is **before 2023-07-15**.\n2. In the **IT FAQs** database, look up any FAQ entries that have the **\"Security\"** tag.\n3. **Create a new page** inside the **IT Requests** database with **exact title**:\n   \n   `Quarterly Security Audit - Expired Assets Review`\n4. Set its **Priority** property to **High**.\n5. Set its **Due** property to **2023-06-22**.\n6. In the page body, add a bullet-list block that enumerates **each expired inventory item**. **Each bullet item must follow this exact text format (including the dashes):**\n\n   `<Serial> - <Tag> - <Recommendation>`\n\n   • `<Serial>` is the item’s Serial value.\n   • `<Tag>` is the first tag assigned to the inventory item (e.g., \"Laptop\").\n   • `<Recommendation>` is a brief action you suggest based on the security FAQ entry (any text is acceptable).\n\n   Example (do **not** copy):\n   `ABC123 - Laptop - Renew warranty and enable disk encryption`",
  "verify": "import sys\nfrom notion_client import Client\nfrom tasks.utils import notion_utils\nimport re\n\n\ndef _get_title_text(page_properties: dict) -> str:\n    \"\"\"Extract the plain text of the first title property from a page.\"\"\"\n    for prop in page_properties.values():\n        if prop.get(\"type\") == \"title\":\n            title_rich = prop.get(\"title\", [])\n            if title_rich:\n                return title_rich[0].get(\"plain_text\")\n    return \"\"\n\n\ndef verify(notion: Client, main_id: str | None = None) -> bool:\n    \"\"\"Verify that the automation created the expected security audit ticket.\"\"\"\n\n    # ----------------------------------------------------------------------------------\n    # Locate the root page (IT Trouble Shooting Hub) either via main_id or by title.\n    # ----------------------------------------------------------------------------------\n    root_page_id = None\n    if main_id:\n        found_id, object_type = notion_utils.find_page_or_database_by_id(\n            notion, main_id\n        )\n        if found_id and object_type == \"page\":\n            root_page_id = found_id\n\n    if not root_page_id:\n        root_page_id = notion_utils.find_page(notion, \"IT Trouble Shooting Hub\")\n    if not root_page_id:\n        print(\n            \"Error: Could not locate the 'IT Trouble Shooting Hub' page.\",\n            file=sys.stderr,\n        )\n        return False\n\n    # ----------------------------------------------------------------------------------\n    # Find the IT Requests database under the root page.\n    # ----------------------------------------------------------------------------------\n    requests_db_id = notion_utils.find_database_in_block(\n        notion, root_page_id, \"IT Requests\"\n    )\n    if not requests_db_id:\n        print(\n            \"Error: 'IT Requests' database not found in the workspace.\", file=sys.stderr\n        )\n        return False\n\n    # ----------------------------------------------------------------------------------\n    # Search for the expected ticket inside the IT Requests database.\n    # ----------------------------------------------------------------------------------\n    expected_title = \"Quarterly Security Audit - Expired Assets Review\"\n    results = notion.databases.query(database_id=requests_db_id).get(\"results\", [])\n\n    target_page = None\n    for page in results:\n        title_text = _get_title_text(page.get(\"properties\", {}))\n        if title_text == expected_title:\n            target_page = page\n            break\n\n    if not target_page:\n        print(\n            f\"Failure: Ticket with title '{expected_title}' was not found in 'IT Requests' database.\",\n            file=sys.stderr,\n        )\n        return False\n\n    props = target_page.get(\"properties\", {})\n\n    # ----------------------------------------------------------------------------------\n    # Validate Priority property.\n    # ----------------------------------------------------------------------------------\n    priority_value = props.get(\"Priority\", {}).get(\"select\", {}).get(\"name\")\n    if priority_value != \"High\":\n        print(\n            f\"Failure: Expected Priority 'High', found '{priority_value}'.\",\n            file=sys.stderr,\n        )\n        return False\n\n    # ----------------------------------------------------------------------------------\n    # Validate Due date property.\n    # ----------------------------------------------------------------------------------\n    due_date_start = props.get(\"Due\", {}).get(\"date\", {}).get(\"start\")\n    expected_due_iso = \"2023-06-22\"\n    if not due_date_start or not due_date_start.startswith(expected_due_iso):\n        print(\n            f\"Failure: Expected Due date '{expected_due_iso}', found '{due_date_start}'.\",\n            file=sys.stderr,\n        )\n        return False\n\n    # ----------------------------------------------------------------------------------\n    # Validate the bulleted list contains the correct expired items in required format.\n    # ----------------------------------------------------------------------------------\n    page_id = target_page[\"id\"]\n    blocks = notion.blocks.children.list(block_id=page_id).get(\"results\", [])\n    bullet_texts = [\n        notion_utils.get_block_plain_text(b)\n        for b in blocks\n        if b.get(\"type\") == \"bulleted_list_item\"\n    ]\n\n    expected_items = {\n        \"192371-8910/54\": \"Computer Accessory\",\n        \"32x11PIP\": \"Computer Accessory\",\n        \"76x87PCY\": \"Laptop\",\n        \"36x10PIQ\": \"Computer Accessory\",\n        \"65XYQ/GB\": \"License\",\n    }\n\n    if len(bullet_texts) != len(expected_items):\n        print(\n            f\"Failure: Expected {len(expected_items)} bullet items, found {len(bullet_texts)}.\",\n            file=sys.stderr,\n        )\n        return False\n\n    bullet_pattern = re.compile(r\"^\\s*(.*?)\\s+-\\s+(.*?)\\s+-\\s+(.+?)\\s*$\")\n    matched = set()\n    for text in bullet_texts:\n        m = bullet_pattern.match(text)\n        if not m:\n            print(\n                f\"Failure: Bullet item '{text}' does not follow '<Serial> - <Tag> - <Recommendation>' format.\",\n                file=sys.stderr,\n            )\n            return False\n        serial, tag, advice = m.group(1).strip(), m.group(2).strip(), m.group(3).strip()\n        if serial not in expected_items:\n            print(\n                f\"Failure: Unexpected Serial '{serial}' found in bullet list.\",\n                file=sys.stderr,\n            )\n            return False\n        if expected_items[serial] != tag:\n            print(\n                f\"Failure: Serial '{serial}' expected tag '{expected_items[serial]}', found '{tag}'.\",\n                file=sys.stderr,\n            )\n            return False\n        if not advice:\n            print(\n                f\"Failure: Bullet item for Serial '{serial}' is missing a recommendation/advice.\",\n                file=sys.stderr,\n            )\n            return False\n        matched.add(serial)\n\n    if len(matched) != len(expected_items):\n        missing = set(expected_items.keys()) - matched\n        print(\n            f\"Failure: Missing bullet items for serials: {', '.join(missing)}.\",\n            file=sys.stderr,\n        )\n        return False\n\n    print(\"Success: All verification criteria satisfied.\")\n    return True\n\n\ndef main():\n    notion = notion_utils.get_notion_client()\n    main_id = sys.argv[1] if len(sys.argv) > 1 else None\n    if verify(notion, main_id):\n        sys.exit(0)\n    else:\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()\n",
  "model_results": {
    "k2": 0,
    "gpt-5": 0,
    "grok-4": 0,
    "gpt-4-1": 1,
    "gemini-2-5-flash": 0,
    "gemini-2-5-pro": 0,
    "gpt-5-mini": 0,
    "deepseek-chat": 1,
    "gpt-4-1-mini": 1,
    "claude-4-sonnet": 1,
    "gpt-5-nano": 0,
    "o3": 1
  }
}