{
  "task_id": "english_talent",
  "task_name": "English Talent",
  "category_id": "student_database",
  "category_name": "Student Database",
  "description": "Select qualified students with S/A recommendation grades and TOEFL scores ≥100 for English media operations recruitment opportunities.",
  "author": "Lingjun Chen",
  "created_at": "2025-08-10",
  "difficulty": "L3",
  "tags": [
    "data extraction",
    "cross-referencing",
    "pattern analysis"
  ],
  "mcp": [
    "filesystem"
  ],
  "meta_data": {
    "stateType": "text",
    "stateContent": "student_database/\n    ├── 20101250_Patricia_Jones/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20101701_Isabella_Davis/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20102572_Michael_Taylor/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20104233_Robert_Lopez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20104498_Sarah_Brown/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20104653_Sophia_Brown/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20104675_Michael_Gonzalez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20104846_Christopher_Brown/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20107487_Mia_Martin/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20108742_Sarah_Brown/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20109144_Emma_Thomas/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20109803_Oliver_Hernandez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20111634_Isabella_Thomas/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20112439_Christopher_Moore/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20113368_William_Wilson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20113603_Robert_Rodriguez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20114397_Isabella_Martin/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20114869_Ethan_Martin/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20115252_Mason_Johnson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20115632_Elizabeth_Anderson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20115753_Charlotte_Johnson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20115924_Michael_Lopez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20116232_Olivia_Lopez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20119528_Thomas_Brown/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20122427_Karen_Gonzalez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20122977_Evelyn_Miller/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20123376_Joseph_Johnson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20125451_Barbara_Brown/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20126203_Barbara_Davis/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20126394_Olivia_Williams/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20126471_Ethan_Taylor/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20127423_John_Williams/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20128249_Oliver_Smith/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20128879_Christopher_Taylor/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20129898_Jessica_Johnson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20131271_Olivia_Brown/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20131518_Sophia_Smith/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20132026_Isabella_Smith/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20132370_James_Brown/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20132669_Noah_Smith/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20133527_Mason_Jackson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20133697_Isabella_Smith/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20135821_Thomas_Wilson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20136681_Benjamin_Anderson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20136890_Benjamin_Brown/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20137514_Lucas_Anderson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20139234_Harper_Martinez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20139637_Noah_Johnson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20139647_Patricia_Lopez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20141421_Linda_Gonzalez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20142085_William_Anderson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20142383_Amelia_Brown/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20143406_Susan_Martin/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20143830_James_Garcia/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20146035_Christopher_Garcia/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20146277_William_Anderson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20146279_Christopher_Moore/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20147301_James_Jones/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20147789_James_Anderson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20148681_John_Hernandez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20148778_Susan_Anderson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20149712_Jessica_Rodriguez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20151012_Harper_Miller/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20153174_Benjamin_Jackson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20153412_Charlotte_Martin/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20153606_James_Anderson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20153687_Richard_Taylor/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20154518_John_Gonzalez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20154710_Benjamin_Rodriguez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20156469_Jennifer_Hernandez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20156522_Jennifer_Martinez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20156851_Noah_Anderson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20157943_Harper_Williams/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20158266_Sophia_Moore/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20158294_Sophia_Wilson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20158819_Sarah_Wilson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20159113_John_Rodriguez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20159695_James_Moore/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20161279_William_Moore/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20162253_Mason_Rodriguez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20162542_Mia_Anderson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20163356_Ava_Anderson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20164515_Patricia_Moore/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20164801_Noah_Rodriguez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20165511_Mary_Gonzalez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20166436_Christopher_Jackson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20166487_Barbara_Hernandez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20166564_Ava_Lopez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20166998_Ava_Lopez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20168311_Lucas_Jackson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20168491_Karen_Martinez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20169515_Thomas_Taylor/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20171050_Christopher_Rodriguez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20171406_Mary_Anderson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20171613_Ethan_Moore/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20172106_Isabella_Rodriguez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20173259_Michael_Anderson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20173492_Richard_Miller/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20173501_Mary_Smith/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20173517_Susan_Anderson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20174207_Richard_Wilson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20174369_Mary_Garcia/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20175314_William_Taylor/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20176169_Lucas_Smith/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20176947_Noah_Miller/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20177389_James_Smith/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20178687_Isabella_Anderson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20179461_William_Johnson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20179690_Linda_Thomas/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20181056_Sarah_Hernandez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20182020_Patricia_Taylor/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20182390_Ethan_Wilson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20183149_David_Smith/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20183219_Charlotte_Williams/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20184489_Jessica_Gonzalez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20186154_Charlotte_Smith/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20186510_James_Thomas/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20187107_David_Martinez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20187144_Mary_Jackson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20187892_Christopher_Taylor/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20187921_Mary_Jones/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20187967_Sarah_Davis/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20188937_James_Moore/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20189123_Mary_Martin/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20189192_Olivia_Jones/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20189268_Emma_Williams/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20189854_William_Taylor/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20191265_Joseph_Lopez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20192725_Robert_Martinez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20194054_Michael_Jones/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20194160_Benjamin_Jackson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20194164_Sarah_Jones/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20194525_John_Taylor/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20195164_Jennifer_Gonzalez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20195982_David_Jackson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20196776_William_Brown/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20196896_Olivia_Jones/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20196961_Joseph_Thomas/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20196998_Ethan_Wilson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20198548_Evelyn_Moore/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20199036_Benjamin_Hernandez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20199583_Mary_Brown/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20199735_Mason_Johnson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20199872_Sophia_Jackson/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20199980_James_Rodriguez/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20201385_John_Taylor/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20201800_John_Jones/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20202548_Robert_Miller/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    ├── 20203855_Mia_Miller/\n    │       ├── basic_info.txt\n    │       └── recommendation_letter.txt\n    └── 20204611_Sarah_Wilson/\n            ├── basic_info.txt\n            └── recommendation_letter.txt",
    "stateUrl": "https://storage.mcpmark.ai/filesystem/student_database.zip",
    "stateOriginalUrl": null
  },
  "instruction": "Please use FileSystem tools to finish the following task:\n\nWe are now recruiting students proficient in English to be responsible for the school’s English media operations. To contact with students, from the total of 150 students, select those who **meet both of the following criteria** :\n\n1. Rated ****S** or** ****A** grade level in** `recommendation_letter.txt` by their teachers.\n2. TOEFL score in the basic info is **higher than or equal to 100** .\n\n Please compile all their names, ids and emails into a  `qualified_students.txt` file, with the format:\n\n    name: xxx\n\tid: xxx\n\temail: xxx\n\nEach person’s information should occupy three lines, with one blank line between each block.\n",
  "verify": "#!/usr/bin/env python3\n\"\"\"\nVerification script for Student Database Task: English Talent Recruitment\n\"\"\"\n\nimport sys\nfrom pathlib import Path\nimport re\nimport os\n\ndef get_test_directory() -> Path:\n    \"\"\"Get the test directory from FILESYSTEM_TEST_DIR env var.\"\"\"\n    test_root = os.environ.get(\"FILESYSTEM_TEST_DIR\")\n    if not test_root:\n        raise ValueError(\"FILESYSTEM_TEST_DIR environment variable is required\")\n    return Path(test_root)\n\ndef verify_qualified_students_file_exists(test_dir: Path) -> bool:\n    \"\"\"Verify that the qualified_students.txt file exists.\"\"\"\n    answer_file = test_dir / \"qualified_students.txt\"\n    \n    if not answer_file.exists():\n        print(\"❌ File 'qualified_students.txt' not found\")\n        return False\n    \n    print(\"✅ Qualified students file found\")\n    return True\n\ndef verify_file_format(test_dir: Path) -> bool:\n    \"\"\"Verify that the qualified_students.txt file has the correct format.\"\"\"\n    answer_file = test_dir / \"qualified_students.txt\"\n    \n    try:\n        content = answer_file.read_text()\n        lines = content.strip().split('\\n')\n        \n        if not lines:\n            print(\"❌ File is empty\")\n            return False\n        \n        # Check if content follows the expected pattern\n        # Each student should have 3 lines: name, id, email\n        # Students should be separated by blank lines\n        current_line = 0\n        student_count = 0\n        \n        while current_line < len(lines):\n            # Skip blank lines\n            if not lines[current_line].strip():\n                current_line += 1\n                continue\n            \n            # Check if we have enough lines for a complete student\n            if current_line + 2 >= len(lines):\n                print(f\"❌ Incomplete student entry at line {current_line + 1}\")\n                return False\n            \n            # Verify name line format\n            if not lines[current_line].strip().startswith(\"name: \"):\n                print(f\"❌ Invalid name line format at line {current_line + 1}: {lines[current_line]}\")\n                return False\n            \n            # Verify id line format\n            if not lines[current_line + 1].strip().startswith(\"id: \"):\n                print(f\"❌ Invalid id line format at line {current_line + 2}: {lines[current_line + 1]}\")\n                return False\n            \n            # Verify email line format\n            if not lines[current_line + 2].strip().startswith(\"email: \"):\n                print(f\"❌ Invalid email line format at line {current_line + 3}: {lines[current_line + 2]}\")\n                return False\n            \n            student_count += 1\n            current_line += 3\n            \n            # Check for blank line separator (except for the last student)\n            if current_line < len(lines) and lines[current_line].strip():\n                print(f\"❌ Missing blank line separator after student {student_count}\")\n                return False\n            \n            current_line += 1\n        \n        if student_count == 0:\n            print(\"❌ No valid student entries found\")\n            return False\n        \n        print(f\"✅ File format is correct with {student_count} students\")\n        return True\n        \n    except Exception as e:\n        print(f\"❌ Error reading qualified students file: {e}\")\n        return False\n\ndef parse_qualified_students_file(test_dir: Path) -> list:\n    \"\"\"Parse the qualified_students.txt file and return structured data.\"\"\"\n    answer_file = test_dir / \"qualified_students.txt\"\n    \n    try:\n        content = answer_file.read_text()\n        lines = content.strip().split('\\n')\n        \n        students = []\n        current_line = 0\n        \n        while current_line < len(lines):\n            # Skip blank lines\n            if not lines[current_line].strip():\n                current_line += 1\n                continue\n            \n            # Parse student entry\n            name_line = lines[current_line].strip()\n            id_line = lines[current_line + 1].strip()\n            email_line = lines[current_line + 2].strip()\n            \n            # Extract name\n            name = name_line.replace(\"name: \", \"\").strip()\n            \n            # Extract id\n            student_id = id_line.replace(\"id: \", \"\").strip()\n            \n            # Extract email\n            email = email_line.replace(\"email: \", \"\").strip()\n            \n            students.append({\n                'name': name,\n                'id': student_id,\n                'email': email\n            })\n            \n            current_line += 4  # Skip to next student (after blank line)\n        \n        return students\n        \n    except Exception as e:\n        print(f\"❌ Error parsing qualified students file: {e}\")\n        return []\n\ndef verify_student_count(students: list) -> bool:\n    \"\"\"Verify that exactly 19 students are found.\"\"\"\n    expected_count = 19\n    actual_count = len(students)\n    \n    if actual_count != expected_count:\n        print(f\"❌ Expected {expected_count} students, but found {actual_count}\")\n        return False\n    \n    print(f\"✅ Found exactly {expected_count} students\")\n    return True\n\ndef verify_expected_students(students: list) -> bool:\n    \"\"\"Verify that all expected students are present with correct details.\"\"\"\n    # Expected students from answer.md\n    expected_students = {\n        'James Smith': {'id': '20177389', 'email': 'james.smith30@outlook.com'},\n        'Ava Lopez': {'id': '20166998', 'email': 'ava.lopez67@outlook.com'},\n        'James Anderson': {'id': '20153606', 'email': 'james.anderson71@yahoo.com'},\n        'Benjamin Anderson': {'id': '20136681', 'email': 'benjamin.anderson37@qq.com'},\n        'Sarah Wilson': {'id': '20158819', 'email': 'sarah.wilson96@outlook.com'},\n        'Isabella Davis': {'id': '20101701', 'email': 'isabella.davis89@gmail.com'},\n        'James Moore': {'id': '20188937', 'email': 'james.moore62@gmail.com'},\n        'Harper Williams': {'id': '20157943', 'email': 'harper.williams38@163.com'},\n        'Noah Smith': {'id': '20132669', 'email': 'noah.smith45@163.com'},\n        'Emma Thomas': {'id': '20109144', 'email': 'emma.thomas68@163.com'},\n        'Mary Brown': {'id': '20199583', 'email': 'mary.brown27@yahoo.com'},\n        'John Jones': {'id': '20201800', 'email': 'john.jones46@gmail.com'},\n        'Mia Anderson': {'id': '20162542', 'email': 'mia.anderson3@outlook.com'},\n        'Barbara Davis': {'id': '20126203', 'email': 'barbara.davis67@163.com'},\n        'Thomas Brown': {'id': '20119528', 'email': 'thomas.brown43@163.com'},\n        'Susan Anderson': {'id': '20148778', 'email': 'susan.anderson16@163.com'},\n        'Mary Garcia': {'id': '20174369', 'email': 'mary.garcia58@gmail.com'},\n        'Richard Wilson': {'id': '20174207', 'email': 'richard.wilson39@outlook.com'},\n        'Joseph Lopez': {'id': '20191265', 'email': 'joseph.lopez93@yahoo.com'}\n    }\n    \n    # Check if all expected students are present\n    found_students = set()\n    for student in students:\n        found_students.add(student['name'])\n    \n    missing_students = set(expected_students.keys()) - found_students\n    if missing_students:\n        print(f\"❌ Missing expected students: {missing_students}\")\n        return False\n    \n    # Check if all found students are expected\n    unexpected_students = found_students - set(expected_students.keys())\n    if unexpected_students:\n        print(f\"❌ Unexpected students found: {unexpected_students}\")\n        return False\n    \n    # Check if student details match exactly\n    for student in students:\n        expected = expected_students[student['name']]\n        if student['id'] != expected['id']:\n            print(f\"❌ ID mismatch for {student['name']}: expected {expected['id']}, got {student['id']}\")\n            return False\n        if student['email'] != expected['email']:\n            print(f\"❌ Email mismatch for {student['name']}: expected {expected['email']}, got {student['email']}\")\n            return False\n    \n    print(\"✅ All expected students are present with correct details\")\n    return True\n\ndef main():\n    \"\"\"Main verification function.\"\"\"\n    test_dir = get_test_directory()\n    print(\"🔍 Verifying Student Database Task: English Talent Recruitment...\")\n    \n    # Define verification steps\n    verification_steps = [\n        (\"Qualified Students File Exists\", verify_qualified_students_file_exists),\n        (\"File Format\", verify_file_format),\n    ]\n    \n    # Run basic verification steps first\n    all_passed = True\n    for step_name, verify_func in verification_steps:\n        print(f\"\\n--- {step_name} ---\")\n        if not verify_func(test_dir):\n            all_passed = False\n            break\n    \n    if not all_passed:\n        print(\"\\n❌ Basic verification failed, cannot proceed with content verification\")\n        sys.exit(1)\n    \n    # Parse the file and run content verification\n    print(\"\\n--- Content Verification ---\")\n    students = parse_qualified_students_file(test_dir)\n    \n    if not students:\n        print(\"❌ Failed to parse qualified students file\")\n        sys.exit(1)\n    \n    content_verification_steps = [\n        (\"Student Count\", lambda: verify_student_count(students)),\n        (\"Expected Students\", lambda: verify_expected_students(students)),\n    ]\n    \n    for step_name, verify_func in content_verification_steps:\n        print(f\"\\n--- {step_name} ---\")\n        if not verify_func():\n            all_passed = False\n    \n    # Final result\n    print(\"\\n\" + \"=\"*50)\n    if all_passed:\n        print(\"✅ English talent recruitment completed correctly!\")\n        print(f\"🎉 Found exactly {len(students)} qualified students\")\n        print(\"🎉 Task verification: PASS\")\n        sys.exit(0)\n    else:\n        print(\"❌ Task verification: FAIL\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()"
}