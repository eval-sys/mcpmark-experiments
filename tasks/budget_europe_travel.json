{
  "task_id": "budget_europe_travel",
  "task_name": "Budget Europe Travel",
  "category_id": "reddit",
  "category_name": "Reddit",
  "description": "Create comprehensive budget travel resource for European destinations by establishing dedicated travel community with integrated wiki guides and engaging travel content.",
  "author": "Fanqing Meng",
  "created_at": "2025-08-12",
  "difficulty": "L3",
  "tags": [
    "content submission",
    "user interaction"
  ],
  "mcp": [
    "playwright"
  ],
  "meta_data": {
    "stateType": "video",
    "stateContent": null,
    "stateUrl": "",
    "stateOriginalUrl": "https://github.com/web-arena-x/webarena/tree/main/environment_docker"
  },
  "instruction": "Create a comprehensive budget travel resource for European travel on the Postmill forum platform by establishing a dedicated travel community with integrated wiki guides and engaging content.\n\n**Task Requirements:**\n\n1. Register a new account with username \"EuroTravelPlanner\" and password \"SecureTravel2024!\"\n\n2. After successful registration and login, search for \"Europe travel budget\" using the search bar to check for existing content\n\n3. Create a new forum dedicated to budget European travel:\n   - Forum name: \"BudgetEuropeTravel\"\n   - Title: \"Budget Travel Europe\"\n   - Description: \"Community for sharing money-saving tips for European travel\"\n   - Sidebar content: \"Share your best European travel deals and budget tips here!\"\n\n4. Create a comprehensive wiki page for your forum:\n   - Path: \"europe-travel-budget-guide\"\n   - Title: \"Complete Budget Travel Guide for Europe 2024\"\n   - Content must contain: \"Eurail passes and budget airlines\"\n\n5. Navigate to your newly created forum and create your first post:\n   - Title: \"My 14-day Europe trip for under 1000 - Complete itinerary\"\n   - Body must contain: \"budget guide wiki\"\n\n6. Search for \"travel insurance Europe\" using the search function:\n   - upvote the first post\n\n7. Navigate to user settings and configure:\n   - Set timezone to \"Europe/Amsterdam\" (to match your travel planning focus)\n   - Ensure \"Notify on reply\" is checked (enabled) for community engagement",
  "verify": "import asyncio\nimport sys\nimport re\nimport os\nfrom pathlib import Path\nfrom playwright.async_api import async_playwright, TimeoutError as PlaywrightTimeoutError\n\nBASE_URL = os.getenv(\"WEBARENA_BASE_URL\", \"http://localhost:9999\").rstrip(\"/\")\n\ndef normalize_text(text):\n    \"\"\"\n    Normalize text for comparison by handling different quote styles and whitespace.\n    \"\"\"\n    if not isinstance(text, str):\n        return str(text)\n    \n    # Replace various quote styles with standard quotes\n    text = text.replace('\\'', \"'\").replace('\\'', \"'\")\n    text = text.replace('\"', '\"').replace('\"', '\"')\n    text = text.replace('&amp;', '&')\n    \n    # Normalize whitespace\n    text = ' '.join(text.split())\n    \n    return text.strip()\n\nasync def verify() -> bool:\n    \"\"\"\n    Verifies that the budget Europe travel resource task has been completed correctly.\n    \"\"\"\n    async with async_playwright() as p:\n        browser = await p.chromium.launch(headless=True)\n        context = await browser.new_context()\n        page = await context.new_page()\n        \n        verification_passed = True\n        \n        try:\n\n            # 1. Check if account can login with correct credentials\n            print(\"=\"*60)\n            print(\"Step 1: Verifying account login with credentials...\", file=sys.stderr)\n            print(\"=\"*60)\n            await page.goto(f\"{BASE_URL}/\", wait_until='networkidle')\n            \n            # First logout if already logged in\n            user_button = page.locator('button:has-text(\"EuroTravelPlanner\")')\n            if await user_button.count():\n                print(\"Already logged in, logging out first...\", file=sys.stderr)\n                await user_button.click()\n                logout_link = page.locator('a:has-text(\"Log out\")')\n                if await logout_link.count():\n                    await logout_link.click()\n                    await page.wait_for_load_state('networkidle')\n            \n            # Now try to login with the specified credentials\n            print(\"Attempting to login with username 'EuroTravelPlanner' and password 'SecureTravel2024!'...\", file=sys.stderr)\n            \n            # Navigate to login page\n            login_link = page.locator('a:has-text(\"Log in\")')\n            if await login_link.count():\n                await login_link.click()\n                await page.wait_for_load_state('networkidle')\n            else:\n                print(\"❌ ERROR: Cannot find login link\", file=sys.stderr)\n                verification_passed = False\n                \n            if verification_passed:\n                # Fill login form with exact credentials\n                await page.fill('input[name=\"_username\"]', 'EuroTravelPlanner')\n                await page.fill('input[name=\"_password\"]', 'SecureTravel2024!')\n                \n                # Submit login\n                login_button = page.locator('button[type=\"submit\"]:has-text(\"Log in\")')\n                if not await login_button.count():\n                    login_button = page.locator('button:has-text(\"Log in\")')\n                \n                await login_button.click()\n                await page.wait_for_load_state('networkidle')\n                \n                # Verify login success\n                user_button = page.locator('button:has-text(\"EuroTravelPlanner\")')\n                if not await user_button.count():\n                    print(\"❌ ERROR: Login failed with username 'EuroTravelPlanner' and password 'SecureTravel2024!'\", file=sys.stderr)\n                    verification_passed = False\n                else:\n                    print(\"✓ Account login successful with correct credentials\", file=sys.stderr)\n            \n\n            # 2. Check if forum exists and has correct properties\n            print(\"\\n\" + \"=\"*60)\n            print(\"Step 2: Checking forum existence and properties...\", file=sys.stderr)\n            print(\"=\"*60)\n            \n            # Check if forum exists at /f/BudgetEuropeTravel\n            await page.goto(f\"{BASE_URL}/f/BudgetEuropeTravel\", wait_until='networkidle')\n            \n            # Check if we get 404 or the forum exists\n            page_content = await page.content()\n            page_title = await page.title()\n            \n\n            if \"404\" in page_title or \"not found\" in page_title.lower() or \"Page not found\" in page_content:\n                print(\"❌ ERROR: Forum /f/BudgetEuropeTravel does not exist (404)\", file=sys.stderr)\n                verification_passed = False\n            else:\n                print(\"✓ Forum /f/BudgetEuropeTravel exists\", file=sys.stderr)\n                \n                # Navigate to edit page to check properties\n                await page.goto(f\"{BASE_URL}/f/BudgetEuropeTravel/edit\", wait_until='networkidle')\n                \n                # Check if we can access edit page\n                edit_page_content = await page.content()\n                edit_page_title = await page.title()\n                \n                if \"404\" in edit_page_title or \"not found\" in edit_page_title.lower() or \"Page not found\" in edit_page_content:\n                    print(\"❌ ERROR: Cannot access forum edit page at /f/BudgetEuropeTravel/edit\", file=sys.stderr)\n                    verification_passed = False\n                else:\n                    print(\"✓ Forum edit page accessible\", file=sys.stderr)\n                    \n                    # Check forum title\n                    title_input = page.locator('input[name*=\"title\"], input#forum_title')\n                    if await title_input.count():\n                        title_value = await title_input.input_value()\n                        if title_value != \"Budget Travel Europe\":\n                            print(f\"❌ ERROR: Forum title is '{title_value}', expected 'Budget Travel Europe'\", file=sys.stderr)\n                            verification_passed = False\n                        else:\n                            print(\"✓ Forum title correct: 'Budget Travel Europe'\", file=sys.stderr)\n                    else:\n                        print(\"❌ ERROR: Cannot find forum title field\", file=sys.stderr)\n                        verification_passed = False\n                    \n                    # Check forum description\n                    desc_input = page.locator('textarea[name*=\"description\"], input[name*=\"description\"]')\n                    if await desc_input.count():\n                        desc_value = await desc_input.input_value()\n                        expected_desc = \"Community for sharing money-saving tips for European travel\"\n                        if desc_value != expected_desc:\n                            print(f\"❌ ERROR: Forum description is '{desc_value}', expected '{expected_desc}'\", file=sys.stderr)\n                            verification_passed = False\n                        else:\n                            print(\"✓ Forum description correct\", file=sys.stderr)\n                    else:\n                        print(\"❌ ERROR: Cannot find forum description field\", file=sys.stderr)\n                        verification_passed = False\n                    \n                    # Check sidebar content\n                    sidebar_input = page.locator('textarea[name*=\"sidebar\"]')\n                    if await sidebar_input.count():\n                        sidebar_value = await sidebar_input.input_value()\n                        expected_sidebar = \"Share your best European travel deals and budget tips here!\"\n                        if sidebar_value != expected_sidebar:\n                            print(f\"❌ ERROR: Forum sidebar is '{sidebar_value}', expected '{expected_sidebar}'\", file=sys.stderr)\n                            verification_passed = False\n                        else:\n                            print(\"✓ Forum sidebar correct\", file=sys.stderr)\n                    else:\n                        print(\"❌ ERROR: Cannot find forum sidebar field\", file=sys.stderr)\n                        verification_passed = False\n            \n\n            # 3. Check wiki page existence and content\n            print(\"\\n\" + \"=\"*60)\n            print(\"Step 3: Checking wiki page existence and content...\", file=sys.stderr)\n            print(\"=\"*60)\n            \n            # Try the wiki URL with /wiki/ path\n            await page.goto(f\"{BASE_URL}/wiki/europe-travel-budget-guide\", wait_until='networkidle')\n            \n            wiki_page_content = await page.content()\n            wiki_page_title = await page.title()\n            \n            if \"404\" in wiki_page_title or \"not found\" in wiki_page_title.lower() or \"Page not found\" in wiki_page_content:\n                print(\"❌ ERROR: Wiki page does not exist at /wiki/europe-travel-budget-guide\", file=sys.stderr)\n                verification_passed = False\n            else:\n                print(\"✓ Wiki page exists at /wiki/europe-travel-budget-guide\", file=sys.stderr)\n                \n                # Check wiki title\n                wiki_title_found = False\n                expected_wiki_title = \"Complete Budget Travel Guide for Europe 2024\"\n                \n                # Try multiple selectors for wiki title\n                wiki_title_selectors = [\n                    f'h1:has-text(\"{expected_wiki_title}\")',\n                    f'h1:text-is(\"{expected_wiki_title}\")',\n                    'h1'\n                ]\n                \n                for selector in wiki_title_selectors:\n                    wiki_title_elem = page.locator(selector)\n                    if await wiki_title_elem.count():\n                        title_text = await wiki_title_elem.first.text_content()\n                        if expected_wiki_title in title_text:\n                            wiki_title_found = True\n                            break\n                \n                if not wiki_title_found:\n                    print(f\"❌ ERROR: Wiki title '{expected_wiki_title}' not found\", file=sys.stderr)\n                    verification_passed = False\n                else:\n                    print(f\"✓ Wiki title correct: '{expected_wiki_title}'\", file=sys.stderr)\n                \n                # Check for required content in wiki\n                required_wiki_content = \"Eurail passes and budget airlines\"\n                if required_wiki_content not in wiki_page_content:\n                    print(f\"❌ ERROR: Wiki content must contain '{required_wiki_content}'\", file=sys.stderr)\n                    verification_passed = False\n                else:\n                    print(f\"✓ Wiki content contains required text: '{required_wiki_content}'\", file=sys.stderr)\n            \n            # 4. Check for post in the forum\n            print(\"\\n\" + \"=\"*60)\n            print(\"Step 4: Checking for post in forum...\", file=sys.stderr)\n            print(\"=\"*60)\n            \n            await page.goto(f\"{BASE_URL}/f/BudgetEuropeTravel\", wait_until='networkidle')\n            \n            expected_post_title = \"My 14-day Europe trip for under 1000 - Complete itinerary\"\n            post_link = page.locator(f'a:has-text(\"{expected_post_title}\")')\n            \n            if not await post_link.count():\n                print(f\"❌ ERROR: Post with title '{expected_post_title}' not found in forum\", file=sys.stderr)\n                verification_passed = False\n            else:\n                print(f\"✓ Post found with title: '{expected_post_title}'\", file=sys.stderr)\n                \n                # Click on the post to check its content\n                await post_link.first.click()\n                await page.wait_for_load_state('networkidle')\n                \n                # Check if post contains required text\n                post_page_content = await page.content()\n                required_post_content = \"budget guide wiki\"\n                \n                if required_post_content not in post_page_content:\n                    print(f\"❌ ERROR: Post body must contain '{required_post_content}'\", file=sys.stderr)\n                    verification_passed = False\n                else:\n                    print(f\"✓ Post content contains required text: '{required_post_content}'\", file=sys.stderr)\n            \n            # 5. Check upvote on search result\n            print(\"\\n\" + \"=\"*60)\n            print(\"Step 5: Checking upvote on search result...\", file=sys.stderr)\n            print(\"=\"*60)\n            \n            # Navigate to search results for \"travel insurance Europe\"\n            await page.goto(f\"{BASE_URL}/search?q=travel+insurance+Europe\", wait_until='networkidle')\n            \n\n            # Check if we're on search results page\n            if \"/search\" not in page.url:\n                print(\"❌ ERROR: Not on search results page\", file=sys.stderr)\n                verification_passed = False\n            else:\n                print(\"✓ On search results page for 'travel insurance Europe'\", file=sys.stderr)\n                \n                # Check for upvoted posts\n                upvote_found = False\n                \n                # Method 1: Check for \"Retract upvote\" button (indicates user has upvoted)\n                retract_buttons = page.locator('button:has-text(\"Retract upvote\")')\n                if await retract_buttons.count() > 0:\n                    print(\"✓ Found upvoted post (Retract upvote button present)\", file=sys.stderr)\n                    upvote_found = True\n                \n                # Method 2: Check for posts with upvote count >= 1\n                if not upvote_found:\n                    # Look for vote counts\n                    vote_elements = page.locator('div.vote, span.vote-count, [class*=\"vote\"]')\n                    \n                    for i in range(await vote_elements.count()):\n                        vote_elem = vote_elements.nth(i)\n                        vote_text = await vote_elem.text_content()\n                        try:\n                            # Extract number from vote text\n                            import re\n                            numbers = re.findall(r'\\d+', vote_text)\n                            if numbers:\n                                vote_count = int(numbers[0])\n                                if vote_count >= 1:\n                                    print(f\"✓ Found post with {vote_count} upvote(s)\", file=sys.stderr)\n                                    upvote_found = True\n                                    break\n                        except:\n                            continue\n                \n                if not upvote_found:\n                    print(\"❌ ERROR: No upvoted posts found in search results\", file=sys.stderr)\n                    verification_passed = False\n            \n            # 6. Check user settings\n            print(\"\\n\" + \"=\"*60)\n            print(\"Step 6: Checking user settings...\", file=sys.stderr)\n            print(\"=\"*60)\n            \n\n            await page.goto(f\"{BASE_URL}/user/EuroTravelPlanner/preferences\", wait_until='networkidle')\n            \n            # Check timezone setting\n            timezone_correct = False\n            timezone_select = page.locator('select[name*=\"timezone\"], select#timezone')\n            \n            if await timezone_select.count():\n                selected_value = await timezone_select.input_value()\n                \n                if selected_value == \"Europe/Amsterdam\":\n                    print(\"✓ Timezone correctly set to 'Europe/Amsterdam'\", file=sys.stderr)\n                    timezone_correct = True\n                else:\n                    # Check selected option text\n                    selected_option = timezone_select.locator('option[selected]')\n                    if await selected_option.count():\n                        option_text = await selected_option.text_content()\n                        if \"Amsterdam\" in option_text:\n                            print(\"✓ Timezone correctly set to Europe/Amsterdam\", file=sys.stderr)\n                            timezone_correct = True\n                        else:\n                            print(f\"❌ ERROR: Timezone is set to '{option_text}', expected 'Europe/Amsterdam'\", file=sys.stderr)\n                            verification_passed = False\n                    else:\n                        print(f\"❌ ERROR: Timezone is '{selected_value}', expected 'Europe/Amsterdam'\", file=sys.stderr)\n                        verification_passed = False\n            else:\n                print(\"❌ ERROR: Cannot find timezone selector\", file=sys.stderr)\n                verification_passed = False\n            \n            # Check \"Notify on reply\" setting\n            notify_correct = False\n            \n            # Try multiple selectors for the checkbox\n            notify_selectors = [\n                'input[type=\"checkbox\"]:near(:text(\"Notify on reply\"))',\n                'label:has-text(\"Notify on reply\") input[type=\"checkbox\"]',\n                'input[type=\"checkbox\"][name*=\"notify\"]',\n                'input[type=\"checkbox\"][id*=\"notify\"]'\n            ]\n            \n            for selector in notify_selectors:\n                notify_checkbox = page.locator(selector)\n                if await notify_checkbox.count():\n                    is_checked = await notify_checkbox.first.is_checked()\n                    if is_checked:\n                        print(\"✓ 'Notify on reply' is enabled (checked)\", file=sys.stderr)\n                        notify_correct = True\n                    else:\n                        print(\"❌ ERROR: 'Notify on reply' is not enabled (unchecked)\", file=sys.stderr)\n                        verification_passed = False\n                    break\n            \n            if not notify_correct and verification_passed:\n                print(\"❌ ERROR: Cannot verify 'Notify on reply' setting\", file=sys.stderr)\n                verification_passed = False\n            \n            # Final summary\n            print(\"\\n\" + \"=\"*60)\n            if verification_passed:\n                print(\"✅ SUCCESS: All verification checks passed!\", file=sys.stderr)\n            else:\n                print(\"❌ FAILED: One or more verification checks failed!\", file=sys.stderr)\n            print(\"=\"*60)\n            \n            return verification_passed\n            \n        except PlaywrightTimeoutError as e:\n            print(f\"❌ ERROR: Timeout occurred - {str(e)}\", file=sys.stderr)\n            return False\n        except Exception as e:\n            print(f\"❌ ERROR: Unexpected error - {str(e)}\", file=sys.stderr)\n            return False\n        finally:\n            await browser.close()\n\ndef main():\n    \"\"\"\n    Executes the verification process and exits with a status code.\n    \"\"\"\n    result = asyncio.run(verify())\n    sys.exit(0 if result else 1)\n\nif __name__ == \"__main__\":\n    main()"
}