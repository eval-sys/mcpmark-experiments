{
  "task_id": "routine_tracker_forum",
  "task_name": "Routine Tracker Forum",
  "category_id": "reddit",
  "category_name": "Reddit",
  "description": "Establish productivity community by creating account, setting up routine tracking forum, implementing daily habit systems, and engaging members with structured productivity challenges and resources.",
  "author": "Fanqing Meng",
  "created_at": "2025-08-12",
  "difficulty": "L3",
  "tags": [
    "user interaction",
    "content submission"
  ],
  "mcp": [
    "playwright"
  ],
  "metadata": {},
  "instruction": "Create a daily routine tracking system on the Postmill forum platform by setting up a new account and engaging with productivity-related content in the LifeProTips community.\n\n**Task Requirements:**\n\n1. Create a new account with the exact username \"RoutineTracker2025\" and password \"DailyRoutine123!\"\n\n2. Locate the following specific post:\n   - Title: \"LPT: Use your calendar as your to-do list. Assigning dedicated time to tasks increases the likelyhood of you acting upon it.\"\n   - Record the content of the most upvoted comment of this post\n\n3. Create a new submission in the LifeProTips forum with these exact specifications:\n   - Title: \"My 5-Step Morning Routine That Increased My Productivity by 200%\"\n   - Body content must be the content recorded in the above step\n\n4. After successfully posting, verify that your post appears in the LifeProTips forum listing\n\n5. Engage with the community by upvoting exactly these two posts:\n   - The calendar to-do list post you found in step 2\n   - The post titled \"LPT: clean your stovetop after using the oven. The heat loosens grime for easy removal\"",
  "verify": "import asyncio\nimport sys\nimport os\nfrom pathlib import Path\nfrom datetime import datetime\nfrom playwright.async_api import (\n    async_playwright,\n    TimeoutError as PlaywrightTimeoutError,\n)\n\nBASE_URL = os.getenv(\"WEBARENA_BASE_URL\", \"http://localhost:9999\").rstrip(\"/\")\n\n\nasync def verify() -> bool:\n    \"\"\"\n    Verifies that the daily routine tracking setup has been completed correctly on the forum.\n    \"\"\"\n    async with async_playwright() as p:\n        browser = await p.chromium.launch(headless=True)\n        context = await browser.new_context()\n        page = await context.new_page()\n\n        try:\n            # Step 1: Check if account can be logged in\n            print(\"Step 1: Verifying account login...\", file=sys.stderr)\n            await page.goto(f\"{BASE_URL}/\", wait_until=\"networkidle\")\n\n            # Check if already logged in\n            user_button = page.locator('button:has-text(\"RoutineTracker2025\")')\n            if not await user_button.count():\n                # Try to login\n                print(\"Not logged in, attempting to login...\", file=sys.stderr)\n\n                # Click login link\n                await page.click('a:has-text(\"Log in\")')\n                await page.wait_for_load_state(\"networkidle\")\n\n                # Fill login form\n                await page.fill('input[name=\"_username\"]', \"RoutineTracker2025\")\n                await page.fill('input[name=\"_password\"]', \"DailyRoutine123!\")\n\n                # Submit login form\n                await page.click('button:has-text(\"Log in\")')\n                await page.wait_for_load_state(\"networkidle\")\n\n                # Check if login successful\n                user_button = page.locator('button:has-text(\"RoutineTracker2025\")')\n                if not await user_button.count():\n                    print(\"Error: Account login failed for RoutineTracker2025\", file=sys.stderr)\n                    return False\n\n                print(\"✓ Account login successful\", file=sys.stderr)\n            else:\n                print(\"✓ Already logged in as RoutineTracker2025\", file=sys.stderr)\n\n            # Step 2: Check if the post exists in LifeProTips forum with correct content\n            print(\"Step 2: Verifying post in LifeProTips forum...\", file=sys.stderr)\n            await page.goto(\n                f\"{BASE_URL}/f/LifeProTips\", wait_until=\"networkidle\"\n            )\n\n            # Check for the created post\n            expected_title = \"My 5-Step Morning Routine That Increased My Productivity by 200%\"\n            post_link = page.locator(f'a:has-text(\"{expected_title}\")')\n            \n            if not await post_link.count():\n                print(f\"Error: Post with title '{expected_title}' not found in LifeProTips forum\", file=sys.stderr)\n                return False\n\n            # Click on the post to verify content\n            await post_link.click()\n            await page.wait_for_load_state(\"networkidle\")\n\n            # Verify post content - this should be the content from the most upvoted comment of the calendar post\n            expected_content = \"As a college student, having a visible reminder of the assignments I have and when they are due is super helpful for me. It also just feels good to erase them from the board once they are completed.\"\n\n            # Check if the content exists in the page\n            content_found = False\n            article_content = await page.locator(\"article\").text_content()\n            if article_content and expected_content in article_content:\n                content_found = True\n\n            if not content_found:\n                print(f\"Error: Post content does not match expected content\", file=sys.stderr)\n                print(f\"Expected: {expected_content}\", file=sys.stderr)\n                return False\n\n            print(\"✓ Post found in LifeProTips with correct title and content\", file=sys.stderr)\n\n            # Step 3: Check upvotes via search\n            print(\"Step 3: Verifying upvotes on posts...\", file=sys.stderr)\n            \n            # Check first post upvote\n            search_url1 = f\"{BASE_URL}/search?q=LPT%3A+Use+your+calendar+as+your+to-do+list.+Assigning+dedicated+time+to+tasks+increases+the+likelyhood+of+you+acting+upon+it.\"\n            await page.goto(search_url1, wait_until=\"networkidle\")\n            \n            # Find the post and check its upvote count\n            posts = await page.locator(\"article\").all()\n            calendar_upvoted = False\n            \n            for post in posts:\n                title_elem = post.locator(\"h1 a\")\n                if await title_elem.count():\n                    title = await title_elem.text_content()\n                    if \"Use your calendar as your to-do list\" in title:\n                        # Check upvote count\n                        vote_count_elem = post.locator(\"span.vote__net-score\")\n                        if await vote_count_elem.count():\n                            vote_count = await vote_count_elem.text_content()\n                            if vote_count and vote_count.strip() == \"1\":\n                                calendar_upvoted = True\n                                print(\"✓ Calendar post upvoted (count: 1)\", file=sys.stderr)\n                                break\n            \n            if not calendar_upvoted:\n                print(\"Error: Calendar post not upvoted or upvote count is not 1\", file=sys.stderr)\n                return False\n\n            # Check second post upvote\n            search_url2 = f\"{BASE_URL}/search?q=LPT%3A+clean+your+stovetop+after+using+the+oven.+The+heat+loosens+grime+for+easy+removal\"\n            await page.goto(search_url2, wait_until=\"networkidle\")\n            \n            posts = await page.locator(\"article\").all()\n            stovetop_upvoted = False\n            \n            for post in posts:\n                title_elem = post.locator(\"h1 a\")\n                if await title_elem.count():\n                    title = await title_elem.text_content()\n                    if \"clean your stovetop after using the oven\" in title:\n                        # Check upvote count\n                        vote_count_elem = post.locator(\"span.vote__net-score\")\n                        if await vote_count_elem.count():\n                            vote_count = await vote_count_elem.text_content()\n                            if vote_count and vote_count.strip() == \"1\":\n                                stovetop_upvoted = True\n                                print(\"✓ Stovetop post upvoted (count: 1)\", file=sys.stderr)\n                                break\n            \n            if not stovetop_upvoted:\n                print(\"Error: Stovetop post not upvoted or upvote count is not 1\", file=sys.stderr)\n                return False\n\n            print(\"Success: All verification steps passed!\")\n            return True\n\n        except PlaywrightTimeoutError as e:\n            print(f\"Error: Timeout occurred - {str(e)}\", file=sys.stderr)\n            return False\n        except Exception as e:\n            print(f\"Error: Unexpected error - {str(e)}\", file=sys.stderr)\n            return False\n        finally:\n            await browser.close()\n\n\ndef main():\n    \"\"\"\n    Executes the verification process and exits with a status code.\n    \"\"\"\n    result = asyncio.run(verify())\n    sys.exit(0 if result else 1)\n\n\nif __name__ == \"__main__\":\n    main()\n"
}