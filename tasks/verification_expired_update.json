{
  "task_id": "verification_expired_update",
  "task_name": "Verification Expired Update",
  "category_id": "it_trouble_shooting_hub",
  "category_name": "IT Trouble Shooting Hub",
  "description": "Update pages with expired verification status by adding warning callouts and creating a batch update request.",
  "author": "Zijian Wu",
  "created_at": "2025-07-27",
  "difficulty": "L3",
  "tags": [
    "conditional filtering",
    "visual formatting",
    "database manipulation",
    "cross-reference linking",
    "status tracking"
  ],
  "mcp": [
    "notion"
  ],
  "metadata": {
    "ori_template_url": "https://painted-tennis-ebc.notion.site/It-Trouble-Shooting-Hub-23e81626b6d78020aba7eb65ae1cc2d5",
    "gt_page_url": "https://www.notion.so/It-Trouble-Shooting-Hub-Verification-Expired-Update-2442b7e8cebd813fbd4fcea06e5e621c"
  },
  "instruction": "**Task Overview**\n\nMy IT knowledge base contains pages whose verification status has expired:\n\n**Task Requirements**\n1. Locate the database named **\"IT Homepage\"** inside the main page **\"It Trouble Shooting Hub\"**.\n2. Within that database, find every page (except for **\"It Inventory\"**) where the **Verification** property state contains `expired`.\n3. For **each** expired page:\n   • Insert a **callout block** at the very top (as the first child block) whose rich-text content is:\n     `VERIFICATION EXPIRED - This page needs review and re-verification`\n   • Set the callout’s icon to ⚠️.\n   • Set the callout’s colour to `red_background`.\n4. Create a new entry in the **\"IT Requests\"** database with:\n   • Title (property **Task name**) **exactly** `Batch Verification Update Required`.\n   • **Priority** set to `High`.\n   • **Status** set to `In progress`.\n   • In the page body add a **bulleted list** where each bullet is a **mention** of the page processed in step 3 (i.e., use the Notion mention object linking to that page).",
  "verify": "import sys\nfrom notion_client import Client\nfrom tasks.utils import notion_utils\n\nCALL_OUT_TEXT = \"VERIFICATION EXPIRED - This page needs review and re-verification\"\nCALL_OUT_ICON = \"⚠️\"\nCALL_OUT_COLOR = \"red_background\"\nIT_HOMEPAGE_DB_TITLE = \"IT Homepage\"\nIT_REQUESTS_DB_TITLE = \"IT Requests\"\nREQUEST_TITLE = \"Batch Verification Update Required\"\nPRIORITY_HIGH = \"High\"\nSTATUS_IN_PROGRESS = \"In progress\"\n\n\ndef _get_main_page_id(notion: Client, main_id: str | None) -> str | None:\n    \"\"\"Resolve the main page id starting from CLI arg or by title search.\"\"\"\n    if main_id:\n        found_id, obj_type = notion_utils.find_page_or_database_by_id(notion, main_id)\n        if found_id and obj_type == \"page\":\n            return found_id\n    # Fallback to title search (case-insensitive)\n    return notion_utils.find_page(notion, \"It Trouble Shooting Hub\")\n\n\ndef _fetch_database_id(\n    notion: Client, parent_page_id: str, db_title: str\n) -> str | None:\n    \"\"\"Locate a child database by title inside a given page.\"\"\"\n    return notion_utils.find_database_in_block(notion, parent_page_id, db_title)\n\n\ndef _expired_pages(notion: Client, db_id: str) -> list[dict]:\n    \"\"\"Return list of page objects with Verification.state == 'expired'.\"\"\"\n    # Query all pages (API max 100 per call). If many pages expected, iterate.\n    results = notion.databases.query(database_id=db_id).get(\"results\", [])\n    expired = []\n    for page in results:\n        verification_prop = page.get(\"properties\", {}).get(\"Verification\", {})\n        state = verification_prop.get(\"verification\", {}).get(\"state\")\n        # Skip the IT Inventory database entry\n        title_prop = page.get(\"properties\", {}).get(\"Page\", {}).get(\"title\", [])\n        title_text = title_prop[0].get(\"plain_text\") if title_prop else \"\"\n        if title_text.strip().lower() == \"it inventory\":\n            continue\n\n        if state and \"expired\" in state.lower():\n            expired.append(page)\n    return expired\n\n\ndef _check_callout_present(notion: Client, page_id: str) -> bool:\n    \"\"\"Verify the specified callout is the first child block of the page.\"\"\"\n    children = notion.blocks.children.list(block_id=page_id, page_size=1).get(\n        \"results\", []\n    )\n    if not children:\n        return False\n    first_block = children[0]\n    if first_block.get(\"type\") != \"callout\":\n        return False\n    data = first_block.get(\"callout\", {})\n    # Check color\n    if data.get(\"color\") != CALL_OUT_COLOR:\n        return False\n\n    # Check icon\n    icon = data.get(\"icon\", {})\n    if icon.get(\"type\") != \"emoji\" or icon.get(\"emoji\") != CALL_OUT_ICON:\n        return False\n\n    # Check text content (callout rich text plain text)\n    plain_text = notion_utils.get_block_plain_text(first_block)\n    return CALL_OUT_TEXT in plain_text\n\n\ndef _find_request_page(notion: Client, db_id: str) -> dict | None:\n    \"\"\"Find the IT Request page with the expected title.\"\"\"\n    # Use a simple search inside database\n    res = notion.databases.query(\n        database_id=db_id,\n        filter={\"property\": \"Task name\", \"title\": {\"equals\": REQUEST_TITLE}},\n    ).get(\"results\", [])\n    return res[0] if res else None\n\n\ndef _check_request_properties(page: dict) -> bool:\n    props = page.get(\"properties\", {})\n    priority = props.get(\"Priority\", {}).get(\"select\", {}).get(\"name\")\n    status = (\n        props.get(\"Status\", {}).get(\"status\", {}).get(\"name\")\n        if props.get(\"Status\", {}).get(\"status\")\n        else props.get(\"Status\", {}).get(\"select\", {}).get(\"name\")\n    )\n    return priority == PRIORITY_HIGH and status == STATUS_IN_PROGRESS\n\n\ndef _request_page_contains_mentions(\n    notion: Client, request_page_id: str, expected_page_ids: list[str]\n) -> bool:\n    children = notion.blocks.children.list(block_id=request_page_id, page_size=100).get(\n        \"results\", []\n    )\n    bullet_blocks = [b for b in children if b.get(\"type\") == \"bulleted_list_item\"]\n    mentioned_ids: set[str] = set()\n    for block in bullet_blocks:\n        rich_text = block.get(\"bulleted_list_item\", {}).get(\"rich_text\", [])\n        for rt in rich_text:\n            if rt.get(\"type\") == \"mention\":\n                mention = rt.get(\"mention\", {})\n                if mention.get(\"type\") == \"page\":\n                    mentioned_ids.add(mention.get(\"page\", {}).get(\"id\"))\n    if len(mentioned_ids) < len(expected_page_ids):\n        return False\n    return all(pid in mentioned_ids for pid in expected_page_ids)\n\n\ndef verify(notion: Client, main_id: str | None = None) -> bool:\n    main_page_id = _get_main_page_id(notion, main_id)\n    if not main_page_id:\n        print(\n            \"Error: Could not locate the main page 'It Trouble Shooting Hub'.\",\n            file=sys.stderr,\n        )\n        return False\n\n    # Locate required databases\n    it_home_db_id = _fetch_database_id(notion, main_page_id, IT_HOMEPAGE_DB_TITLE)\n    it_req_db_id = _fetch_database_id(notion, main_page_id, IT_REQUESTS_DB_TITLE)\n    if not all([it_home_db_id, it_req_db_id]):\n        print(\n            \"Error: Required databases not found under the main page.\", file=sys.stderr\n        )\n        return False\n\n    # Identify expired pages\n    expired_pages = _expired_pages(notion, it_home_db_id)\n    if not expired_pages:\n        print(\n            \"Failure: No expired pages found; expected at least one for this task.\",\n            file=sys.stderr,\n        )\n        return False\n\n    # Verify callout on each expired page\n    for pg in expired_pages:\n        pid = pg[\"id\"]\n        if not _check_callout_present(notion, pid):\n            print(\n                f\"Failure: Callout missing or incorrect on page {pid}.\", file=sys.stderr\n            )\n            return False\n\n    # Verify IT Request entry\n    request_page = _find_request_page(notion, it_req_db_id)\n    if not request_page:\n        print(\n            \"Failure: IT Request 'Batch Verification Update Required' not found.\",\n            file=sys.stderr,\n        )\n        return False\n    if not _check_request_properties(request_page):\n        print(\"Failure: Priority or Status incorrect on IT Request.\", file=sys.stderr)\n        return False\n\n    # Verify bullet list in IT Request body\n    expired_titles = []\n    for p in expired_pages:\n        title_prop = p.get(\"properties\", {}).get(\"Page\", {}).get(\"title\", [])\n        title_text = title_prop[0].get(\"plain_text\") if title_prop else None\n        if title_text:\n            expired_titles.append(title_text)\n    expected_page_ids = [p[\"id\"] for p in expired_pages]\n    if not _request_page_contains_mentions(\n        notion, request_page[\"id\"], expected_page_ids\n    ):\n        print(\n            \"Failure: IT Request body does not contain mentions for all affected pages.\",\n            file=sys.stderr,\n        )\n        return False\n\n    print(\"Success: All verification checks passed.\")\n    return True\n\n\ndef main():\n    notion = notion_utils.get_notion_client()\n    main_id = sys.argv[1] if len(sys.argv) > 1 else None\n    if verify(notion, main_id):\n        sys.exit(0)\n    sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()\n"
}