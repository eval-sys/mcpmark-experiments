{
  "task_id": "search_filtering_operations",
  "task_name": "Search Filtering Operations",
  "category_id": "shopping_admin",
  "category_name": "Shopping Admin",
  "description": "Configure advanced search and filtering systems in admin interface, implement category hierarchies, set up attribute filters, and optimize search algorithms for user experience.",
  "author": "Fanqing Meng",
  "created_at": "2025-08-17",
  "difficulty": "L3",
  "tags": [
    "content submission"
  ],
  "mcp": [
    "playwright"
  ],
  "meta_data": {
    "stateType": "video",
    "stateContent": null,
    "stateUrl": "https://storage.mcpmark.ai/tasks_state/playwright_video/magento-admin.mp4",
    "stateOriginalUrl": "https://github.com/web-arena-x/webarena/tree/main/environment_docker"
  },
  "instruction": "Perform comprehensive search and filtering operations in the Magento Admin panel to extract specific business insights using advanced search techniques.\n\n**Task Requirements:**\n\n1. Login with username 'admin' and password 'admin1234'\n\n2. To analyze search behavior and term effectiveness, check the Search Terms of Marketing and perform complex filtering:\n   - Search for all terms containing 'tank' in their name - count the exact number of results\n   - Clear filters and find terms with exactly 0 results - count how many such terms exist\n   - Apply a filter to show only terms with more than 10 uses - record the term with highest uses and its count (You need to see how many there are and record them all.)\n   - Find the search term that has results between 20-30 - record its name and exact result count\n\n3. To gather detailed marketing insights from search data, go to Search Terms in Reports:\n   - Apply filter for terms with more than 15 hits - count total filtered results\n   - Find the term with ID between 10-15 that has the most results - record term name and result count (You need to see how many there are and record them all.)\n   - Filter to show only terms from \"Default Store View\" - count total results\n\n4. To examine real-time search trends and top performers, from the Dashboard, perform targeted searches:\n   - In the 'Top Search Terms' table, find the term with exactly 1 result - record its name and uses\n   - In the 'Last Search Terms' table, identify the term with the both the highest number of results and uses - record name and the number of results\n   - In the 'Bestsellers' tab, find the product at position #3 - record name and quantity\n\n5. To identify patterns in search usage and results, navigate to Search Terms (main grid) in step 2:\n   - Sort by 'Uses' column (descending) - record the top term and its uses count\n   - Sort by 'Results' column (ascending) - record the first non-zero result term and its count\n   - Count total number of unique search terms in the system\n\n6. To provide a comprehensive report of all gathered data, compile all findings and output in the following exact format:\n\n```\n<answer>\nTankSearchCount|count\nZeroResultsCount|count\nHighestUseTerm|term:uses\nResults20to30Term|term1:results1|term2:result2|term3:result3|...\nHits15PlusCount|count\nID10to15MaxResults|term:results\nDefaultStoreViewCount|count\nOneResultTerm|term1:uses1|term2:uses2|term3:uses3|...\nHighestResultLastSearch|term:results\nPosition3Bestseller|product:quantity\nTopUseTerm|term:uses\nFirstNonZeroResult|term:results\nTotalUniqueTerms|count\n</answer>\n```\n\n**Example Output:**\n```\n<answer>\nTankSearchCount|X\nZeroResultsCount|X\nHighestUseTerm|search_term:XX\nResults20to30Term|search_term1:XX1|search_term2:XX2|search_term3:XX3|...\nHits15PlusCount|X\nID10to15MaxResults|Product Name:XX\nDefaultStoreViewCount|X\nOneResultTerm|search_term1:XX1|search_term2:XX2|search_term3:XX3|...\nHighestResultLastSearch|search_term:XX\nPosition3Bestseller|Product Name:X\nTopUseTerm|search_term:XX\nFirstNonZeroResult|search_term:X\nTotalUniqueTerms|X\n</answer>\n```\n\n**Success Criteria:**\n- Successfully logged into Magento Admin\n- Applied complex search filters in Search Terms section\n- Used range filters for results and hits\n- Sorted columns to find specific records\n- Navigated between different report views\n- Extracted data from filtered and sorted results\n- Counted records accurately after applying filters\n- Output answer in exact format with 13 data lines\n- Answer wrapped in <answer> tags",
  "verify": "import re\nimport json\nimport os\nimport sys\n\n\ndef verify(messages):\n    \"\"\"\n    Verify that the agent has successfully performed complex search and filtering operations\n    in the Magento Admin panel and extracted all required information correctly.\n\n    Args:\n        messages: List of message dictionaries containing the conversation\n\n    Returns:\n        Dictionary with 'valid' boolean and 'reason' string\n    \"\"\"\n\n    # Find the last assistant message with status \"completed\" and type \"message\"\n    answer_content = None\n    for message in reversed(messages):\n        if (\n            message.get(\"role\") == \"assistant\"\n            and message.get(\"status\") == \"completed\"\n            and message.get(\"type\") == \"message\"\n            and message.get(\"content\")\n        ):\n            # Extract text from content structure\n            content = message[\"content\"]\n            if isinstance(content, list):\n                for item in content:\n                    if isinstance(item, dict) and item.get(\"type\") == \"output_text\":\n                        text = item.get(\"text\", \"\")\n                        # Look for answer tags with case-insensitive search\n                        answer_match = re.search(\n                            r\"<answer>(.*?)</answer>\", text, re.DOTALL | re.IGNORECASE\n                        )\n                        if answer_match:\n                            answer_content = answer_match.group(1).strip()\n                            break\n            elif isinstance(content, str):\n                # Look for answer tags in string content\n                answer_match = re.search(r\"<answer>(.*?)</answer>\", content, re.DOTALL | re.IGNORECASE)\n                if answer_match:\n                    answer_content = answer_match.group(1).strip()\n                    break\n\n            if answer_content:\n                break\n\n    if not answer_content:\n        return {\"valid\": False, \"reason\": \"No answer found in <answer> tags\"}\n\n    # Expected format - each line should have a key|value pair\n    expected_keys = [\n        \"TankSearchCount\",\n        \"ZeroResultsCount\",\n        \"HighestUseTerm\",\n        \"Results20to30Term\",\n        \"Hits15PlusCount\",\n        \"ID10to15MaxResults\",\n        \"DefaultStoreViewCount\",\n        \"OneResultTerm\",\n        \"HighestResultLastSearch\",\n        \"Position3Bestseller\",\n        \"TopUseTerm\",\n        \"FirstNonZeroResult\",\n        \"TotalUniqueTerms\",\n    ]\n\n    # Parse the answer\n    lines = answer_content.strip().split(\"\\n\")\n\n    # Check if we have exactly 13 lines\n    if len(lines) != 13:\n        return {\"valid\": False, \"reason\": f\"Expected 13 data lines, found {len(lines)}\"}\n\n    # Parse each line and validate format\n    extracted_data = {}\n    for line in lines:\n        if \"|\" not in line:\n            return {\n                \"valid\": False,\n                \"reason\": f\"Invalid format in line: {line}. Expected 'key|value' format\",\n            }\n\n        parts = line.split(\"|\", 1)\n        if len(parts) != 2:\n            return {\"valid\": False, \"reason\": f\"Invalid format in line: {line}\"}\n\n        key, value = parts\n        extracted_data[key] = value\n\n    # Check all required keys are present\n    missing_keys = set(expected_keys) - set(extracted_data.keys())\n    if missing_keys:\n        return {\n            \"valid\": False,\n            \"reason\": f\"Missing required keys: {', '.join(missing_keys)}\",\n        }\n\n    # Validate specific data formats and expected values based on the current data\n\n    # 1. TankSearchCount should be a number (2 terms containing 'tank')\n    if not extracted_data[\"TankSearchCount\"].isdigit():\n        return {\n            \"valid\": False,\n            \"reason\": f\"TankSearchCount should be a number, got: {extracted_data['TankSearchCount']}\",\n        }\n\n    # Expected: \"Antonia Racer Tank\" and \"tanks\" contain 'tank'\n    if extracted_data[\"TankSearchCount\"] != \"2\":\n        return {\n            \"valid\": False,\n            \"reason\": f\"TankSearchCount should be '2', got: {extracted_data['TankSearchCount']}\",\n        }\n\n    # 2. ZeroResultsCount should be a number (nike has 0 results)\n    if not extracted_data[\"ZeroResultsCount\"].isdigit():\n        return {\n            \"valid\": False,\n            \"reason\": f\"ZeroResultsCount should be a number, got: {extracted_data['ZeroResultsCount']}\",\n        }\n\n    if extracted_data[\"ZeroResultsCount\"] != \"1\":\n        return {\n            \"valid\": False,\n            \"reason\": f\"ZeroResultsCount should be '1', got: {extracted_data['ZeroResultsCount']}\",\n        }\n\n    # 3. HighestUseTerm should be in format \"term:uses\"\n    if \":\" not in extracted_data[\"HighestUseTerm\"]:\n        return {\n            \"valid\": False,\n            \"reason\": f\"HighestUseTerm should be in format 'term:uses', got: {extracted_data['HighestUseTerm']}\",\n        }\n\n    # hollister has 19 uses (highest among terms with > 10 uses)\n    if extracted_data[\"HighestUseTerm\"] != \"hollister:19\":\n        return {\n            \"valid\": False,\n            \"reason\": f\"HighestUseTerm should be 'hollister:19', got: {extracted_data['HighestUseTerm']}\",\n        }\n\n    # 4. Results20to30Term should be in format \"term:results\"\n    if \":\" not in extracted_data[\"Results20to30Term\"]:\n        return {\n            \"valid\": False,\n            \"reason\": f\"Results20to30Term should be in format 'term:results', got: {extracted_data['Results20to30Term']}\",\n        }\n\n    # Both \"tanks\" and \"Antonia Racer Tank\" have 23 results (between 20-30)\n    valid_results20to30 = [\"tanks:23\", \"Antonia Racer Tank:23\"]\n    # Check if answer contains one of the valid values or both separated by |\n    if not any(\n        val in extracted_data[\"Results20to30Term\"] for val in valid_results20to30\n    ):\n        return {\n            \"valid\": False,\n            \"reason\": f\"Results20to30Term should contain 'tanks:23' or 'Antonia Racer Tank:23', got: {extracted_data['Results20to30Term']}\",\n        }\n\n    # 5. Hits15PlusCount should be a number (only hollister has 19 hits > 15)\n    if not extracted_data[\"Hits15PlusCount\"].isdigit():\n        return {\n            \"valid\": False,\n            \"reason\": f\"Hits15PlusCount should be a number, got: {extracted_data['Hits15PlusCount']}\",\n        }\n\n    if extracted_data[\"Hits15PlusCount\"] != \"1\":\n        return {\n            \"valid\": False,\n            \"reason\": f\"Hits15PlusCount should be '1', got: {extracted_data['Hits15PlusCount']}\",\n        }\n\n    # 6. ID10to15MaxResults should be in format \"term:results\"\n    if \":\" not in extracted_data[\"ID10to15MaxResults\"]:\n        return {\n            \"valid\": False,\n            \"reason\": f\"ID10to15MaxResults should be in format 'term:results', got: {extracted_data['ID10to15MaxResults']}\",\n        }\n\n    # ID 11 is hollister (1 result), ID 13 is Antonia Racer Tank (23 results)\n    if extracted_data[\"ID10to15MaxResults\"] != \"Antonia Racer Tank:23\":\n        return {\n            \"valid\": False,\n            \"reason\": f\"ID10to15MaxResults should be 'Antonia Racer Tank:23', got: {extracted_data['ID10to15MaxResults']}\",\n        }\n\n    # 7. DefaultStoreViewCount should be a number (all 7 terms are from Default Store View)\n    if not extracted_data[\"DefaultStoreViewCount\"].isdigit():\n        return {\n            \"valid\": False,\n            \"reason\": f\"DefaultStoreViewCount should be a number, got: {extracted_data['DefaultStoreViewCount']}\",\n        }\n\n    if extracted_data[\"DefaultStoreViewCount\"] != \"7\":\n        return {\n            \"valid\": False,\n            \"reason\": f\"DefaultStoreViewCount should be '7', got: {extracted_data['DefaultStoreViewCount']}\",\n        }\n\n    # 8. OneResultTerm should be in format \"term:uses\"\n    if \":\" not in extracted_data[\"OneResultTerm\"]:\n        return {\n            \"valid\": False,\n            \"reason\": f\"OneResultTerm should be in format 'term:uses', got: {extracted_data['OneResultTerm']}\",\n        }\n\n    # Both hollister and WP10 have exactly 1 result\n    valid_one_result = [\"hollister:19\", \"WP10:1\"]\n    if not any(val in extracted_data[\"OneResultTerm\"] for val in valid_one_result):\n        return {\n            \"valid\": False,\n            \"reason\": f\"OneResultTerm should contain 'hollister:19' or 'WP10:1', got: {extracted_data['OneResultTerm']}\",\n        }\n\n    # 9. HighestResultLastSearch should be in format \"term:results\"\n    if \":\" not in extracted_data[\"HighestResultLastSearch\"]:\n        return {\n            \"valid\": False,\n            \"reason\": f\"HighestResultLastSearch should be in format 'term:results', got: {extracted_data['HighestResultLastSearch']}\",\n        }\n\n    # In Last Search Terms: tanks and Antonia Racer Tank both have 23 results (highest)\n    valid_highest_last = [\"tanks:23\", \"Antonia Racer Tank:23\"]\n    if not any(\n        val in extracted_data[\"HighestResultLastSearch\"] for val in valid_highest_last\n    ):\n        return {\n            \"valid\": False,\n            \"reason\": f\"HighestResultLastSearch should contain 'tanks:23' or 'Antonia Racer Tank:23', got: {extracted_data['HighestResultLastSearch']}\",\n        }\n\n    # 10. Position3Bestseller should be in format \"product:quantity\"\n    if \":\" not in extracted_data[\"Position3Bestseller\"]:\n        return {\n            \"valid\": False,\n            \"reason\": f\"Position3Bestseller should be in format 'product:quantity', got: {extracted_data['Position3Bestseller']}\",\n        }\n\n    # Position 3 in Bestsellers is \"Sprite Stasis Ball 65 cm\" with quantity 6\n    if extracted_data[\"Position3Bestseller\"] != \"Sprite Stasis Ball 65 cm:6\":\n        return {\n            \"valid\": False,\n            \"reason\": f\"Position3Bestseller should be 'Sprite Stasis Ball 65 cm:6', got: {extracted_data['Position3Bestseller']}\",\n        }\n\n    # 11. TopUseTerm should be in format \"term:uses\"\n    if \":\" not in extracted_data[\"TopUseTerm\"]:\n        return {\n            \"valid\": False,\n            \"reason\": f\"TopUseTerm should be in format 'term:uses', got: {extracted_data['TopUseTerm']}\",\n        }\n\n    # hollister has 19 uses (highest)\n    if extracted_data[\"TopUseTerm\"] != \"hollister:19\":\n        return {\n            \"valid\": False,\n            \"reason\": f\"TopUseTerm should be 'hollister:19', got: {extracted_data['TopUseTerm']}\",\n        }\n\n    # 12. FirstNonZeroResult should be in format \"term:results\"\n    if \":\" not in extracted_data[\"FirstNonZeroResult\"]:\n        return {\n            \"valid\": False,\n            \"reason\": f\"FirstNonZeroResult should be in format 'term:results', got: {extracted_data['FirstNonZeroResult']}\",\n        }\n\n    # When sorted by results ascending, first non-zero is WP10 (has 1 result)\n    if extracted_data[\"FirstNonZeroResult\"] != \"WP10:1\":\n        return {\n            \"valid\": False,\n            \"reason\": f\"FirstNonZeroResult should be 'WP10:1', got: {extracted_data['FirstNonZeroResult']}\",\n        }\n\n    # 13. TotalUniqueTerms should be a number\n    if not extracted_data[\"TotalUniqueTerms\"].isdigit():\n        return {\n            \"valid\": False,\n            \"reason\": f\"TotalUniqueTerms should be a number, got: {extracted_data['TotalUniqueTerms']}\",\n        }\n\n    # There are 7 unique search terms in the system\n    if extracted_data[\"TotalUniqueTerms\"] != \"7\":\n        return {\n            \"valid\": False,\n            \"reason\": f\"TotalUniqueTerms should be '7', got: {extracted_data['TotalUniqueTerms']}\",\n        }\n\n    # All validations passed\n    return {\n        \"valid\": True,\n        \"reason\": \"All complex search and filtering operations completed successfully\",\n    }\n\n\nif __name__ == \"__main__\":\n    # Load messages from environment variable\n    messages_path = os.getenv(\"MCP_MESSAGES\")\n    if not messages_path:\n        print(\n            json.dumps(\n                {\"valid\": False, \"reason\": \"MCP_MESSAGES environment variable not set\"}\n            )\n        )\n        exit(1)\n\n    try:\n        with open(messages_path, \"r\") as f:\n            messages = json.load(f)\n    except Exception as e:\n        print(\n            json.dumps({\"valid\": False, \"reason\": f\"Failed to load messages: {str(e)}\"})\n        )\n        exit(1)\n\n    # Run verification\n    result = verify(messages)\n    print(json.dumps(result))\n    # Exit with appropriate code based on verification result\n    sys.exit(0 if result[\"valid\"] else 1)\n"
}