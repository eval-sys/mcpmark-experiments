{
  "task_id": "learning_metrics_dashboard",
  "task_name": "Learning Metrics Dashboard",
  "category_id": "python_roadmap",
  "category_name": "Python Roadmap",
  "description": "Create a comprehensive Learning Metrics Dashboard section displaying precise statistics and recommendations based on the Steps database.",
  "author": "Lingjun Chen",
  "created_at": "2025-08-02",
  "difficulty": "L3",
  "tags": [
    "data aggregation",
    "conditional filtering",
    "report generation",
    "visual formatting"
  ],
  "mcp": [
    "notion"
  ],
  "metadata": {
    "ori_template_url": "https://painted-tennis-ebc.notion.site/Python-Roadmap-25281626b6d78012bf2bce1fa8711f4d",
    "gt_page_url": "https://www.notion.so/Python-Roadmap-Leanring-Metrics-Dashboard-24e2b7e8cebd809eafdbeff01bc873df"
  },
  "instruction": "# Task: Learning Metrics Dashboard\n\n## Objective\nCreate a comprehensive Learning Metrics Dashboard section in the Python Roadmap page that displays precise statistics and recommendations based on the Steps database content.\n\n## Requirements\n\n### 1. Section Placement\n- Add new content immediately after the Learning Materials section (before `Whether you're starting from scratch or`).\n\n### 2. Dashboard Header\n- **Type**: heading_3\n- **Text**: `📊 Learning Metrics Dashboard`\n\n### 3. Course Statistics Block\n- **Type**: callout\n- **Background Color**: Brown\n- **Icon**: None\n- **Title**: **Course Statistics** (bold, heading_3). Use the same color scheme as other callout headings.\n- **Content**: Bulleted list with the following items in exact order:\n  - `Total Lessons: [X]` (count all entries in Steps database)\n  - `Completed: [X] ([Y]%)` (count Status=\"Done\", calculate percentage to 1 decimal)\n  - `In Progress: [X] ([Y]%)` (count Status=\"In Progress\", calculate percentage to 1 decimal)\n  - `Beginner Level: [X] lessons ([Y] completed)` (filter by Chapters relation to Beginner Level)\n  - `Intermediate Level: [X] lessons ([Y] completed)` (filter by Chapters relation to Intermediate Level)\n  - `Advanced Level: [X] lessons ([Y] completed)` (filter by Chapters relation to Advanced Level)\n\n### 4. Completed Topics Section\n- **Type**: toggle\n- **Text**: `🏆 Completed Topics (Click to expand)`\n- **Nested Content**: Numbered list containing exactly 5 items\n  - List lessons with Status=\"Done\"",
  "verify": "import sys\nfrom notion_client import Client\nfrom tasks.utils import notion_utils\n\ndef get_page_title_from_result(page_result):\n    \"\"\"\n    Extract the title from a page result object from database query.\n    \"\"\"\n    properties = page_result.get('properties', {})\n    # Try common title property names\n    for prop_name in ['Name', 'Title', 'title', 'Lessons']:\n        if prop_name in properties:\n            prop = properties[prop_name]\n            if prop.get('type') == 'title':\n                title_array = prop.get('title', [])\n                if title_array and len(title_array) > 0:\n                    return title_array[0].get('plain_text', '')\n    return ''\n\ndef verify(notion: Client, main_id: str = None) -> bool:\n    \"\"\"\n    Verifies that the Learning Metrics Dashboard has been implemented correctly according to description.md.\n    \"\"\"\n    # Step 1: Find the main page and get all blocks\n    if main_id:\n        found_id, object_type = notion_utils.find_page_or_database_by_id(notion, main_id)\n        if not found_id or object_type != 'page':\n            print(\"Error: Main page not found.\", file=sys.stderr)\n            return False\n    else:\n        # Try to find the main page by searching\n        found_id = notion_utils.find_page(notion, \"Python Roadmap\")\n        if not found_id:\n            print(\"Error: Main page not found.\", file=sys.stderr)\n            return False\n    \n    print(f\"Found main page: {found_id}\")\n    \n    # Get Steps database to calculate expected statistics\n    steps_db_id = notion_utils.find_database(notion, \"Steps\")\n    if not steps_db_id:\n        print(\"Error: Steps database not found.\", file=sys.stderr)\n        return False\n    \n    # Query Steps database to get all lessons\n    steps_data = notion.databases.query(database_id=steps_db_id)\n    total_lessons = len(steps_data['results'])\n    completed_count = 0\n    in_progress_count = 0\n    completed_lessons = []\n    \n    # Get Chapters database for level information\n    chapters_db_id = notion_utils.find_database(notion, \"Chapters\")\n    if not chapters_db_id:\n        print(\"Error: Chapters database not found.\", file=sys.stderr)\n        return False\n    \n    # Query Chapters database to get level information\n    chapters_data = notion.databases.query(database_id=chapters_db_id)\n    level_ids = {\n        'Beginner Level': None,\n        'Intermediate Level': None,\n        'Advanced Level': None\n    }\n    \n    for chapter in chapters_data['results']:\n        chapter_name = get_page_title_from_result(chapter)\n        if chapter_name in level_ids:\n            level_ids[chapter_name] = chapter['id']\n    \n    # Initialize level counts\n    level_counts = {\n        'Beginner Level': {'total': 0, 'completed': 0},\n        'Intermediate Level': {'total': 0, 'completed': 0},\n        'Advanced Level': {'total': 0, 'completed': 0}\n    }\n    \n    # Count lessons by status and level\n    for lesson in steps_data['results']:\n        status = lesson['properties']['Status']['status']\n        if status and status['name'] == 'Done':\n            completed_count += 1\n            lesson_title = get_page_title_from_result(lesson)\n            if lesson_title:\n                completed_lessons.append(lesson_title)\n        elif status and status['name'] == 'In Progress':\n            in_progress_count += 1\n        \n        # Count by level\n        chapters_relation = lesson['properties']['Chapters']['relation']\n        for chapter_ref in chapters_relation:\n            chapter_id = chapter_ref['id']\n            for level_name, level_id in level_ids.items():\n                if chapter_id == level_id:\n                    level_counts[level_name]['total'] += 1\n                    if status and status['name'] == 'Done':\n                        level_counts[level_name]['completed'] += 1\n    \n    # Calculate percentages\n    completed_percentage = round((completed_count / total_lessons * 100), 1) if total_lessons > 0 else 0\n    in_progress_percentage = round((in_progress_count / total_lessons * 100), 1) if total_lessons > 0 else 0\n    \n    print(f\"Expected statistics:\")\n    print(f\"  Total Lessons: {total_lessons}\")\n    print(f\"  Completed: {completed_count} ({completed_percentage}%)\")\n    print(f\"  In Progress: {in_progress_count} ({in_progress_percentage}%)\")\n    print(f\"  Beginner Level: {level_counts['Beginner Level']['total']} lessons ({level_counts['Beginner Level']['completed']} completed)\")\n    print(f\"  Intermediate Level: {level_counts['Intermediate Level']['total']} lessons ({level_counts['Intermediate Level']['completed']} completed)\")\n    print(f\"  Advanced Level: {level_counts['Advanced Level']['total']} lessons ({level_counts['Advanced Level']['completed']} completed)\")\n    print(f\"  Completed lessons (first 5): {completed_lessons[:5]}\")\n    \n    # Get all blocks from the page\n    all_blocks = notion_utils.get_all_blocks_recursively(notion, found_id)\n    print(f\"Found {len(all_blocks)} blocks\")\n    \n    # Step 2: Verify the required elements in order\n    learning_materials_idx = -1\n    dashboard_heading_idx = -1\n    callout_idx = -1\n    toggle_idx = -1\n    whether_paragraph_idx = -1  # Track the \"Whether you're starting from scratch\" paragraph\n    \n    # Track what we've verified\n    callout_has_brown_bg = False\n    callout_has_no_icon = False\n    callout_has_course_statistics_title = False\n    callout_title_has_correct_colors = False\n    statistics_items_found = []\n    completed_topics_found = []\n    \n    # Expected statistics content\n    expected_statistics = [\n        f\"Total Lessons: {total_lessons}\",\n        f\"Completed: {completed_count} ({completed_percentage}%)\",\n        f\"In Progress: {in_progress_count} ({in_progress_percentage}%)\",\n        f\"Beginner Level: {level_counts['Beginner Level']['total']} lessons ({level_counts['Beginner Level']['completed']} completed)\",\n        f\"Intermediate Level: {level_counts['Intermediate Level']['total']} lessons ({level_counts['Intermediate Level']['completed']} completed)\",\n        f\"Advanced Level: {level_counts['Advanced Level']['total']} lessons ({level_counts['Advanced Level']['completed']} completed)\"\n    ]\n    \n    # Check blocks in order\n    for i, block in enumerate(all_blocks):\n        if block is None:\n            continue\n            \n        block_type = block.get(\"type\")\n        \n        # 1. Check for Learning Materials heading (requirement 1)\n        if learning_materials_idx == -1 and block_type == \"heading_3\":\n            block_text = notion_utils.get_block_plain_text(block)\n            if \"🎓 Learning Materials\" in block_text or \"Learning Materials\" in block_text:\n                learning_materials_idx = i\n                print(f\"✓ Requirement 1: Found Learning Materials heading at position {i}\")\n        \n        # 2. Check for Learning Metrics Dashboard heading after Learning Materials (requirement 2)\n        elif learning_materials_idx != -1 and dashboard_heading_idx == -1 and block_type == \"heading_3\":\n            block_text = notion_utils.get_block_plain_text(block)\n            if \"📊 Learning Metrics Dashboard\" in block_text:\n                dashboard_heading_idx = i\n                print(f\"✓ Requirement 2: Found Learning Metrics Dashboard heading at position {i}\")\n        \n        # 3. Check for callout block after Dashboard heading (requirement 3)\n        elif dashboard_heading_idx != -1 and callout_idx == -1 and block_type == \"callout\":\n            callout_idx = i\n            print(f\"  Found callout block at position {i}\")\n            \n            # Check brown background (requirement 3.1)\n            if block.get(\"callout\", {}).get(\"color\") == \"brown_background\":\n                callout_has_brown_bg = True\n                print(f\"  ✓ Requirement 3.1: Callout has brown background\")\n            \n            # Check no icon (requirement 3.2)\n            icon = block.get(\"callout\", {}).get(\"icon\")\n            if icon is None:\n                callout_has_no_icon = True\n                print(f\"  ✓ Requirement 3.2: Callout has no icon\")\n            \n            # Get nested blocks for Course Statistics title and content\n            nested_blocks = notion_utils.get_all_blocks_recursively(notion, block.get(\"id\"))\n            \n            for nested in nested_blocks:\n                # Check for heading_3 only as per requirement\n                if nested and nested.get(\"type\") == \"heading_3\":\n                    # Check for \"Course Statistics\" title with correct formatting\n                    rich_text = nested.get(\"heading_3\", {}).get(\"rich_text\", [])\n                    course_found = False\n                    course_correct = False\n                    statistics_found = False\n                    statistics_correct = False\n                    \n                    for text_item in rich_text:\n                        text_content = text_item.get(\"text\", {}).get(\"content\", \"\")\n                        annotations = text_item.get(\"annotations\", {})\n                        color = annotations.get(\"color\", \"default\")\n                        is_bold = annotations.get(\"bold\", False)\n                        \n                        if \"Course\" in text_content:\n                            course_found = True\n                            # Check if Course is blue and bold\n                            if color == \"blue\" and is_bold:\n                                course_correct = True\n                                print(f\"  ✓ 'Course' has blue color and is bold\")\n                            else:\n                                print(f\"  ✗ 'Course' color: {color}, bold: {is_bold} (should be blue and bold)\")\n                            \n                        if \"Statistics\" in text_content:\n                            statistics_found = True\n                            # Check if Statistics is yellow and bold\n                            if color == \"yellow\" and is_bold:\n                                statistics_correct = True\n                                print(f\"  ✓ 'Statistics' has yellow color and is bold\")\n                            else:\n                                print(f\"  ✗ 'Statistics' color: {color}, bold: {is_bold} (should be yellow and bold)\")\n                    \n                    if course_found and statistics_found:\n                        callout_has_course_statistics_title = True\n                        if course_correct and statistics_correct:\n                            callout_title_has_correct_colors = True\n                            print(f\"  ✓ Requirement 3.3: Callout has 'Course Statistics' title with correct colors\")\n                        else:\n                            print(f\"  ✗ Requirement 3.3: Title found but colors/formatting incorrect\")\n                \n                # Check for statistics items in bulleted list\n                elif nested and nested.get(\"type\") == \"bulleted_list_item\":\n                    item_text = notion_utils.get_block_plain_text(nested)\n                    for expected_item in expected_statistics:\n                        if expected_item in item_text:\n                            if expected_item not in statistics_items_found:\n                                statistics_items_found.append(expected_item)\n                                print(f\"  ✓ Requirement 3.4: Found statistics item: {expected_item}\")\n        \n        # 4. Check for Completed Topics toggle after callout (requirement 4)\n        elif callout_idx != -1 and toggle_idx == -1 and block_type == \"toggle\":\n            block_text = notion_utils.get_block_plain_text(block)\n            if \"🏆 Completed Topics (Click to expand)\" in block_text:\n                toggle_idx = i\n                print(f\"✓ Requirement 4: Found Completed Topics toggle at position {i}\")\n                \n                # Get nested blocks for completed topics list\n                nested_blocks = notion_utils.get_all_blocks_recursively(notion, block.get(\"id\"))\n                for nested in nested_blocks:\n                    if nested and nested.get(\"type\") == \"numbered_list_item\":\n                        item_text = notion_utils.get_block_plain_text(nested)\n                        if item_text and item_text in completed_lessons:\n                            completed_topics_found.append(item_text)\n                            print(f\"  ✓ Requirement 4.1: Found completed topic: {item_text}\")\n        \n        # 5. Check for \"Whether you're starting from scratch\" paragraph (should be after dashboard content)\n        elif block_type == \"paragraph\" and whether_paragraph_idx == -1:\n            block_text = notion_utils.get_block_plain_text(block)\n            if \"Whether you're starting from scratch\" in block_text or \"Whether you're starting from scratch\" in block_text:\n                whether_paragraph_idx = i\n                print(f\"  Found 'Whether you're starting from scratch' paragraph at position {i}\")\n    \n    # Step 3: Verify all requirements were met\n    print(f\"\\nVerification Summary:\")\n    \n    all_passed = True\n    \n    # Requirement 1: Learning Materials section found\n    if learning_materials_idx == -1:\n        print(\"✗ Requirement 1: Learning Materials section NOT found\", file=sys.stderr)\n        all_passed = False\n    else:\n        print(\"✓ Requirement 1: Learning Materials section found\")\n    \n    # Requirement 2: Learning Metrics Dashboard heading after Learning Materials and before \"Whether...\" paragraph\n    if dashboard_heading_idx == -1:\n        print(\"✗ Requirement 2: Learning Metrics Dashboard heading NOT found\", file=sys.stderr)\n        all_passed = False\n    elif dashboard_heading_idx <= learning_materials_idx:\n        print(\"✗ Requirement 2: Learning Metrics Dashboard heading not AFTER Learning Materials\", file=sys.stderr)\n        all_passed = False\n    elif whether_paragraph_idx != -1 and dashboard_heading_idx >= whether_paragraph_idx:\n        print(\"✗ Requirement 2: Learning Metrics Dashboard heading not BEFORE 'Whether you're starting from scratch' paragraph\", file=sys.stderr)\n        all_passed = False\n    else:\n        print(\"✓ Requirement 2: Learning Metrics Dashboard heading found after Learning Materials\")\n        if whether_paragraph_idx != -1:\n            print(\"  ✓ Dashboard content is correctly placed before 'Whether you're starting from scratch' paragraph\")\n    \n    # Requirement 3: Course Statistics callout block with all specifications\n    if callout_idx == -1:\n        print(\"✗ Requirement 3: Course Statistics callout block NOT found\", file=sys.stderr)\n        all_passed = False\n    else:\n        if not callout_has_brown_bg:\n            print(\"✗ Requirement 3.1: Callout does NOT have brown background\", file=sys.stderr)\n            all_passed = False\n        else:\n            print(\"✓ Requirement 3.1: Callout has brown background\")\n            \n        if not callout_has_no_icon:\n            print(\"✗ Requirement 3.2: Callout has an icon (should have none)\", file=sys.stderr)\n            all_passed = False\n        else:\n            print(\"✓ Requirement 3.2: Callout has no icon\")\n            \n        if not callout_has_course_statistics_title:\n            print(\"✗ Requirement 3.3: Callout does NOT have 'Course Statistics' title\", file=sys.stderr)\n            all_passed = False\n        else:\n            print(\"✓ Requirement 3.3: Callout has 'Course Statistics' title\")\n        \n        if not callout_title_has_correct_colors:\n            print(\"✗ Requirement 3.3.1: Title does NOT have correct colors (blue for Course, yellow for Statistics)\", file=sys.stderr)\n            all_passed = False\n        else:\n            print(\"✓ Requirement 3.3.1: Title has correct colors\")\n        \n        # Check all statistics items\n        missing_items = [item for item in expected_statistics if item not in statistics_items_found]\n        if missing_items:\n            print(f\"✗ Requirement 3.4: Missing statistics items: {missing_items}\", file=sys.stderr)\n            all_passed = False\n        else:\n            print(\"✓ Requirement 3.4: All 6 statistics items found\")\n    \n    # Requirement 4: Completed Topics toggle\n    if toggle_idx == -1:\n        print(\"✗ Requirement 4: Completed Topics toggle NOT found\", file=sys.stderr)\n        all_passed = False\n    elif toggle_idx <= callout_idx:\n        print(\"✗ Requirement 4: Completed Topics toggle not AFTER callout\", file=sys.stderr)\n        all_passed = False\n    else:\n        print(\"✓ Requirement 4: Completed Topics toggle found after callout\")\n        \n        # Check that exactly 5 completed topics are listed\n        if len(completed_topics_found) != 5:\n            if len(completed_topics_found) < 5:\n                print(f\"✗ Requirement 4.1: Only {len(completed_topics_found)} completed topics found (need exactly 5)\", file=sys.stderr)\n            else:\n                print(f\"✗ Requirement 4.1: Found {len(completed_topics_found)} completed topics (need exactly 5, not more)\", file=sys.stderr)\n            all_passed = False\n        else:\n            print(f\"✓ Requirement 4.1: Found exactly 5 completed topics as required\")\n    \n    # Requirement 5: Proper integration (implicitly checked by order)\n    if all_passed:\n        print(\"✓ Requirement 5: All content properly integrated in correct order\")\n    \n    return all_passed\n\ndef main():\n    \"\"\"\n    Executes the verification process and exits with a status code.\n    \"\"\"\n    notion = notion_utils.get_notion_client()\n    main_id = sys.argv[1] if len(sys.argv) > 1 else None\n    \n    if verify(notion, main_id):\n        print(\"Verification passed\")\n        sys.exit(0)\n    else:\n        print(\"Verification failed\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()",
  "model_results": {
    "k2": 0,
    "gpt-5": 0,
    "grok-4": 0,
    "gpt-4-1": 0,
    "gemini-2-5-flash": 0,
    "gemini-2-5-pro": 0,
    "gpt-5-mini": 0,
    "deepseek-chat": 0,
    "gpt-4-1-mini": 0,
    "claude-4-sonnet": 0,
    "gpt-5-nano": 0,
    "o3": 0
  }
}