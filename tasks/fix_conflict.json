{
  "task_id": "fix_conflict",
  "task_name": "Fix Conflict",
  "category_id": "harmony",
  "category_name": "Harmony",
  "description": "Resolve merge conflicts by creating missing infrastructure and ensuring conflicted PRs can merge cleanly.",
  "author": "Zijian Wu",
  "created_at": "2025-08-15",
  "difficulty": "L3",
  "tags": [
    "pr workflows"
  ],
  "mcp": [
    "github"
  ],
  "meta_data": {
    "stateType": "url",
    "stateContent": null,
    "stateUrl": "https://github.com/mcpmark-source/harmony",
    "stateOriginalUrl": "https://github.com/openai/harmony"
  },
  "instruction": "I have some pull requests that won't merge due to conflicts. Can you help me fix the merge conflicts by creating the missing infrastructure?\n\n**Step 1: Find Conflicted PR**\nLook through the open pull requests and find the one that has `mergeable: false` and `mergeable_state: \"dirty\"`. Check what file it's trying to modify - it appears to be missing a file that the PR is trying to add or modify.\n\n**Step 2: Create Infrastructure PR**  \nCreate a new branch and PR to add the missing file that the conflicted PR needs. The PR must have:\n\n- **Title**: Must contain \"Add CI infrastructure\" and \"resolve conflicts\"\n- **Body**: Must include:\n  - Reference to the conflicted PR using \"Fixes #[PR_NUMBER]\" or \"Resolves #[PR_NUMBER]\" \n  - Explanation that this \"prepares infrastructure\" for the other PR\n  - Mention of \"missing .github directory\" and \"workflow conflicts\"\n- **File Content**: Extract the complete file content from the conflicted PR's changes and add it to main. This ensures the conflicted PR can merge cleanly without conflicts.\n\n**Step 3: Merge Infrastructure PR**\nMerge the infrastructure PR to main.\n\n**Step 4: Add Comment to Original PR**\nAdd a comment to the original conflicted PR that references the infrastructure PR you just created and merged. The comment must mention the infrastructure PR number using \"PR #[NUMBER]\" format.\n\n**Step 5: Merge Original PR**\nNow merge the original conflicted PR since it should be able to merge cleanly.",
  "verify": "import sys\nimport os\nimport requests\nfrom typing import Dict, Optional, Tuple\nfrom dotenv import load_dotenv\n\n\ndef _get_github_api(\n    endpoint: str, headers: Dict[str, str], org: str, repo: str = \"harmony\"\n) -> Tuple[bool, Optional[Dict]]:\n    \"\"\"Make a GET request to GitHub API and return (success, response).\"\"\"\n    url = f\"https://api.github.com/repos/{org}/{repo}/{endpoint}\"\n    try:\n        response = requests.get(url, headers=headers)\n        if response.status_code == 200:\n            return True, response.json()\n        elif response.status_code == 404:\n            return False, None\n        else:\n            print(f\"API error for {endpoint}: {response.status_code}\", file=sys.stderr)\n            return False, None\n    except Exception as e:\n        print(f\"Exception for {endpoint}: {e}\", file=sys.stderr)\n        return False, None\n\n\ndef _check_ci_file_exists(\n    file_path: str, headers: Dict[str, str], org: str, repo: str = \"harmony\"\n) -> bool:\n    \"\"\"Check if CI file exists in main branch.\"\"\"\n    success, _ = _get_github_api(f\"contents/{file_path}?ref=main\", headers, org, repo)\n    return success\n\n\ndef _check_pr_comments(\n    pr_number: int,\n    infra_pr_number: int,\n    headers: Dict[str, str],\n    org: str,\n    repo: str = \"harmony\",\n) -> bool:\n    \"\"\"Check if PR has a comment linking to the infrastructure PR using 'PR #[NUMBER]' format.\"\"\"\n    success, comments = _get_github_api(\n        f\"issues/{pr_number}/comments\", headers, org, repo\n    )\n    if not success or not comments:\n        return False\n\n    # Look for \"PR #123\" pattern (case insensitive)\n    import re\n\n    for comment in comments:\n        body = comment.get(\"body\", \"\")\n        if re.search(rf\"PR\\s*#{infra_pr_number}\", body, re.IGNORECASE):\n            return True\n    return False\n\n\ndef _find_infrastructure_pr(\n    headers: Dict[str, str], org: str, repo: str = \"harmony\"\n) -> Optional[Dict]:\n    \"\"\"Find the infrastructure PR by checking title and body content.\"\"\"\n    success, prs = _get_github_api(\"pulls?state=all&per_page=50\", headers, org, repo)\n    if success and prs:\n        for pr in prs:\n            title = pr.get(\"title\", \"\").lower()\n            body = pr.get(\"body\", \"\").lower()\n\n            # Check title contains required keywords\n            title_ok = \"add ci infrastructure\" in title and \"resolve conflicts\" in title\n\n            # Check body contains required elements\n            has_reference = \"fixes #\" in body or \"resolves #\" in body\n            has_prep_text = \"prepares infrastructure\" in body\n            has_github_text = \"missing .github directory\" in body\n            has_workflow_text = \"workflow conflicts\" in body\n\n            body_ok = (\n                has_reference\n                and has_prep_text\n                and has_github_text\n                and has_workflow_text\n            )\n\n            if title_ok and body_ok:\n                return pr\n    return None\n\n\ndef verify() -> bool:\n    \"\"\"\n    Programmatically verify that the merge conflict resolution workflow meets the\n    requirements described in description.md.\n    \"\"\"\n    # Load environment variables from .mcp_env\n    load_dotenv(\".mcp_env\")\n\n    # Get GitHub token and org\n    github_token = os.environ.get(\"MCP_GITHUB_TOKEN\")\n    github_org = os.environ.get(\"GITHUB_EVAL_ORG\")\n\n    if not github_token:\n        print(\"Error: MCP_GITHUB_TOKEN environment variable not set\", file=sys.stderr)\n        return False\n\n    if not github_org:\n        print(\"Error: GITHUB_EVAL_ORG environment variable not set\", file=sys.stderr)\n        return False\n\n    headers = {\n        \"Authorization\": f\"token {github_token}\",\n        \"Accept\": \"application/vnd.github.v3+json\",\n    }\n\n    # Run verification checks\n    print(\"Verifying merge conflict resolution workflow completion...\")\n\n    # 1. Check that CI infrastructure file exists in main (extracted from conflicted PR)\n    print(\"1. Checking CI infrastructure was added to main...\")\n    # Check for both CI.yml and ci.yml (case-insensitive)\n    ci_exists = _check_ci_file_exists(\".github/workflows/CI.yml\", headers, github_org)\n    if not ci_exists:\n        ci_exists = _check_ci_file_exists(\".github/workflows/ci.yml\", headers, github_org)\n    \n    if not ci_exists:\n        print(\"Error: Neither .github/workflows/CI.yml nor .github/workflows/ci.yml found in main\", file=sys.stderr)\n        return False\n\n    # 2. Find infrastructure PR with required title and body content\n    print(\"2. Finding infrastructure PR with required content...\")\n    infra_pr = _find_infrastructure_pr(headers, github_org)\n    if not infra_pr:\n        print(\n            \"Error: No infrastructure PR found with required title and body content\",\n            file=sys.stderr,\n        )\n        print(\n            \"Required title: 'Add CI infrastructure' and 'resolve conflicts'\",\n            file=sys.stderr,\n        )\n        print(\n            \"Required body: reference with 'Fixes #' or 'Resolves #', 'prepares infrastructure', 'missing .github directory', 'workflow conflicts'\",\n            file=sys.stderr,\n        )\n        return False\n\n    print(f\"Found infrastructure PR #{infra_pr.get('number')}: {infra_pr.get('title')}\")\n\n    # 3. Check that infrastructure PR is merged\n    if not infra_pr.get(\"merged_at\"):\n        print(\n            f\"Error: Infrastructure PR #{infra_pr.get('number')} not merged yet\",\n            file=sys.stderr,\n        )\n        return False\n\n    # 4. Check that PR #24 is merged\n    print(\"3. Checking that PR #24 is merged...\")\n    success, pr24 = _get_github_api(\"pulls/24\", headers, github_org)\n    if not success or not pr24:\n        print(\"Error: PR #24 not found\", file=sys.stderr)\n        return False\n\n    if not pr24.get(\"merged_at\"):\n        print(\"Error: PR #24 is not merged yet\", file=sys.stderr)\n        return False\n\n    # 5. Check that PR #24 has a comment linking to the infrastructure PR\n    print(\"4. Checking that PR #24 has comment linking to infrastructure PR...\")\n    if not _check_pr_comments(24, infra_pr.get(\"number\"), headers, github_org):\n        print(\n            f\"Error: PR #24 missing comment linking to infrastructure PR #{infra_pr.get('number')}\",\n            file=sys.stderr,\n        )\n        return False\n\n    print(\"\\nâœ“ Task completed successfully!\")\n    print(\n        f\"Infrastructure PR #{infra_pr.get('number')} extracted content from PR #24 and resolved conflicts\"\n    )\n    print(\n        \"PR #24 is now merged cleanly and has a comment linking to the infrastructure PR\"\n    )\n    return True\n\n\nif __name__ == \"__main__\":\n    success = verify()\n    sys.exit(0 if success else 1)\n"
}