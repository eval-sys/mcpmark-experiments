{
  "task_id": "debugging",
  "task_name": "Debugging",
  "category_id": "votenet",
  "category_name": "Votenet",
  "description": "Identify and fix bugs in the VoteNet backbone module by examining the codebase and implementing necessary corrections.",
  "author": "Lingjun Chen",
  "created_at": "2025-08-13",
  "difficulty": "L3",
  "tags": [
    "code exploration"
  ],
  "mcp": [
    "filesystem"
  ],
  "metadata": {},
  "instruction": "# VoteNet Task: Debug Backbone Module\n\n## üìã Task Description\n\nThere is a bug in the VoteNet backbone module that needs to be identified and fixed.\n\n## üéØ Task Objectives\n\n1. **Examine the codebase** using filesystem MCP tools\n2. **Identify the bug** inside the hole process\n3. **Fix the bug** in the code\n4. **Create an answer file** with the bug location\n\n## üìù Expected Output\n\n1. **Fix the bug** in the code file directly\n2. **Create `answer.txt`** in the test directory root with the format: `path`\n\n**Requirements:**\n\n- Only include the bug's file path in answer.txt\n- No additional text or explanation\n\n## üí° Hint\n\n**The bug is not in demo.py**, please look deeper inside the codebase.\n",
  "verify": "#!/usr/bin/env python3\n\"\"\"\nVerification script for VoteNet Task: Debug Backbone Module\n\"\"\"\n\nimport sys\nfrom pathlib import Path\nimport re\nimport os\n\ndef get_test_directory() -> Path:\n    \"\"\"Get the test directory from FILESYSTEM_TEST_DIR env var.\"\"\"\n    test_root = os.environ.get(\"FILESYSTEM_TEST_DIR\")\n    if not test_root:\n        raise ValueError(\"FILESYSTEM_TEST_DIR environment variable is required\")\n    return Path(test_root)\n\ndef verify_answer_file_exists(test_dir: Path) -> bool:\n    \"\"\"Verify that the answer.txt file exists.\"\"\"\n    answer_file = test_dir / \"answer.txt\"\n    \n    if not answer_file.exists():\n        print(\"‚ùå File 'answer.txt' not found\")\n        return False\n    \n    print(\"‚úÖ Answer file found\")\n    return True\n\ndef verify_answer_format(test_dir: Path) -> bool:\n    \"\"\"Verify that the answer file has the correct format.\"\"\"\n    answer_file = test_dir / \"answer.txt\"\n    \n    try:\n        content = answer_file.read_text().strip()\n        \n        # Check if content is not empty\n        if not content:\n            print(\"‚ùå Answer file is empty\")\n            return False\n        \n        # Check if it contains only one line (no additional text)\n        if len(content.split('\\n')) > 1:\n            print(\"‚ùå Answer file contains multiple lines or additional text\")\n            return False\n        \n        # Check if path contains the expected components\n        if 'models/backbone_module.py' not in content:\n            print(\"‚ùå Answer should contain 'models/backbone_module.py'\")\n            return False\n        \n        print(\"‚úÖ Answer format is correct\")\n        return True\n        \n    except Exception as e:\n        print(f\"‚ùå Error reading answer file: {e}\")\n        return False\n\ndef verify_file_path_structure(test_dir: Path) -> bool:\n    \"\"\"Verify that the file path has the expected structure.\"\"\"\n    answer_file = test_dir / \"answer.txt\"\n    \n    try:\n        content = answer_file.read_text().strip()\n        \n        # Expected path components for backbone module\n        expected_components = [\"models\", \"backbone_module.py\"]\n        \n        # Check if all expected components are in the content\n        for component in expected_components:\n            if component not in content:\n                print(f\"‚ùå Answer missing expected component: {component}\")\n                return False\n        \n        print(\"‚úÖ Answer contains expected components\")\n        return True\n        \n    except Exception as e:\n        print(f\"‚ùå Error verifying answer structure: {e}\")\n        return False\n\ndef verify_file_exists(test_dir: Path) -> bool:\n    \"\"\"Verify that the identified file actually exists.\"\"\"\n    answer_file = test_dir / \"answer.txt\"\n    \n    try:\n        content = answer_file.read_text().strip()\n        \n        # Try the expected path\n        file_path = test_dir / \"models/backbone_module.py\"\n        \n        if not file_path.exists():\n            print(f\"‚ùå Expected file does not exist: models/backbone_module.py\")\n            return False\n        \n        print(\"‚úÖ Expected file exists\")\n        return True\n        \n    except Exception as e:\n        print(f\"‚ùå Error verifying file existence: {e}\")\n        return False\n\ndef verify_bug_fix(test_dir: Path) -> bool:\n    \"\"\"Verify that the bug has been fixed in the code.\"\"\"\n    answer_file = test_dir / \"answer.txt\"\n    \n    try:\n        content = answer_file.read_text().strip()\n        \n        file_path = test_dir / \"models/backbone_module.py\"\n        \n        if not file_path.exists():\n            print(f\"‚ùå Cannot find file for bug fix verification: models/backbone_module.py\")\n            return False\n        \n        # Read the file and search for the specific line containing self.fp2 = PointnetFPModule\n        file_content = file_path.read_text()\n        lines = file_content.split('\\n')\n        \n        # Find the line containing self.fp2 = PointnetFPModule\n        target_line = None\n        target_line_number = None\n        \n        for i, line in enumerate(lines):\n            if \"self.fp2 = PointnetFPModule\" in line:\n                target_line = line.strip()\n                target_line_number = i + 1  # Convert to 1-based line number\n                break\n        \n        if target_line is None:\n            print(\"‚ùå Could not find line containing 'self.fp2 = PointnetFPModule'\")\n            return False\n        \n        # Check if the original buggy line still exists\n        original_bug = \"self.fp2 = PointnetFPModule(mlp=[256,256,256])\"\n        if original_bug in target_line:\n            print(f\"‚ùå Bug has not been fixed - original line still exists at line {target_line_number}\")\n            print(f\"   Line {target_line_number} content: {target_line}\")\n            return False\n        \n        # Check for the correct fix\n        correct_fixes = [\n            \"self.fp2 = PointnetFPModule(mlp=[256+256,256,256])\",\n            \"self.fp2 = PointnetFPModule(mlp=[512,256,256])\"\n        ]\n        \n        fix_found = False\n        for fix in correct_fixes:\n            if fix in target_line:\n                fix_found = True\n                break\n        \n        if not fix_found:\n            print(f\"‚ùå Bug fix not found at line {target_line_number}\")\n            print(f\"   Line {target_line_number} content: {target_line}\")\n            print(\"   Expected one of:\")\n            for fix in correct_fixes:\n                print(f\"   - {fix}\")\n            return False\n        \n        print(f\"‚úÖ Bug has been fixed correctly at line {target_line_number}\")\n        return True\n        \n    except Exception as e:\n        print(f\"‚ùå Error verifying bug fix: {e}\")\n        return False\n\n\n\ndef main():\n    \"\"\"Main verification function.\"\"\"\n    test_dir = get_test_directory()\n    print(\"üîç Verifying VoteNet Task: Debug Backbone Module...\")\n    \n    # Define verification steps\n    verification_steps = [\n        (\"Answer File Exists\", verify_answer_file_exists),\n        (\"Answer Format\", verify_answer_format),\n        (\"Answer Structure\", verify_file_path_structure),\n        (\"File Exists\", verify_file_exists),\n        (\"Bug Fix Applied\", verify_bug_fix),\n    ]\n    \n    # Run all verification steps\n    all_passed = True\n    for step_name, verify_func in verification_steps:\n        print(f\"\\n--- {step_name} ---\")\n        if not verify_func(test_dir):\n            all_passed = False\n    \n    # Final result\n    print(\"\\n\" + \"=\"*50)\n    if all_passed:\n        print(\"‚úÖ VoteNet backbone module bug has been correctly identified and fixed!\")\n        print(\"üéâ Task verification: PASS\")\n        sys.exit(0)\n    else:\n        print(\"‚ùå Task verification: FAIL\")\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()",
  "model_results": {
    "gemini-2-5-pro": 0,
    "deepseek-chat": 1,
    "qwen-3-coder": 0,
    "o3": 0,
    "gpt-5": 1,
    "k2": 0,
    "claude-4-sonnet": 0
  }
}