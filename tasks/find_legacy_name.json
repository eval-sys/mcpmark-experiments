{
  "task_id": "find_legacy_name",
  "task_name": "Find Legacy Name",
  "category_id": "missing-semester",
  "category_name": "Missing Semester",
  "description": "Find the old name and domain of The Missing Semester course from commit history and document the findings.",
  "author": "Zijian Wu",
  "created_at": "2025-08-15",
  "difficulty": "L3",
  "tags": [
    "repository analysis"
  ],
  "mcp": [
    "github"
  ],
  "meta_data": {
    "stateType": "url",
    "stateContent": null,
    "stateUrl": "https://github.com/mcpmark-source/missing-semester",
    "stateOriginalUrl": "https://github.com/missing-semester/missing-semester"
  },
  "instruction": "I remember that a long time ago, *The Missing Semester of Your CS Education* had a different name and domain. There should be some related commit history. Please find the old name and domain and create an **ANSWER.md** file with them, formatted as:\n\n[title](url)\n\nThen push the file to the `master` branch.",
  "verify": "import sys\nimport os\nimport requests\nimport base64\nfrom typing import Dict, Optional, Tuple\nfrom dotenv import load_dotenv\n\n\ndef _get_github_api(\n    endpoint: str, headers: Dict[str, str], org: str, repo: str = \"missing-semester\"\n) -> Tuple[bool, Optional[Dict]]:\n    \"\"\"Make a GET request to GitHub API and return (success, response).\"\"\"\n    url = f\"https://api.github.com/repos/{org}/{repo}/{endpoint}\"\n    \n    try:\n        response = requests.get(url, headers=headers)\n        if response.status_code == 200:\n            return True, response.json()\n        elif response.status_code == 404:\n            return False, None\n        else:\n            print(f\"API error for {endpoint}: {response.status_code}\", file=sys.stderr)\n            return False, None\n    except Exception as e:\n        print(f\"Exception for {endpoint}: {e}\", file=sys.stderr)\n        return False, None\n\n\ndef _get_file_content(\n    file_path: str,\n    headers: Dict[str, str],\n    org: str,\n    repo: str = \"missing-semester\",\n    ref: str = \"master\",\n) -> Optional[str]:\n    \"\"\"Get the content of a file from the repository.\"\"\"\n    success, result = _get_github_api(\n        f\"contents/{file_path}?ref={ref}\", headers, org, repo\n    )\n    if not success or not result:\n        return None\n\n    try:\n        content = base64.b64decode(result.get(\"content\", \"\")).decode(\"utf-8\")\n        return content\n    except Exception as e:\n        print(f\"Content decode error for {file_path}: {e}\", file=sys.stderr)\n        return None\n\n\ndef verify() -> bool:\n    \"\"\"\n    Programmatically verify that the legacy name finding task was completed correctly.\n    Checks for ANSWER.md file in master branch with the correct content.\n    \"\"\"\n    # Expected answer content\n    EXPECTED_CONTENT = \"[Hacker Tools](https://hacker-tools.github.io)\"\n    \n    # Load environment variables from .mcp_env\n    load_dotenv(\".mcp_env\")\n\n    # Get GitHub token and org\n    github_token = os.environ.get(\"MCP_GITHUB_TOKEN\")\n    github_org = os.environ.get(\"GITHUB_EVAL_ORG\")\n\n    if not github_token:\n        print(\"Error: MCP_GITHUB_TOKEN environment variable not set\", file=sys.stderr)\n        return False\n\n    if not github_org:\n        print(\"Error: GITHUB_EVAL_ORG environment variable not set\", file=sys.stderr)\n        return False\n\n    headers = {\n        \"Authorization\": f\"Bearer {github_token}\",\n        \"Accept\": \"application/vnd.github.v3+json\",\n    }\n\n    # Run verification checks\n    print(\"Verifying legacy name finding task completion...\")\n\n    # 1. Check that ANSWER.md exists in master branch\n    print(\"1. Checking ANSWER.md exists in master branch...\")\n    answer_content = _get_file_content(\"ANSWER.md\", headers, github_org, \"missing-semester\", \"master\")\n    \n    if not answer_content:\n        print(\"Error: ANSWER.md not found in master branch\", file=sys.stderr)\n        return False\n\n    print(\"✓ ANSWER.md found in master branch\")\n\n    # 2. Check that the content matches expected answer\n    print(\"2. Verifying ANSWER.md content...\")\n    answer_content = answer_content.strip()\n    \n    if answer_content != EXPECTED_CONTENT:\n        print(f\"Error: ANSWER.md content does not match expected answer\", file=sys.stderr)\n        print(f\"Expected: {EXPECTED_CONTENT}\", file=sys.stderr)\n        print(f\"Found: {answer_content}\", file=sys.stderr)\n        return False\n\n    print(\"✓ ANSWER.md contains correct legacy name and URL\")\n\n    print(\"\\n✅ All verification checks passed!\")\n    print(\"Legacy name finding task completed successfully:\")\n    print(f\"  - ANSWER.md created in master branch\")\n    print(f\"  - Content: {EXPECTED_CONTENT}\")\n\n    return True\n\n\nif __name__ == \"__main__\":\n    success = verify()\n    sys.exit(0 if success else 1)"
}