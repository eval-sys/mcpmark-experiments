{
  "task_id": "multi_branch_commit_aggregation",
  "task_name": "Multi Branch Commit Aggregation",
  "category_id": "harmony",
  "category_name": "Harmony",
  "description": "Generate comprehensive commit history report by aggregating changes from multiple branches with contributor analysis and merge timeline.",
  "author": "Zijian Wu",
  "created_at": "2025-08-15",
  "difficulty": "L3",
  "tags": [
    "repository analysis",
    "release coordination"
  ],
  "mcp": [
    "github"
  ],
  "metadata": {},
  "instruction": "I need you to create a comprehensive commit history report by aggregating changes from multiple branches. Here's what you need to do:\n\n**Step 1: Create Analysis Branch**\nCreate a new branch called 'history-report-2025' from the main branch.\n\n**Step 2: Generate Branch Commits Report**\nIn the 'history-report-2025' branch, create a file called `BRANCH_COMMITS.json` that contains a JSON object with the following structure:\n- For each of these branches: ['pr/45-googlefan256-main', 'pr/25-neuralsorcerer-patch-1', 'pr/41-amirhosseinghanipour-fix-race-conditions-and-offline-api']\n- List the 3 most recent commits for each branch\n- Each commit must include: SHA, GitHub username, commit message, and files changed count\n- The JSON structure should be:\n```json\n{\n  \"pr/45-googlefan256-main\": [\n    {\n      \"sha\": \"commit_sha\",\n      \"author\": \"github_username\",\n      \"message\": \"commit message\",\n      \"files_changed\": number\n    }\n  ],\n  \"pr/25-neuralsorcerer-patch-1\": [...],\n  \"pr/41-amirhosseinghanipour-fix-race-conditions-and-offline-api\": [...]\n}\n```\n\n**Step 3: Create Cross-Branch Analysis**\nCreate a file `CROSS_BRANCH_ANALYSIS.md` that contains:\n- A section \"## Top Contributors\" listing the 5 contributors with the most commits across ALL 7 branches, sorted by commit count (format: \"github_username: X commits\")\n- Must include keywords: \"contributors\"\n\n**Step 4: Generate Merge Timeline**\nCreate a file `MERGE_TIMELINE.txt` that lists the 10 most recent merge commits from the main branch:\n- Format: `DATE | MERGE_COMMIT_MESSAGE | COMMIT_SHA`\n- List in reverse chronological order (newest first)\n- Only include actual merge commits (commits that have exactly 2 parent commits)\n- Note: While the commit messages reference PR numbers, those PRs no longer exist in the repository\n\n**Step 5: Create Pull Request**\nCreate a pull request from 'history-report-2025' to main with:\n- Title: `Cross-Branch Commit Analysis Report`\n- Body must contain exactly these lines:\n  - `Total branches analyzed: 7`\n  - `Top contributor: [USERNAME]` (replace [USERNAME] with the GitHub username of the contributor who has the most commits)",
  "verify": "import sys\nimport os\nimport requests\nfrom typing import Dict, Optional, Tuple\nimport base64\nimport json\n\n\ndef _get_github_api(\n    endpoint: str, headers: Dict[str, str], org: str\n) -> Tuple[bool, Optional[Dict]]:\n    \"\"\"Make a GET request to GitHub API and return (success, response).\"\"\"\n    url = f\"https://api.github.com/repos/{org}/harmony/{endpoint}\"\n    try:\n        response = requests.get(url, headers=headers)\n        if response.status_code == 200:\n            return True, response.json()\n        elif response.status_code == 404:\n            return False, None\n        else:\n            print(f\"API error for {endpoint}: {response.status_code}\", file=sys.stderr)\n            return False, None\n    except Exception as e:\n        print(f\"Exception for {endpoint}: {e}\", file=sys.stderr)\n        return False, None\n\n\ndef _check_branch_exists(branch_name: str, headers: Dict[str, str], org: str) -> bool:\n    \"\"\"Verify that a branch exists in the repository.\"\"\"\n    success, _ = _get_github_api(f\"branches/{branch_name}\", headers, org)\n    return success\n\n\ndef _get_file_content(\n    branch: str, file_path: str, headers: Dict[str, str], org: str\n) -> Optional[str]:\n    \"\"\"Get the content of a file from a specific branch.\"\"\"\n    success, result = _get_github_api(f\"contents/{file_path}?ref={branch}\", headers, org)\n    if not success or not result:\n        return None\n\n    try:\n        content = base64.b64decode(result.get(\"content\", \"\")).decode(\"utf-8\")\n        return content\n    except Exception as e:\n        print(f\"Content decode error for {file_path}: {e}\", file=sys.stderr)\n        return None\n\n\ndef _check_branch_commits_json(content: str) -> bool:\n    \"\"\"Verify BRANCH_COMMITS.json has correct structure and expected data.\"\"\"\n    expected_data = {\n        \"pr/45-googlefan256-main\": [\n            {\n                \"sha\": \"9fa3f54cf2a2501c7dcbf554d5fbdd0de619fdda\",\n                \"author\": \"googlefan256\",\n                \"message\": \"Update format.md\",\n                \"files_changed\": 1,\n            },\n            {\n                \"sha\": \"3efbf742533a375fc148d75513597e139329578b\",\n                \"author\": \"scott-oai\",\n                \"message\": \"Merge pull request #29 from axion66/improve-readme-and-checks\",\n                \"files_changed\": 1,\n            },\n            {\n                \"sha\": \"9d653a4c7382abc42d115014d195d9354e7ad357\",\n                \"author\": \"scott-oai\",\n                \"message\": \"Merge pull request #30 from Yuan-ManX/harmony-format\",\n                \"files_changed\": 1,\n            },\n        ],\n        \"pr/25-neuralsorcerer-patch-1\": [\n            {\n                \"sha\": \"c505a03e9c9a388a511b6125756097eee523742a\",\n                \"author\": \"neuralsorcerer\",\n                \"message\": \"fix: `meta_sep` token and add to registry\",\n                \"files_changed\": 1,\n            },\n            {\n                \"sha\": \"c044bf33f7e835ca6a723ccc97848de25dba5164\",\n                \"author\": \"neuralsorcerer\",\n                \"message\": \"fix: `meta_sep` token in `encoding.rs`\",\n                \"files_changed\": 1,\n            },\n            {\n                \"sha\": \"b255cbeb6274adbea774f26fd9590922ce8874ed\",\n                \"author\": \"scott-oai\",\n                \"message\": \"Merge pull request #18 from openai/dev/scl/better-ci\",\n                \"files_changed\": 6,\n            },\n        ],\n        \"pr/41-amirhosseinghanipour-fix-race-conditions-and-offline-api\": [\n            {\n                \"sha\": \"1dca6392934bf4e3c403b2ecc2104e8ff3f67f45\",\n                \"author\": \"amirhosseinghanipour\",\n                \"message\": \"fix race conditions and add offline tokenizer loading api\",\n                \"files_changed\": 8,\n            },\n            {\n                \"sha\": \"9528c7b4a00a3307fd9685fc1328aee11c3d9c90\",\n                \"author\": \"scott-oai\",\n                \"message\": \"version bump\",\n                \"files_changed\": 2,\n            },\n            {\n                \"sha\": \"82b3afb9eb043343f322c937262cc50405e892c3\",\n                \"author\": \"scott-oai\",\n                \"message\": \"Merge pull request #26 from jordan-wu-97/jordan/fix-function-call-atomic-bool\",\n                \"files_changed\": 6,\n            },\n        ],\n    }\n\n    try:\n        data = json.loads(content)\n\n        # Check if all required branches are present\n        for branch in expected_data.keys():\n            if branch not in data:\n                print(\n                    f\"Missing branch {branch} in BRANCH_COMMITS.json\", file=sys.stderr\n                )\n                return False\n\n        # Verify the exact content matches expected data\n        for branch, expected_commits in expected_data.items():\n            actual_commits = data.get(branch, [])\n            if len(actual_commits) != 3:\n                print(\n                    f\"Branch {branch} should have exactly 3 commits, found {len(actual_commits)}\",\n                    file=sys.stderr,\n                )\n                return False\n\n            for i, expected_commit in enumerate(expected_commits):\n                if i >= len(actual_commits):\n                    print(\n                        f\"Missing commit {i + 1} for branch {branch}\", file=sys.stderr\n                    )\n                    return False\n\n                actual_commit = actual_commits[i]\n                for field in [\"sha\", \"author\", \"message\", \"files_changed\"]:\n                    if actual_commit.get(field) != expected_commit.get(field):\n                        print(\n                            f\"Mismatch in {field} for commit {i + 1} in branch {branch}\",\n                            file=sys.stderr,\n                        )\n                        print(\n                            f\"Expected: {expected_commit.get(field)}, Got: {actual_commit.get(field)}\",\n                            file=sys.stderr,\n                        )\n                        return False\n\n        return True\n    except json.JSONDecodeError as e:\n        print(f\"Invalid JSON in BRANCH_COMMITS.json: {e}\", file=sys.stderr)\n        return False\n    except Exception as e:\n        print(f\"Error checking BRANCH_COMMITS.json: {e}\", file=sys.stderr)\n        return False\n\n\ndef _check_cross_branch_analysis(content: str) -> bool:\n    \"\"\"Verify CROSS_BRANCH_ANALYSIS.md contains required sections and data.\"\"\"\n    # Check for required section header\n    if \"## Top Contributors\" not in content:\n        print(\n            \"Missing section '## Top Contributors' in CROSS_BRANCH_ANALYSIS.md\",\n            file=sys.stderr,\n        )\n        return False\n\n    # Check for required keyword\n    if \"contributors\" not in content.lower():\n        print(\n            \"Missing keyword 'contributors' in CROSS_BRANCH_ANALYSIS.md\",\n            file=sys.stderr,\n        )\n        return False\n\n    # Verify the top 5 contributors with correct counts (order matters)\n    expected_contributors = [\n        \"scott-oai: 217 commits\",\n        \"RustedBytes: 28 commits\",\n        \"zhli1142015: 14 commits\",\n        \"michaelfeil: 7 commits\",\n        \"y-asha: 7 commits\",\n    ]\n\n    for contributor in expected_contributors:\n        if contributor not in content:\n            print(\n                f\"Missing or incorrect contributor entry: {contributor}\",\n                file=sys.stderr,\n            )\n            return False\n\n    return True\n\n\ndef _check_merge_timeline(content: str) -> bool:\n    \"\"\"Verify MERGE_TIMELINE.txt has correct format and expected merge commits.\"\"\"\n    expected_timeline = [\n        \"2025-08-06 | Merge pull request #29 from axion66/improve-readme-and-checks | 3efbf742533a375fc148d75513597e139329578b\",\n        \"2025-08-06 | Merge pull request #30 from Yuan-ManX/harmony-format | 9d653a4c7382abc42d115014d195d9354e7ad357\",\n        \"2025-08-06 | Merge pull request #28 from dkqjrm/fix-typo-format-md | 161e5fe2a57c63e9f8353c4c5b8faa3c3854bb5f\",\n        \"2025-08-05 | Merge pull request #26 from jordan-wu-97/jordan/fix-function-call-atomic-bool | 82b3afb9eb043343f322c937262cc50405e892c3\",\n        \"2025-08-05 | Merge pull request #18 from openai/dev/scl/better-ci | b255cbeb6274adbea774f26fd9590922ce8874ed\",\n        \"2025-08-05 | Merge pull request #21 from Tialo/main | 058ef3257c24fb099aac7960c10ce51c8e55d9fe\",\n        \"2025-08-05 | Merge branch 'main' into dev/scl/better-ci | 6375a15ea1b0a486cbb1468964cf8f5800ff5a5c\",\n        \"2025-08-05 | Merge pull request #8 from RustedBytes/main | f6179119ca894eda4124c86d408c01fdbf5281f0\",\n        \"2025-08-05 | Merge branch 'main' into main | eb86106b6980790b94f5702dc510483c66027277\",\n        \"2025-08-05 | Merge pull request #17 from openai/dev/scl/add-docs-to-cargo | 64bca4cf327ebeafa0bbd0345650d86e2d02142f\",\n    ]\n\n    lines = content.strip().split(\"\\n\")\n    if len(lines) != 10:\n        print(\n            f\"MERGE_TIMELINE.txt should have exactly 10 lines, found {len(lines)}\",\n            file=sys.stderr,\n        )\n        return False\n\n    # Verify each line matches expected format and content\n    for i, (actual_line, expected_line) in enumerate(zip(lines, expected_timeline)):\n        if actual_line.strip() != expected_line:\n            print(f\"Mismatch at line {i + 1} in MERGE_TIMELINE.txt\", file=sys.stderr)\n            print(f\"Expected: {expected_line}\", file=sys.stderr)\n            print(f\"Got: {actual_line.strip()}\", file=sys.stderr)\n            return False\n\n    return True\n\n\ndef _find_pr_by_title(title: str, headers: Dict[str, str], org: str) -> Optional[Dict]:\n    \"\"\"Find a PR by exact title.\"\"\"\n    for state in [\"open\", \"closed\"]:\n        success, prs = _get_github_api(f\"pulls?state={state}&per_page=100\", headers, org)\n        if success and prs:\n            for pr in prs:\n                if pr.get(\"title\", \"\") == title:\n                    return pr\n    return None\n\n\ndef _check_pr_body_format(pr_body: str) -> bool:\n    \"\"\"Check if PR body contains required format with exact values.\"\"\"\n    if not pr_body:\n        print(\"PR body is empty\", file=sys.stderr)\n        return False\n\n    required_lines = [\n        \"Total branches analyzed: 7\",\n        \"Top contributor: scott-oai\",  # Based on the provided data\n    ]\n\n    for line in required_lines:\n        if line not in pr_body:\n            print(f\"Missing required line in PR body: {line}\", file=sys.stderr)\n            return False\n\n    return True\n\n\ndef verify_task() -> bool:\n    \"\"\"Verify the multi-branch commit aggregation task.\"\"\"\n    # Get GitHub token from environment\n    github_token = os.environ.get(\"MCP_GITHUB_TOKEN\")\n    if not github_token:\n        print(\"Error: MCP_GITHUB_TOKEN environment variable not set\", file=sys.stderr)\n        return False\n\n    # Get GitHub organization from environment\n    github_org = os.environ.get(\"GITHUB_EVAL_ORG\")\n    if not github_org:\n        print(\"Error: GITHUB_EVAL_ORG environment variable not set\", file=sys.stderr)\n        return False\n\n    headers = {\n        \"Authorization\": f\"Bearer {github_token}\",\n        \"Accept\": \"application/vnd.github.v3+json\",\n    }\n\n    # 1. Check if branch 'history-report-2025' exists\n    if not _check_branch_exists(\"history-report-2025\", headers, github_org):\n        print(\"Branch 'history-report-2025' does not exist\", file=sys.stderr)\n        return False\n    print(\"✓ Branch 'history-report-2025' exists\")\n\n    # 2. Check BRANCH_COMMITS.json\n    content = _get_file_content(\"history-report-2025\", \"BRANCH_COMMITS.json\", headers, github_org)\n    if not content:\n        print(\n            \"File 'BRANCH_COMMITS.json' not found in 'history-report-2025' branch\",\n            file=sys.stderr,\n        )\n        return False\n\n    if not _check_branch_commits_json(content):\n        return False\n    print(\"✓ BRANCH_COMMITS.json has correct structure and data\")\n\n    # 3. Check CROSS_BRANCH_ANALYSIS.md\n    content = _get_file_content(\n        \"history-report-2025\", \"CROSS_BRANCH_ANALYSIS.md\", headers, github_org\n    )\n    if not content:\n        print(\n            \"File 'CROSS_BRANCH_ANALYSIS.md' not found in 'history-report-2025' branch\",\n            file=sys.stderr,\n        )\n        return False\n\n    if not _check_cross_branch_analysis(content):\n        return False\n    print(\"✓ CROSS_BRANCH_ANALYSIS.md contains required sections and data\")\n\n    # 4. Check MERGE_TIMELINE.txt\n    content = _get_file_content(\"history-report-2025\", \"MERGE_TIMELINE.txt\", headers, github_org)\n    if not content:\n        print(\n            \"File 'MERGE_TIMELINE.txt' not found in 'history-report-2025' branch\",\n            file=sys.stderr,\n        )\n        return False\n\n    if not _check_merge_timeline(content):\n        return False\n    print(\"✓ MERGE_TIMELINE.txt has correct format and data\")\n\n    # 5. Check pull request\n    pr = _find_pr_by_title(\"Cross-Branch Commit Analysis Report\", headers, github_org)\n    if not pr:\n        print(\n            \"Pull request with title 'Cross-Branch Commit Analysis Report' not found\",\n            file=sys.stderr,\n        )\n        return False\n    print(\"✓ Pull request 'Cross-Branch Commit Analysis Report' exists\")\n\n    # 6. Check PR body format\n    pr_body = pr.get(\"body\", \"\")\n    if not _check_pr_body_format(pr_body):\n        return False\n    print(\"✓ Pull request body has correct format and data\")\n\n    # 7. Verify PR is from correct branch to main\n    if pr.get(\"head\", {}).get(\"ref\") != \"history-report-2025\":\n        print(\"PR is not from 'history-report-2025' branch\", file=sys.stderr)\n        return False\n\n    if pr.get(\"base\", {}).get(\"ref\") != \"main\":\n        print(\"PR is not targeting 'main' branch\", file=sys.stderr)\n        return False\n    print(\"✓ Pull request is from 'history-report-2025' to 'main'\")\n\n    print(\"\\nAll verification checks passed! ✅\")\n    return True\n\n\nif __name__ == \"__main__\":\n    success = verify_task()\n    sys.exit(0 if success else 1)\n",
  "model_results": {
    "gemini-2-5-pro": 0,
    "gpt-4-1-mini": 0,
    "claude-4-sonnet": 0,
    "gpt-5": 0,
    "k2": 0,
    "gpt-5-mini": 0,
    "gemini-2-5-flash": 0,
    "gpt-5-nano": 0,
    "gpt-4-1": 0,
    "o3": 0
  }
}