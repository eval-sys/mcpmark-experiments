{
  "task_id": "expert_level_lessons",
  "task_name": "Expert Level Lessons",
  "category_id": "python_roadmap",
  "category_name": "Python Roadmap",
  "description": "Create an Expert Level chapter with sophisticated prerequisite chains and four expert-level lessons.",
  "author": "Lingjun Chen",
  "created_at": "2025-08-02",
  "difficulty": "L3",
  "tags": [
    "database manipulation",
    "cross-reference linking",
    "conditional filtering",
    "status tracking",
    "template population"
  ],
  "mcp": [
    "notion"
  ],
  "metadata": {
    "ori_template_url": "https://painted-tennis-ebc.notion.site/Python-Roadmap-25281626b6d78012bf2bce1fa8711f4d",
    "gt_page_url": "https://www.notion.so/Python-Roadmap-Expert-Level-Lessons-24f2b7e8cebd80e4b2a0caa07df93407"
  },
  "instruction": "# Task: Expert Level Learning Path with Complex Prerequisites\n\n## Objective\nCreate an Expert Level chapter in the Python Roadmap with sophisticated prerequisite chains that require deep understanding of the existing course structure.\n\n## Requirements\n\n### 1. Create Expert Level Chapter\n- **Database**: Chapters database\n- **Properties**:\n  - Name: `Expert Level`\n  - Icon: ðŸŸ£ (purple circle emoji)\n  - Must appear after Advanced Level in the database\n\n### 2. Create Bridge Lesson\nCreate a lesson that bridges advanced and expert content:\n- **Title**: `Advanced Foundations Review`\n- **Status**: Done\n- **Chapter**: Link to Expert Level\n- **Parent item**: Link to the lesson that currently has status \"In Progress\" and contains \"Control\" in its title\n- **Sub-items**: Must link to exactly these three lessons:\n  - The lesson with title containing \"Decorators\"\n  - The lesson with title containing \"Calling API\"\n  - The lesson with title containing \"Regular Expressions\"\n\n### 3. Create Expert Level Lessons\nAdd exactly 4 expert lessons to the Steps database:\n\n**Lesson 1**: `Metaprogramming and AST Manipulation`\n- Status: To Do\n- Chapter: Expert Level\n- Parent item: Link to \"Advanced Foundations Review\"\n- Date: 2025-09-15\n\n**Lesson 2**: `Async Concurrency Patterns`\n- Status: To Do\n- Chapter: Expert Level\n- Parent item: Link to the lesson titled \"Calling API\"\n- Date: 2025-09-20\n\n**Lesson 3**: `Memory Management and GC Tuning`\n- Status: In Progress\n- Chapter: Expert Level\n- Parent item: Link to \"Advanced Foundations Review\"\n- Sub-item: Must have exactly 2 links:\n  - Link to any lesson from \"Data Structures\" that has status \"To Do\"\n  - Link to the lesson containing \"OOP\" in its title\n- Date: 2025-09-25\n\n**Lesson 4**: `Building Python C Extensions`\n- Status: To Do\n- Chapter: Expert Level\n- Parent item: Link to \"Metaprogramming and AST Manipulation\"\n- Date: 2025-10-01\n\n### 4. Update Existing Lessons\n- Change the status of \"Decorators\" from \"To Do\" to \"Done\"\n- Add \"Async Concurrency Patterns\" as a Sub-item to \"Error Handling\"\n- Update \"Control Flow\" status from \"In Progress\" to \"Done\"\n\n### 5. Create Learning Path Notes\nAdd content to the \"Advanced Foundations Review\" lesson page:\n- **Block 1**: Heading 2 with text `Prerequisites Checklist`\n- **Block 2**: Bulleted list with exactly 3 items:\n  - `âœ… Advanced Python Features (Decorators, Context Managers)`\n  - `âœ… API Integration and Async Basics`\n  - `âœ… Pattern Matching and Text Processing`\n- **Block 3**: Paragraph with text: `This lesson serves as a checkpoint before entering expert-level content. Ensure you have mastered all prerequisites listed above.`",
  "verify": "import sys\nfrom notion_client import Client\nfrom tasks.utils import notion_utils\n\ndef verify(notion: Client, main_id: str = None) -> bool:\n    \"\"\"\n    Verifies that the Expert Level chapter and its lessons have been created correctly with complex prerequisites.\n    \"\"\"\n    # Step 1: Find the main page and get database IDs\n    if main_id:\n        found_id, object_type = notion_utils.find_page_or_database_by_id(notion, main_id)\n        if not found_id or object_type != 'page':\n            print(\"Error: Main page not found.\", file=sys.stderr)\n            return False\n    else:\n        # Try to find the main page by searching\n        found_id = notion_utils.find_page(notion, \"Python Roadmap\")\n        if not found_id:\n            print(\"Error: Main page not found.\", file=sys.stderr)\n            return False\n    \n    print(f\"Found main page: {found_id}\")\n    \n    # Get all blocks from the page to find database references\n    all_blocks = notion_utils.get_all_blocks_recursively(notion, found_id)\n    print(f\"Found {len(all_blocks)} blocks\")\n    \n    # Find database IDs from the page\n    chapters_db_id = None\n    steps_db_id = None\n    \n    for block in all_blocks:\n        if block and block.get(\"type\") == \"child_database\":\n            db_title = block.get(\"child_database\", {}).get(\"title\", \"\")\n            if \"Chapters\" in db_title:\n                chapters_db_id = block[\"id\"]\n                print(f\"Found Chapters database: {chapters_db_id}\")\n            elif \"Steps\" in db_title:\n                steps_db_id = block[\"id\"]\n                print(f\"Found Steps database: {steps_db_id}\")\n    \n    if not chapters_db_id:\n        print(\"Error: Chapters database not found.\", file=sys.stderr)\n        return False\n        \n    if not steps_db_id:\n        print(\"Error: Steps database not found.\", file=sys.stderr)\n        return False\n    \n    print(\"Starting verification...\")\n    \n    # Step 2: Verify the Expert Level chapter exists\n    print(\"2. Checking for Expert Level chapter...\")\n    expert_chapter_id = None\n    \n    try:\n        chapters_response = notion.databases.query(\n            database_id=chapters_db_id,\n            filter={\n                \"property\": \"Name\",\n                \"title\": {\n                    \"equals\": \"Expert Level\"\n                }\n            }\n        )\n        \n        if not chapters_response.get(\"results\"):\n            print(f\"Error: Expert Level chapter not found in Chapters database.\", file=sys.stderr)\n            return False\n        \n        expert_chapter = chapters_response[\"results\"][0]\n        expert_chapter_id = expert_chapter[\"id\"]\n        \n        # Check chapter icon (purple circle)\n        chapter_icon = expert_chapter.get(\"icon\")\n        if not chapter_icon or chapter_icon.get(\"type\") != \"emoji\" or chapter_icon.get(\"emoji\") != \"ðŸŸ£\":\n            print(f\"Error: Expert Level chapter does not have the correct purple circle emoji icon.\", file=sys.stderr)\n            return False\n        \n        print(f\"âœ“ Expert Level chapter found with correct icon: ðŸŸ£\")\n        \n    except Exception as e:\n        print(f\"Error querying Chapters database: {e}\", file=sys.stderr)\n        return False\n    \n    # Step 3: Find Control Flow lesson (In Progress status)\n    print(\"3. Finding Control Flow lesson...\")\n    control_flow_id = None\n    \n    try:\n        control_flow_response = notion.databases.query(\n            database_id=steps_db_id,\n            filter={\n                \"and\": [\n                    {\n                        \"property\": \"Lessons\",\n                        \"title\": {\n                            \"contains\": \"Control\"\n                        }\n                    },\n                    {\n                        \"property\": \"Status\",\n                        \"status\": {\n                            \"equals\": \"Done\"  # Should be updated to Done\n                        }\n                    }\n                ]\n            }\n        )\n        \n        if control_flow_response.get(\"results\"):\n            control_flow_lesson = control_flow_response[\"results\"][0]\n            control_flow_id = control_flow_lesson[\"id\"]\n            print(f\"âœ“ Found Control Flow lesson with status 'Done'\")\n        else:\n            print(f\"Error: Control Flow lesson not found with status 'Done'.\", file=sys.stderr)\n            return False\n        \n    except Exception as e:\n        print(f\"Error finding Control Flow lesson: {e}\", file=sys.stderr)\n        return False\n    \n    # Step 4: Find prerequisite lessons\n    print(\"4. Finding prerequisite lessons...\")\n    \n    decorators_id = None\n    calling_api_id = None\n    regex_id = None\n    \n    try:\n        # Find Decorators (should be Done)\n        decorators_response = notion.databases.query(\n            database_id=steps_db_id,\n            filter={\n                \"property\": \"Lessons\",\n                \"title\": {\n                    \"contains\": \"Decorators\"\n                }\n            }\n        )\n        \n        if decorators_response.get(\"results\"):\n            decorators_lesson = decorators_response[\"results\"][0]\n            decorators_id = decorators_lesson[\"id\"]\n            # Check status is Done\n            if decorators_lesson[\"properties\"][\"Status\"][\"status\"][\"name\"] != \"Done\":\n                print(f\"Error: Decorators lesson should have status 'Done'.\", file=sys.stderr)\n                return False\n            print(f\"âœ“ Found Decorators lesson with status 'Done'\")\n        else:\n            print(f\"Error: Decorators lesson not found.\", file=sys.stderr)\n            return False\n        \n        # Find Calling API\n        calling_api_response = notion.databases.query(\n            database_id=steps_db_id,\n            filter={\n                \"property\": \"Lessons\",\n                \"title\": {\n                    \"equals\": \"Calling API\"\n                }\n            }\n        )\n        \n        if calling_api_response.get(\"results\"):\n            calling_api_lesson = calling_api_response[\"results\"][0]\n            calling_api_id = calling_api_lesson[\"id\"]\n            print(f\"âœ“ Found Calling API lesson\")\n        else:\n            print(f\"Error: Calling API lesson not found.\", file=sys.stderr)\n            return False\n        \n        # Find Regular Expressions\n        regex_response = notion.databases.query(\n            database_id=steps_db_id,\n            filter={\n                \"property\": \"Lessons\",\n                \"title\": {\n                    \"contains\": \"Regular Expressions\"\n                }\n            }\n        )\n        \n        if regex_response.get(\"results\"):\n            regex_lesson = regex_response[\"results\"][0]\n            regex_id = regex_lesson[\"id\"]\n            print(f\"âœ“ Found Regular Expressions lesson\")\n        else:\n            print(f\"Error: Regular Expressions lesson not found.\", file=sys.stderr)\n            return False\n        \n    except Exception as e:\n        print(f\"Error finding prerequisite lessons: {e}\", file=sys.stderr)\n        return False\n    \n    # Step 5: Verify Advanced Foundations Review bridge lesson\n    print(\"5. Checking Advanced Foundations Review bridge lesson...\")\n    bridge_id = None\n    \n    try:\n        bridge_response = notion.databases.query(\n            database_id=steps_db_id,\n            filter={\n                \"property\": \"Lessons\",\n                \"title\": {\n                    \"equals\": \"Advanced Foundations Review\"\n                }\n            }\n        )\n        \n        if not bridge_response.get(\"results\"):\n            print(f\"Error: Advanced Foundations Review lesson not found.\", file=sys.stderr)\n            return False\n        \n        bridge_lesson = bridge_response[\"results\"][0]\n        bridge_id = bridge_lesson[\"id\"]\n        \n        # Check status is Done\n        if bridge_lesson[\"properties\"][\"Status\"][\"status\"][\"name\"] != \"Done\":\n            print(f\"Error: Advanced Foundations Review should have status 'Done'.\", file=sys.stderr)\n            return False\n        \n        # Check linked to Expert Level chapter\n        bridge_chapters = bridge_lesson[\"properties\"][\"Chapters\"][\"relation\"]\n        if not any(rel[\"id\"] == expert_chapter_id for rel in bridge_chapters):\n            print(f\"Error: Advanced Foundations Review not linked to Expert Level chapter.\", file=sys.stderr)\n            return False\n        \n        # Check Parent item is Control Flow\n        bridge_parent = bridge_lesson[\"properties\"][\"Parent item\"][\"relation\"]\n        if not bridge_parent or bridge_parent[0][\"id\"] != control_flow_id:\n            print(f\"Error: Advanced Foundations Review should have Control Flow as Parent item.\", file=sys.stderr)\n            return False\n        \n        # Check Sub-items (should have at least 3 specific lessons plus any that reference it as parent)\n        bridge_subitems = bridge_lesson[\"properties\"][\"Sub-item\"][\"relation\"]\n        required_subitems = {decorators_id, calling_api_id, regex_id}\n        actual_subitems = {item[\"id\"] for item in bridge_subitems}\n        \n        if not required_subitems.issubset(actual_subitems):\n            print(f\"Error: Advanced Foundations Review should have at least these 3 sub-items: Decorators, Calling API, Regular Expressions.\", file=sys.stderr)\n            return False\n        \n        # Due to bidirectional relations, lessons that have this as parent will also appear as sub-items\n        # We expect at least 5: 3 initial + 2 that reference it as parent (Metaprogramming and Memory Management)\n        if len(bridge_subitems) < 5:\n            print(f\"Error: Advanced Foundations Review should have at least 5 sub-items (3 initial + 2 from parent relations), found {len(bridge_subitems)}.\", file=sys.stderr)\n            return False\n        \n        print(f\"âœ“ Advanced Foundations Review has {len(bridge_subitems)} sub-items, including the 3 required ones\")\n        \n        print(f\"âœ“ Advanced Foundations Review found with correct properties\")\n        \n    except Exception as e:\n        print(f\"Error checking bridge lesson: {e}\", file=sys.stderr)\n        return False\n    \n    # Step 6: Verify the 4 expert lessons\n    print(\"6. Checking the 4 expert lessons...\")\n    \n    # Note: Async Concurrency Patterns will have Error Handling as parent (due to sub-item relation)\n    # We'll need to find Error Handling's ID first\n    error_handling_response = notion.databases.query(\n        database_id=steps_db_id,\n        filter={\n            \"property\": \"Lessons\",\n            \"title\": {\n                \"equals\": \"Error Handling\"\n            }\n        }\n    )\n    \n    error_handling_id = None\n    if error_handling_response.get(\"results\"):\n        error_handling_id = error_handling_response[\"results\"][0][\"id\"]\n    else:\n        print(f\"Error: Error Handling lesson not found.\", file=sys.stderr)\n        return False\n    \n    expert_lessons = {\n        \"Metaprogramming and AST Manipulation\": {\n            \"status\": \"To Do\",\n            \"parent\": bridge_id,\n            \"date\": \"2025-09-15\"\n        },\n        \"Async Concurrency Patterns\": {\n            \"status\": \"To Do\",\n            \"parent\": error_handling_id,  # Parent is Error Handling due to sub-item relation\n            \"date\": \"2025-09-20\"\n        },\n        \"Memory Management and GC Tuning\": {\n            \"status\": \"In Progress\",\n            \"parent\": bridge_id,\n            \"date\": \"2025-09-25\"\n        },\n        \"Building Python C Extensions\": {\n            \"status\": \"To Do\",\n            \"date\": \"2025-10-01\"\n        }\n    }\n    \n    lesson_ids = {}\n    \n    try:\n        for lesson_name, expected in expert_lessons.items():\n            lesson_response = notion.databases.query(\n                database_id=steps_db_id,\n                filter={\n                    \"property\": \"Lessons\",\n                    \"title\": {\n                        \"equals\": lesson_name\n                    }\n                }\n            )\n            \n            if not lesson_response.get(\"results\"):\n                print(f\"Error: Lesson '{lesson_name}' not found.\", file=sys.stderr)\n                return False\n            \n            lesson = lesson_response[\"results\"][0]\n            lesson_ids[lesson_name] = lesson[\"id\"]\n            \n            # Check status\n            if lesson[\"properties\"][\"Status\"][\"status\"][\"name\"] != expected[\"status\"]:\n                print(f\"Error: Lesson '{lesson_name}' should have status '{expected['status']}'.\", file=sys.stderr)\n                return False\n            \n            # Check linked to Expert Level chapter\n            lesson_chapters = lesson[\"properties\"][\"Chapters\"][\"relation\"]\n            if not any(rel[\"id\"] == expert_chapter_id for rel in lesson_chapters):\n                print(f\"Error: Lesson '{lesson_name}' not linked to Expert Level chapter.\", file=sys.stderr)\n                return False\n            \n            # Check date\n            lesson_date = lesson[\"properties\"][\"Date\"][\"date\"]\n            if lesson_date and lesson_date.get(\"start\") != expected[\"date\"]:\n                print(f\"Error: Lesson '{lesson_name}' should have date '{expected['date']}'.\", file=sys.stderr)\n                return False\n            \n            # Check parent item for lessons that have specific parent requirements\n            if \"parent\" in expected:\n                lesson_parent = lesson[\"properties\"][\"Parent item\"][\"relation\"]\n                if not lesson_parent or lesson_parent[0][\"id\"] != expected[\"parent\"]:\n                    print(f\"Error: Lesson '{lesson_name}' should have correct parent item.\", file=sys.stderr)\n                    return False\n            \n            print(f\"âœ“ Lesson '{lesson_name}' found with correct properties\")\n        \n        # Special checks for Building Python C Extensions parent relationship\n        # (other parent checks are handled in the loop above)\n        building_lesson = notion.databases.query(\n            database_id=steps_db_id,\n            filter={\n                \"property\": \"Lessons\",\n                \"title\": {\n                    \"equals\": \"Building Python C Extensions\"\n                }\n            }\n        )[\"results\"][0]\n        \n        building_parent = building_lesson[\"properties\"][\"Parent item\"][\"relation\"]\n        if not building_parent or building_parent[0][\"id\"] != lesson_ids[\"Metaprogramming and AST Manipulation\"]:\n            print(f\"Error: Building Python C Extensions should have Metaprogramming and AST Manipulation as parent.\", file=sys.stderr)\n            return False\n        \n        # Memory Management should have 2 sub-items\n        memory_lesson = notion.databases.query(\n            database_id=steps_db_id,\n            filter={\n                \"property\": \"Lessons\",\n                \"title\": {\n                    \"equals\": \"Memory Management and GC Tuning\"\n                }\n            }\n        )[\"results\"][0]\n        \n        memory_subitems = memory_lesson[\"properties\"][\"Sub-item\"][\"relation\"]\n        if len(memory_subitems) != 2:\n            print(f\"Error: Memory Management and GC Tuning should have exactly 2 sub-items.\", file=sys.stderr)\n            return False\n        \n    except Exception as e:\n        print(f\"Error checking expert lessons: {e}\", file=sys.stderr)\n        return False\n    \n    # Step 7: Verify Error Handling has Async Concurrency Patterns as sub-item\n    print(\"7. Checking Error Handling sub-item...\")\n    \n    try:\n        error_handling_response = notion.databases.query(\n            database_id=steps_db_id,\n            filter={\n                \"property\": \"Lessons\",\n                \"title\": {\n                    \"equals\": \"Error Handling\"\n                }\n            }\n        )\n        \n        if error_handling_response.get(\"results\"):\n            error_handling_lesson = error_handling_response[\"results\"][0]\n            error_subitems = error_handling_lesson[\"properties\"][\"Sub-item\"][\"relation\"]\n            \n            if not any(item[\"id\"] == lesson_ids[\"Async Concurrency Patterns\"] for item in error_subitems):\n                print(f\"Error: Error Handling should have Async Concurrency Patterns as sub-item.\", file=sys.stderr)\n                return False\n            \n            print(f\"âœ“ Error Handling has Async Concurrency Patterns as sub-item\")\n        else:\n            print(f\"Error: Error Handling lesson not found.\", file=sys.stderr)\n            return False\n        \n    except Exception as e:\n        print(f\"Error checking Error Handling: {e}\", file=sys.stderr)\n        return False\n    \n    # Step 8: Verify block content in Advanced Foundations Review\n    print(\"8. Checking Advanced Foundations Review page content...\")\n    \n    try:\n        blocks = notion_utils.get_all_blocks_recursively(notion, bridge_id)\n        \n        if len(blocks) < 3:\n            print(f\"Error: Advanced Foundations Review should have at least 3 blocks.\", file=sys.stderr)\n            return False\n        \n        # Check Block 1: Heading 2\n        block1 = blocks[0]\n        if block1.get(\"type\") != \"heading_2\":\n            print(f\"Error: First block should be heading_2.\", file=sys.stderr)\n            return False\n        \n        heading_text = block1.get(\"heading_2\", {}).get(\"rich_text\", [{}])[0].get(\"text\", {}).get(\"content\", \"\")\n        if heading_text != \"Prerequisites Checklist\":\n            print(f\"Error: Heading should be 'Prerequisites Checklist'.\", file=sys.stderr)\n            return False\n        \n        # Check Block 2: Bulleted list\n        block2 = blocks[1]\n        if block2.get(\"type\") != \"bulleted_list_item\":\n            print(f\"Error: Second block should be bulleted_list_item.\", file=sys.stderr)\n            return False\n        \n        # Check Block 3 and 4 are also bulleted list items\n        if len(blocks) >= 4:\n            block3 = blocks[2]\n            block4 = blocks[3]\n            if block3.get(\"type\") != \"bulleted_list_item\" or block4.get(\"type\") != \"bulleted_list_item\":\n                print(f\"Error: Blocks 2-4 should be bulleted list items.\", file=sys.stderr)\n                return False\n        \n        # Check last block is paragraph\n        last_block = blocks[-1]\n        if last_block.get(\"type\") != \"paragraph\":\n            print(f\"Error: Last block should be paragraph.\", file=sys.stderr)\n            return False\n        \n        paragraph_text = last_block.get(\"paragraph\", {}).get(\"rich_text\", [{}])[0].get(\"text\", {}).get(\"content\", \"\")\n        if \"checkpoint\" not in paragraph_text.lower():\n            print(f\"Error: Paragraph should contain text about checkpoint.\", file=sys.stderr)\n            return False\n        \n        print(f\"âœ“ Advanced Foundations Review page has correct content structure\")\n        \n    except Exception as e:\n        print(f\"Error checking page content: {e}\", file=sys.stderr)\n        return False\n    \n    # Step 9: Final verification counts\n    print(\"9. Verifying final state counts...\")\n    \n    try:\n        # Count total lessons by status\n        all_lessons = notion.databases.query(database_id=steps_db_id, page_size=100)[\"results\"]\n        \n        done_lessons = [l for l in all_lessons if l[\"properties\"][\"Status\"][\"status\"][\"name\"] == \"Done\"]\n        done_count = len(done_lessons)\n        in_progress_count = sum(1 for l in all_lessons if l[\"properties\"][\"Status\"][\"status\"][\"name\"] == \"In Progress\")\n        \n        # Print out all Done lessons for debugging\n        if done_count != 14:\n            print(f\"Found {done_count} Done lessons (expected 14):\", file=sys.stderr)\n            for lesson in done_lessons:\n                lesson_name = lesson[\"properties\"][\"Lessons\"][\"title\"][0][\"text\"][\"content\"]\n                print(f\"  - {lesson_name}\", file=sys.stderr)\n            return False\n        \n        if in_progress_count != 1:\n            print(f\"Error: Should have 1 In Progress lesson, found {in_progress_count}.\", file=sys.stderr)\n            return False\n        \n        # Verify Expert Level has 5 lessons\n        expert_chapter_updated = notion.databases.query(\n            database_id=chapters_db_id,\n            filter={\n                \"property\": \"Name\",\n                \"title\": {\n                    \"equals\": \"Expert Level\"\n                }\n            }\n        )[\"results\"][0]\n        \n        expert_steps = expert_chapter_updated[\"properties\"][\"Steps\"][\"relation\"]\n        if len(expert_steps) != 5:\n            print(f\"Error: Expert Level should have exactly 5 lessons, found {len(expert_steps)}.\", file=sys.stderr)\n            return False\n        \n        print(f\"âœ“ Final state counts are correct\")\n        \n    except Exception as e:\n        print(f\"Error verifying final counts: {e}\", file=sys.stderr)\n        return False\n    \n    print(\"ðŸŽ‰ All verification checks passed!\")\n    return True\n\ndef main():\n    \"\"\"\n    Executes the verification process and exits with a status code.\n    \"\"\"\n    notion = notion_utils.get_notion_client()\n    main_id = sys.argv[1] if len(sys.argv) > 1 else None\n    if verify(notion, main_id):\n        sys.exit(0)\n    else:\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    main()"
}