{
  "task_id": "layout_adjustment",
  "task_name": "Layout Adjustment",
  "category_id": "online_resume",
  "category_name": "Online Resume",
  "description": "This task involves modifying the layout and content of an online resume page by restructuring the Skills section with icon indicators and adjusting the Work History and Education sections to use equal column widths with placeholder images.",
  "author": "Xiangyan Liu",
  "created_at": "2025-08-14",
  "difficulty": "L3",
  "tags": [
    "content organization",
    "visual formatting",
    "conditional filtering",
    "template population"
  ],
  "mcp": [
    "notion"
  ],
  "meta_data": {
    "stateType": "url",
    "stateContent": null,
    "stateUrl": "https://painted-tennis-ebc.notion.site/Online-Resume-23181626b6d781159faaeb5eadaf612e",
    "stateOriginalUrl": "https://www.notion.so/marketplace/templates/online-resume"
  },
  "instruction": "Please go to my Online Resume page and adjust the Skills display with the following requirements:\n\n## Skills Section Adjustment\n1. Delete the Skills database from the right side of the page\n2. Add a new Skills section on the left side, under the Languages section\n3. Format skills as \"[icon] skill description (type)\", for example \"✨✨ Photoshop (Design Tool)\"\n   - Use ✨✨ icon for skills with level >= 50%\n   - Use ✨ icon for skills with level < 50%\n\n## Work History and Education Layout Adjustment\n1. Adjust the layout so that logo/image columns take up 50% width in each section\n   - Note: Column width ratio might not be returned by API when columns are equal (50/50)\n2. Replace all images/icons with black placeholder images using URL containing \"https://singlecolorimage.com/get/000000/1024x128\"",
  "verify": "import sys\nfrom notion_client import Client\nfrom tasks.utils import notion_utils\n\n\ndef verify(notion: Client, main_id: str = None) -> bool:\n    \"\"\"\n    Verifies that the Skills display has been adjusted correctly:\n    1. Skills database on the right side should be deleted\n    2. Skills section should be added on the left side under Languages\n    3. Skills should be formatted with correct icons based on skill level\n    4. Work History and Education sections should use black placeholder images\n    \"\"\"\n    page_id = None\n    if main_id:\n        found_id, object_type = notion_utils.find_page_or_database_by_id(\n            notion, main_id\n        )\n        if found_id and object_type == \"page\":\n            page_id = found_id\n\n    if not page_id:\n        page_id = notion_utils.find_page(notion, \"Online Resume\")\n    if not page_id:\n        print(\"Error: Page 'Online Resume' not found.\", file=sys.stderr)\n        return False\n\n    all_blocks = notion_utils.get_all_blocks_recursively(notion, page_id)\n\n    # Step 1: Verify Skills database is NOT in the right column anymore\n    # Find the main column list\n    for block in all_blocks:\n        if block.get(\"type\") == \"column_list\":\n            column_list_id = block[\"id\"]\n            columns = notion_utils.get_all_blocks_recursively(notion, column_list_id)\n            \n            # Check if this is the main two-column layout\n            if len(columns) == 2:\n                # Find the right column (usually the one with larger width ratio)\n                for column in columns:\n                    if column.get(\"type\") == \"column\":\n                        width_ratio = column.get(\"column\", {}).get(\"width_ratio\", 0)\n                        # Right column typically has width_ratio > 0.5\n                        if width_ratio > 0.5:\n                            right_column_id = column[\"id\"]\n                            right_column_blocks = notion_utils.get_all_blocks_recursively(\n                                notion, right_column_id\n                            )\n                            \n                            # Check if Skills database exists in right column\n                            for right_block in right_column_blocks:\n                                if (\n                                    right_block.get(\"type\") == \"child_database\"\n                                    and right_block.get(\"child_database\", {}).get(\"title\") == \"Skills\"\n                                ):\n                                    print(\n                                        \"Error: Skills database still exists in the right column.\",\n                                        file=sys.stderr,\n                                    )\n                                    return False\n\n    # Step 2: Find the left column and verify Skills section exists there\n    skills_section_found = False\n    skills_with_double_sparkles = []\n    skills_with_single_sparkle = []\n    \n    # First, find the main column_list (top-level)\n    main_column_list_id = None\n    for block in all_blocks:\n        if block.get(\"type\") == \"column_list\" and block.get(\"parent\", {}).get(\"type\") == \"page_id\":\n            main_column_list_id = block[\"id\"]\n            break\n    \n    if not main_column_list_id:\n        print(\"Error: Main column list not found.\", file=sys.stderr)\n        return False\n    \n    # Get the columns directly\n    columns = notion_utils.get_all_blocks_recursively(notion, main_column_list_id)\n    \n    # Find the left column (the one with width_ratio around 0.25)\n    left_column_id = None\n    for column in columns:\n        if column.get(\"type\") == \"column\":\n            width_ratio = column.get(\"column\", {}).get(\"width_ratio\", 0)\n            # Left column has width_ratio around 0.25\n            if 0.2 <= width_ratio <= 0.3:\n                left_column_id = column[\"id\"]\n                break\n    \n    if not left_column_id:\n        print(\"Error: Left column not found.\", file=sys.stderr)\n        return False\n    \n    # Get all blocks in the left column\n    left_column_blocks = notion_utils.get_all_blocks_recursively(notion, left_column_id)\n    \n    # Find Languages heading\n    languages_index = -1\n    for i, left_block in enumerate(left_column_blocks):\n        if (\n            left_block.get(\"type\") == \"heading_2\"\n            and \"Languages\" in notion_utils.get_block_plain_text(left_block)\n        ):\n            languages_index = i\n            break\n    \n    if languages_index == -1:\n        print(\"Error: Languages heading not found in left column.\", file=sys.stderr)\n        return False\n    \n    # Look for Skills heading after Languages\n    for i in range(languages_index + 1, len(left_column_blocks)):\n        left_block = left_column_blocks[i]\n        \n        if (\n            left_block.get(\"type\") == \"heading_2\"\n            and \"Skills\" in notion_utils.get_block_plain_text(left_block)\n        ):\n            skills_section_found = True\n            \n            # Check divider after Skills heading\n            if i + 1 < len(left_column_blocks):\n                next_block = left_column_blocks[i + 1]\n                if next_block.get(\"type\") != \"divider\":\n                    print(\n                        \"Error: Divider not found after Skills heading.\",\n                        file=sys.stderr,\n                    )\n                    return False\n            \n            # Collect skills after divider\n            for j in range(i + 2, len(left_column_blocks)):\n                skill_block = left_column_blocks[j]\n                if skill_block.get(\"type\") == \"paragraph\":\n                    skill_text = notion_utils.get_block_plain_text(skill_block)\n                    if skill_text and skill_text.strip():  # Check for non-empty text\n                        # Check if text is bold\n                        rich_text = skill_block.get(\"paragraph\", {}).get(\"rich_text\", [])\n                        if rich_text and not rich_text[0].get(\"annotations\", {}).get(\"bold\"):\n                            print(\n                                f\"Error: Skill '{skill_text}' is not bold.\",\n                                file=sys.stderr,\n                            )\n                            return False\n                        \n                        # Check icon format\n                        if skill_text.startswith(\"✨✨\"):\n                            skills_with_double_sparkles.append(skill_text)\n                        elif skill_text.startswith(\"✨\"):\n                            skills_with_single_sparkle.append(skill_text)\n                        else:\n                            print(\n                                f\"Error: Skill '{skill_text}' doesn't start with sparkle icon.\",\n                                file=sys.stderr,\n                            )\n                            return False\n                        \n                        # Check format includes type in parentheses\n                        if \"(\" not in skill_text or \")\" not in skill_text:\n                            print(\n                                f\"Error: Skill '{skill_text}' doesn't include type in parentheses.\",\n                                file=sys.stderr,\n                            )\n                            return False\n                elif skill_block.get(\"type\") in [\"heading_1\", \"heading_2\", \"heading_3\"]:\n                    # Stop when we reach another section\n                    break\n            break\n\n    if not skills_section_found:\n        print(\n            \"Error: Skills section not found in the left column under Languages.\",\n            file=sys.stderr,\n        )\n        return False\n\n    # Step 3: Verify we have the expected skills\n    expected_double_sparkle_skills = [\n        \"Photoshop\",\n        \"Figma\",\n        \"Notion\",\n        \"Framer\"\n    ]\n    \n    expected_single_sparkle_skills = [\n        \"Webflow\",\n        \"Rive\",\n        \"CSS + Basic JS\"\n    ]\n    \n    # Check if all expected skills are present\n    for skill_name in expected_double_sparkle_skills:\n        found = any(skill_name in skill for skill in skills_with_double_sparkles)\n        if not found:\n            print(\n                f\"Error: Expected skill '{skill_name}' with ✨✨ not found.\",\n                file=sys.stderr,\n            )\n            return False\n    \n    for skill_name in expected_single_sparkle_skills:\n        found = any(skill_name in skill for skill in skills_with_single_sparkle)\n        if not found:\n            print(\n                f\"Error: Expected skill '{skill_name}' with ✨ not found.\",\n                file=sys.stderr,\n            )\n            return False\n\n    # Step 4: Verify Work History and Education sections have black placeholder images\n    work_history_images_found = 0\n    education_images_found = 0\n    black_placeholder_url = \"https://singlecolorimage.com/get/000000/\"\n    \n    # Find Work History and Education sections in the right column\n    right_column_id = None\n    for column in columns:\n        if column.get(\"type\") == \"column\":\n            width_ratio = column.get(\"column\", {}).get(\"width_ratio\", 0.5)\n            # Right column has width_ratio around 0.75 or no width_ratio (which means equal split)\n            if width_ratio > 0.6 or width_ratio == 0.5:\n                right_column_id = column[\"id\"]\n                break\n    \n    if right_column_id:\n        right_column_blocks = notion_utils.get_all_blocks_recursively(notion, right_column_id)\n        \n        # Find Work History section\n        work_history_index = -1\n        education_index = -1\n        \n        for i, block in enumerate(right_column_blocks):\n            if block.get(\"type\") == \"heading_1\":\n                heading_text = notion_utils.get_block_plain_text(block)\n                if \"Work History\" in heading_text:\n                    work_history_index = i\n                elif \"Education\" in heading_text:\n                    education_index = i\n        \n        # Check Work History column lists for images\n        if work_history_index != -1:\n            for i in range(work_history_index + 1, min(education_index if education_index > work_history_index else len(right_column_blocks), len(right_column_blocks))):\n                block = right_column_blocks[i]\n                if block.get(\"type\") == \"column_list\":\n                    column_list_blocks = notion_utils.get_all_blocks_recursively(notion, block[\"id\"])\n                    for column in column_list_blocks:\n                        if column.get(\"type\") == \"column\":\n                            # Check width_ratio - must be 50% (0.5) or absent (which defaults to 50%)\n                            col_width = column.get(\"column\", {}).get(\"width_ratio\")\n                            # First column should be image column (either no ratio=50%, or exactly 0.5)\n                            if col_width is None or col_width == 0.5:\n                                column_contents = notion_utils.get_all_blocks_recursively(notion, column[\"id\"])\n                                for content_block in column_contents:\n                                    if content_block.get(\"type\") == \"embed\":\n                                        embed_url = content_block.get(\"embed\", {}).get(\"url\", \"\")\n                                        if black_placeholder_url in embed_url:\n                                            work_history_images_found += 1\n                                    elif content_block.get(\"type\") == \"image\":\n                                        # Also check for image blocks with external URL\n                                        image_url = content_block.get(\"image\", {}).get(\"external\", {}).get(\"url\", \"\")\n                                        if black_placeholder_url in image_url:\n                                            work_history_images_found += 1\n                                break  # Only check first column\n        \n        # Check Education column list for images\n        if education_index != -1:\n            for i in range(education_index + 1, len(right_column_blocks)):\n                block = right_column_blocks[i]\n                if block.get(\"type\") == \"heading_1\":\n                    break  # Stop at next section\n                if block.get(\"type\") == \"column_list\":\n                    column_list_blocks = notion_utils.get_all_blocks_recursively(notion, block[\"id\"])\n                    for column in column_list_blocks:\n                        if column.get(\"type\") == \"column\":\n                            # Check width_ratio - must be 50% (0.5) or absent (which defaults to 50%)\n                            col_width = column.get(\"column\", {}).get(\"width_ratio\")\n                            # First column should be image column (either no ratio=50%, or exactly 0.5)\n                            if col_width is None or col_width == 0.5:\n                                column_contents = notion_utils.get_all_blocks_recursively(notion, column[\"id\"])\n                                for content_block in column_contents:\n                                    if content_block.get(\"type\") == \"embed\":\n                                        embed_url = content_block.get(\"embed\", {}).get(\"url\", \"\")\n                                        if black_placeholder_url in embed_url:\n                                            education_images_found += 1\n                                    elif content_block.get(\"type\") == \"image\":\n                                        image_url = content_block.get(\"image\", {}).get(\"external\", {}).get(\"url\", \"\")\n                                        if black_placeholder_url in image_url:\n                                            education_images_found += 1\n                                break  # Only check first column\n                    break  # Only check first column_list in Education\n    \n    # Verify images were found\n    if work_history_images_found < 2:\n        print(\n            f\"Warning: Expected at least 2 Work History images with black placeholder, found {work_history_images_found}.\",\n            file=sys.stderr,\n        )\n        return False\n    \n    if education_images_found < 1:\n        print(\n            f\"Warning: Expected at least 1 Education image with black placeholder, found {education_images_found}.\",\n            file=sys.stderr,\n        )\n        return False\n    \n    print(\"Success: Skills display adjusted correctly.\")\n    print(f\"- Found {len(skills_with_double_sparkles)} skills with ✨✨ (skill level >= 50%)\")\n    print(f\"- Found {len(skills_with_single_sparkle)} skills with ✨ (skill level < 50%)\")\n    print(\"- Skills database removed from right column\")\n    print(\"- Skills section added to left column under Languages\")\n    print(f\"- Found {work_history_images_found} Work History images with black placeholder\")\n    print(f\"- Found {education_images_found} Education images with black placeholder\")\n    return True\n\n\ndef main():\n    \"\"\"\n    Executes the verification process and exits with a status code.\n    \"\"\"\n    notion = notion_utils.get_notion_client()\n    main_id = sys.argv[1] if len(sys.argv) > 1 else None\n    if verify(notion, main_id):\n        sys.exit(0)\n    else:\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()"
}